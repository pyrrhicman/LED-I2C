
LED-I2C-Master C++.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000001a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a66  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a0  00000000  00000000  00000ce6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000510  00000000  00000000  00001386  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  00001898  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ab  00000000  00000000  00001a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000700  00000000  00000000  00001eaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000025af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 76 00 	call	0xec	; 0xec <main>
  74:	0c 94 95 00 	jmp	0x12a	; 0x12a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <_Z9i2c_starth>:
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
  7c:	16 be       	out	0x36, r1	; 54
  7e:	94 ea       	ldi	r25, 0xA4	; 164
  80:	96 bf       	out	0x36, r25	; 54
  82:	06 b6       	in	r0, 0x36	; 54
  84:	07 fe       	sbrs	r0, 7
  86:	fd cf       	rjmp	.-6      	; 0x82 <_Z9i2c_starth+0x6>
  88:	91 b1       	in	r25, 0x01	; 1
  8a:	98 7f       	andi	r25, 0xF8	; 248
  8c:	98 30       	cpi	r25, 0x08	; 8
  8e:	79 f4       	brne	.+30     	; 0xae <_Z9i2c_starth+0x32>
  90:	83 b9       	out	0x03, r24	; 3
  92:	84 e8       	ldi	r24, 0x84	; 132
  94:	86 bf       	out	0x36, r24	; 54
  96:	06 b6       	in	r0, 0x36	; 54
  98:	07 fe       	sbrs	r0, 7
  9a:	fd cf       	rjmp	.-6      	; 0x96 <_Z9i2c_starth+0x1a>
  9c:	91 b1       	in	r25, 0x01	; 1
  9e:	98 7f       	andi	r25, 0xF8	; 248
  a0:	98 31       	cpi	r25, 0x18	; 24
  a2:	39 f0       	breq	.+14     	; 0xb2 <_Z9i2c_starth+0x36>
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	90 34       	cpi	r25, 0x40	; 64
  a8:	29 f4       	brne	.+10     	; 0xb4 <_Z9i2c_starth+0x38>
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	08 95       	ret
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	08 95       	ret
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	08 95       	ret

000000b6 <_Z9i2c_writeh>:
  b6:	83 b9       	out	0x03, r24	; 3
  b8:	84 e8       	ldi	r24, 0x84	; 132
  ba:	86 bf       	out	0x36, r24	; 54
  bc:	06 b6       	in	r0, 0x36	; 54
  be:	07 fe       	sbrs	r0, 7
  c0:	fd cf       	rjmp	.-6      	; 0xbc <_Z9i2c_writeh+0x6>
  c2:	91 b1       	in	r25, 0x01	; 1
  c4:	98 7f       	andi	r25, 0xF8	; 248
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	98 32       	cpi	r25, 0x28	; 40
  ca:	09 f4       	brne	.+2      	; 0xce <_Z9i2c_writeh+0x18>
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	08 95       	ret

000000d0 <_Z12i2c_read_ackv>:
  d0:	84 ec       	ldi	r24, 0xC4	; 196
  d2:	86 bf       	out	0x36, r24	; 54
  d4:	06 b6       	in	r0, 0x36	; 54
  d6:	07 fe       	sbrs	r0, 7
  d8:	fd cf       	rjmp	.-6      	; 0xd4 <_Z12i2c_read_ackv+0x4>
  da:	83 b1       	in	r24, 0x03	; 3
  dc:	08 95       	ret

000000de <_Z13i2c_read_nackv>:
  de:	84 e8       	ldi	r24, 0x84	; 132
  e0:	86 bf       	out	0x36, r24	; 54
  e2:	06 b6       	in	r0, 0x36	; 54
  e4:	07 fe       	sbrs	r0, 7
  e6:	fd cf       	rjmp	.-6      	; 0xe2 <_Z13i2c_read_nackv+0x4>
  e8:	83 b1       	in	r24, 0x03	; 3
  ea:	08 95       	ret

000000ec <main>:
#define Prescaler 1
#define TWBR_val ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)

void i2c_init(void)
{
	TWBR = (uint8_t)TWBR_val;
  ec:	80 e2       	ldi	r24, 0x20	; 32
  ee:	80 b9       	out	0x00, r24	; 0

char data_received;
int main(void)
{
	i2c_init();
	DDRA = 0;
  f0:	1a ba       	out	0x1a, r1	; 26
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
  f2:	c4 e9       	ldi	r28, 0x94	; 148
    /* Replace with your application code */
    while (1) 
    {
		char key = 0x2f;
		i2c_start(0x10<<1 | I2C_WRITE);
  f4:	80 e2       	ldi	r24, 0x20	; 32
  f6:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z9i2c_starth>
		i2c_write(PINA);
  fa:	89 b3       	in	r24, 0x19	; 25
  fc:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z9i2c_writeh>
 100:	c6 bf       	out	0x36, r28	; 54
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	2f ef       	ldi	r18, 0xFF	; 255
 104:	8d e3       	ldi	r24, 0x3D	; 61
 106:	99 e4       	ldi	r25, 0x49	; 73
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	80 40       	sbci	r24, 0x00	; 0
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <main+0x1c>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x26>
 112:	00 00       	nop
		i2c_stop();
		_delay_ms(3000);
		i2c_start(0x10<<1 | I2C_READ);
 114:	81 e2       	ldi	r24, 0x21	; 33
 116:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z9i2c_starth>
		data_received = i2c_read_ack();
 11a:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z12i2c_read_ackv>
 11e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		i2c_read_nack();
 122:	0e 94 6f 00 	call	0xde	; 0xde <_Z13i2c_read_nackv>
 126:	c6 bf       	out	0x36, r28	; 54
 128:	e5 cf       	rjmp	.-54     	; 0xf4 <main+0x8>

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
