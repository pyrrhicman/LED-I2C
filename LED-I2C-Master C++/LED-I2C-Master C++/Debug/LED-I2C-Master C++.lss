
LED-I2C-Master C++.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001684  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00001684  00001718  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800066  00800066  0000171e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000171e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001750  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  0000178c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a86  00000000  00000000  000018c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000092d  00000000  00000000  0000434a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fb7  00000000  00000000  00004c77  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004e8  00000000  00000000  00005c30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cd2  00000000  00000000  00006118  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002816  00000000  00000000  00006dea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00009600  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__ctors_end>
       4:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
       8:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
       c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      10:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      14:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      18:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      1c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      20:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      24:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      28:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      2c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      30:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      34:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      38:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      3c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      40:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      44:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      48:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      4c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      50:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      54:	ce 08       	sbc	r12, r14
      56:	d7 08       	sbc	r13, r7
      58:	d7 08       	sbc	r13, r7
      5a:	d7 08       	sbc	r13, r7
      5c:	d7 08       	sbc	r13, r7
      5e:	d7 08       	sbc	r13, r7
      60:	d7 08       	sbc	r13, r7
      62:	d7 08       	sbc	r13, r7
      64:	d7 08       	sbc	r13, r7
      66:	d7 08       	sbc	r13, r7
      68:	d7 08       	sbc	r13, r7
      6a:	d7 08       	sbc	r13, r7
      6c:	d7 08       	sbc	r13, r7
      6e:	d7 08       	sbc	r13, r7
      70:	d7 08       	sbc	r13, r7
      72:	d7 08       	sbc	r13, r7
      74:	d7 08       	sbc	r13, r7
      76:	d7 08       	sbc	r13, r7
      78:	d7 08       	sbc	r13, r7
      7a:	d7 08       	sbc	r13, r7
      7c:	d7 08       	sbc	r13, r7
      7e:	d7 08       	sbc	r13, r7
      80:	d7 08       	sbc	r13, r7
      82:	d7 08       	sbc	r13, r7
      84:	d7 08       	sbc	r13, r7
      86:	d7 08       	sbc	r13, r7
      88:	d7 08       	sbc	r13, r7
      8a:	d7 08       	sbc	r13, r7
      8c:	d7 08       	sbc	r13, r7
      8e:	a7 08       	sbc	r10, r7
      90:	1d 08       	sbc	r1, r13
      92:	41 08       	sbc	r4, r1
      94:	d7 08       	sbc	r13, r7
      96:	b7 08       	sbc	r11, r7
      98:	d7 08       	sbc	r13, r7
      9a:	d7 08       	sbc	r13, r7
      9c:	d7 08       	sbc	r13, r7
      9e:	d7 08       	sbc	r13, r7
      a0:	d7 08       	sbc	r13, r7
      a2:	d7 08       	sbc	r13, r7
      a4:	d7 08       	sbc	r13, r7
      a6:	d7 08       	sbc	r13, r7
      a8:	d7 08       	sbc	r13, r7
      aa:	d7 08       	sbc	r13, r7
      ac:	d7 08       	sbc	r13, r7
      ae:	d7 08       	sbc	r13, r7
      b0:	c3 08       	sbc	r12, r3
      b2:	d7 08       	sbc	r13, r7
      b4:	6d 08       	sbc	r6, r13
      b6:	d7 08       	sbc	r13, r7
      b8:	d7 08       	sbc	r13, r7
      ba:	89 08       	sbc	r8, r9
      bc:	d7 08       	sbc	r13, r7
      be:	d7 08       	sbc	r13, r7
      c0:	d7 08       	sbc	r13, r7
      c2:	d7 08       	sbc	r13, r7
      c4:	d7 08       	sbc	r13, r7
      c6:	d7 08       	sbc	r13, r7
      c8:	d7 08       	sbc	r13, r7
      ca:	d7 08       	sbc	r13, r7
      cc:	d7 08       	sbc	r13, r7
      ce:	97 08       	sbc	r9, r7
      d0:	1d 08       	sbc	r1, r13
      d2:	28 08       	sbc	r2, r8
      d4:	d7 08       	sbc	r13, r7
      d6:	b7 08       	sbc	r11, r7
      d8:	d7 08       	sbc	r13, r7
      da:	d7 08       	sbc	r13, r7
      dc:	d7 08       	sbc	r13, r7
      de:	d7 08       	sbc	r13, r7
      e0:	d7 08       	sbc	r13, r7
      e2:	d7 08       	sbc	r13, r7
      e4:	d7 08       	sbc	r13, r7
      e6:	d7 08       	sbc	r13, r7
      e8:	d7 08       	sbc	r13, r7
      ea:	d7 08       	sbc	r13, r7
      ec:	d7 08       	sbc	r13, r7
      ee:	d7 08       	sbc	r13, r7
      f0:	c3 08       	sbc	r12, r3
      f2:	d7 08       	sbc	r13, r7
      f4:	5f 08       	sbc	r5, r15
      f6:	d7 08       	sbc	r13, r7
      f8:	d7 08       	sbc	r13, r7
      fa:	7b 08       	sbc	r7, r11
      fc:	ce 08       	sbc	r12, r14
      fe:	d7 08       	sbc	r13, r7
     100:	d7 08       	sbc	r13, r7
     102:	d7 08       	sbc	r13, r7
     104:	d7 08       	sbc	r13, r7
     106:	d7 08       	sbc	r13, r7
     108:	d7 08       	sbc	r13, r7
     10a:	d7 08       	sbc	r13, r7
     10c:	d7 08       	sbc	r13, r7
     10e:	d7 08       	sbc	r13, r7
     110:	d7 08       	sbc	r13, r7
     112:	d7 08       	sbc	r13, r7
     114:	d7 08       	sbc	r13, r7
     116:	d7 08       	sbc	r13, r7
     118:	d7 08       	sbc	r13, r7
     11a:	d7 08       	sbc	r13, r7
     11c:	d7 08       	sbc	r13, r7
     11e:	d7 08       	sbc	r13, r7
     120:	d7 08       	sbc	r13, r7
     122:	d7 08       	sbc	r13, r7
     124:	d7 08       	sbc	r13, r7
     126:	d7 08       	sbc	r13, r7
     128:	d7 08       	sbc	r13, r7
     12a:	d7 08       	sbc	r13, r7
     12c:	d7 08       	sbc	r13, r7
     12e:	d7 08       	sbc	r13, r7
     130:	d7 08       	sbc	r13, r7
     132:	d7 08       	sbc	r13, r7
     134:	d7 08       	sbc	r13, r7
     136:	e0 08       	sbc	r14, r0
     138:	1d 08       	sbc	r1, r13
     13a:	40 08       	sbc	r4, r0
     13c:	d7 08       	sbc	r13, r7
     13e:	b7 08       	sbc	r11, r7
     140:	d7 08       	sbc	r13, r7
     142:	d7 08       	sbc	r13, r7
     144:	d7 08       	sbc	r13, r7
     146:	d7 08       	sbc	r13, r7
     148:	d7 08       	sbc	r13, r7
     14a:	d7 08       	sbc	r13, r7
     14c:	d7 08       	sbc	r13, r7
     14e:	d7 08       	sbc	r13, r7
     150:	d7 08       	sbc	r13, r7
     152:	d7 08       	sbc	r13, r7
     154:	d7 08       	sbc	r13, r7
     156:	d7 08       	sbc	r13, r7
     158:	c3 08       	sbc	r12, r3
     15a:	d7 08       	sbc	r13, r7
     15c:	6c 08       	sbc	r6, r12
     15e:	d7 08       	sbc	r13, r7
     160:	d7 08       	sbc	r13, r7
     162:	88 08       	sbc	r8, r8
     164:	d7 08       	sbc	r13, r7
     166:	d7 08       	sbc	r13, r7
     168:	d7 08       	sbc	r13, r7
     16a:	d7 08       	sbc	r13, r7
     16c:	d7 08       	sbc	r13, r7
     16e:	d7 08       	sbc	r13, r7
     170:	d7 08       	sbc	r13, r7
     172:	d7 08       	sbc	r13, r7
     174:	d7 08       	sbc	r13, r7
     176:	96 08       	sbc	r9, r6
     178:	1d 08       	sbc	r1, r13
     17a:	27 08       	sbc	r2, r7
     17c:	d7 08       	sbc	r13, r7
     17e:	b7 08       	sbc	r11, r7
     180:	d7 08       	sbc	r13, r7
     182:	d7 08       	sbc	r13, r7
     184:	d7 08       	sbc	r13, r7
     186:	d7 08       	sbc	r13, r7
     188:	d7 08       	sbc	r13, r7
     18a:	d7 08       	sbc	r13, r7
     18c:	d7 08       	sbc	r13, r7
     18e:	d7 08       	sbc	r13, r7
     190:	d7 08       	sbc	r13, r7
     192:	d7 08       	sbc	r13, r7
     194:	d7 08       	sbc	r13, r7
     196:	d7 08       	sbc	r13, r7
     198:	c3 08       	sbc	r12, r3
     19a:	d7 08       	sbc	r13, r7
     19c:	5e 08       	sbc	r5, r14
     19e:	d7 08       	sbc	r13, r7
     1a0:	d7 08       	sbc	r13, r7
     1a2:	7a 08       	sbc	r7, r10

000001a4 <__ctors_start>:
     1a4:	7c 09       	sbc	r23, r12

000001a6 <__ctors_end>:
     1a6:	11 24       	eor	r1, r1
     1a8:	1f be       	out	0x3f, r1	; 63
     1aa:	cf e5       	ldi	r28, 0x5F	; 95
     1ac:	d8 e0       	ldi	r29, 0x08	; 8
     1ae:	de bf       	out	0x3e, r29	; 62
     1b0:	cd bf       	out	0x3d, r28	; 61

000001b2 <__do_copy_data>:
     1b2:	10 e0       	ldi	r17, 0x00	; 0
     1b4:	a0 e6       	ldi	r26, 0x60	; 96
     1b6:	b0 e0       	ldi	r27, 0x00	; 0
     1b8:	e4 e8       	ldi	r30, 0x84	; 132
     1ba:	f6 e1       	ldi	r31, 0x16	; 22
     1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <__do_copy_data+0x10>
     1be:	05 90       	lpm	r0, Z+
     1c0:	0d 92       	st	X+, r0
     1c2:	a6 36       	cpi	r26, 0x66	; 102
     1c4:	b1 07       	cpc	r27, r17
     1c6:	d9 f7       	brne	.-10     	; 0x1be <__do_copy_data+0xc>

000001c8 <__do_clear_bss>:
     1c8:	20 e0       	ldi	r18, 0x00	; 0
     1ca:	a6 e6       	ldi	r26, 0x66	; 102
     1cc:	b0 e0       	ldi	r27, 0x00	; 0
     1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <.do_clear_bss_start>

000001d0 <.do_clear_bss_loop>:
     1d0:	1d 92       	st	X+, r1

000001d2 <.do_clear_bss_start>:
     1d2:	ad 37       	cpi	r26, 0x7D	; 125
     1d4:	b2 07       	cpc	r27, r18
     1d6:	e1 f7       	brne	.-8      	; 0x1d0 <.do_clear_bss_loop>

000001d8 <__do_global_ctors>:
     1d8:	10 e0       	ldi	r17, 0x00	; 0
     1da:	c3 ed       	ldi	r28, 0xD3	; 211
     1dc:	d0 e0       	ldi	r29, 0x00	; 0
     1de:	04 c0       	rjmp	.+8      	; 0x1e8 <__do_global_ctors+0x10>
     1e0:	21 97       	sbiw	r28, 0x01	; 1
     1e2:	fe 01       	movw	r30, r28
     1e4:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__tablejump2__>
     1e8:	c2 3d       	cpi	r28, 0xD2	; 210
     1ea:	d1 07       	cpc	r29, r17
     1ec:	c9 f7       	brne	.-14     	; 0x1e0 <__do_global_ctors+0x8>
     1ee:	0e 94 07 09 	call	0x120e	; 0x120e <main>
     1f2:	0c 94 40 0b 	jmp	0x1680	; 0x1680 <_exit>

000001f6 <__bad_interrupt>:
     1f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001fa <_Z9i2c_starth>:
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		SendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
	_delay_ms(1);
}
     1fa:	16 be       	out	0x36, r1	; 54
     1fc:	94 ea       	ldi	r25, 0xA4	; 164
     1fe:	96 bf       	out	0x36, r25	; 54
     200:	06 b6       	in	r0, 0x36	; 54
     202:	07 fe       	sbrs	r0, 7
     204:	fd cf       	rjmp	.-6      	; 0x200 <_Z9i2c_starth+0x6>
     206:	91 b1       	in	r25, 0x01	; 1
     208:	98 7f       	andi	r25, 0xF8	; 248
     20a:	98 30       	cpi	r25, 0x08	; 8
     20c:	79 f4       	brne	.+30     	; 0x22c <_Z9i2c_starth+0x32>
     20e:	83 b9       	out	0x03, r24	; 3
     210:	84 e8       	ldi	r24, 0x84	; 132
     212:	86 bf       	out	0x36, r24	; 54
     214:	06 b6       	in	r0, 0x36	; 54
     216:	07 fe       	sbrs	r0, 7
     218:	fd cf       	rjmp	.-6      	; 0x214 <_Z9i2c_starth+0x1a>
     21a:	91 b1       	in	r25, 0x01	; 1
     21c:	98 7f       	andi	r25, 0xF8	; 248
     21e:	98 31       	cpi	r25, 0x18	; 24
     220:	39 f0       	breq	.+14     	; 0x230 <_Z9i2c_starth+0x36>
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	90 34       	cpi	r25, 0x40	; 64
     226:	29 f4       	brne	.+10     	; 0x232 <_Z9i2c_starth+0x38>
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	08 95       	ret
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	08 95       	ret
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	08 95       	ret

00000234 <_Z9i2c_writeh>:
     234:	83 b9       	out	0x03, r24	; 3
     236:	84 e8       	ldi	r24, 0x84	; 132
     238:	86 bf       	out	0x36, r24	; 54
     23a:	06 b6       	in	r0, 0x36	; 54
     23c:	07 fe       	sbrs	r0, 7
     23e:	fd cf       	rjmp	.-6      	; 0x23a <_Z9i2c_writeh+0x6>
     240:	91 b1       	in	r25, 0x01	; 1
     242:	98 7f       	andi	r25, 0xF8	; 248
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	98 32       	cpi	r25, 0x28	; 40
     248:	09 f4       	brne	.+2      	; 0x24c <_Z9i2c_writeh+0x18>
     24a:	80 e0       	ldi	r24, 0x00	; 0
     24c:	08 95       	ret

0000024e <_Z12i2c_read_ackv>:
     24e:	84 ec       	ldi	r24, 0xC4	; 196
     250:	86 bf       	out	0x36, r24	; 54
     252:	06 b6       	in	r0, 0x36	; 54
     254:	07 fe       	sbrs	r0, 7
     256:	fd cf       	rjmp	.-6      	; 0x252 <_Z12i2c_read_ackv+0x4>
     258:	83 b1       	in	r24, 0x03	; 3
     25a:	08 95       	ret

0000025c <_Z13i2c_read_nackv>:
     25c:	84 e8       	ldi	r24, 0x84	; 132
     25e:	86 bf       	out	0x36, r24	; 54
     260:	06 b6       	in	r0, 0x36	; 54
     262:	07 fe       	sbrs	r0, 7
     264:	fd cf       	rjmp	.-6      	; 0x260 <_Z13i2c_read_nackv+0x4>
     266:	83 b1       	in	r24, 0x03	; 3
     268:	08 95       	ret

0000026a <_ZN13Character_LCDC1Ev>:
     26a:	fc 01       	movw	r30, r24
     26c:	9b e1       	ldi	r25, 0x1B	; 27
     26e:	90 83       	st	Z, r25
     270:	8a e1       	ldi	r24, 0x1A	; 26
     272:	81 83       	std	Z+1, r24	; 0x01
     274:	12 82       	std	Z+2, r1	; 0x02
     276:	93 83       	std	Z+3, r25	; 0x03
     278:	84 83       	std	Z+4, r24	; 0x04
     27a:	21 e0       	ldi	r18, 0x01	; 1
     27c:	25 83       	std	Z+5, r18	; 0x05
     27e:	96 83       	std	Z+6, r25	; 0x06
     280:	87 83       	std	Z+7, r24	; 0x07
     282:	22 e0       	ldi	r18, 0x02	; 2
     284:	20 87       	std	Z+8, r18	; 0x08
     286:	91 87       	std	Z+9, r25	; 0x09
     288:	82 87       	std	Z+10, r24	; 0x0a
     28a:	23 e0       	ldi	r18, 0x03	; 3
     28c:	23 87       	std	Z+11, r18	; 0x0b
     28e:	94 87       	std	Z+12, r25	; 0x0c
     290:	85 87       	std	Z+13, r24	; 0x0d
     292:	24 e0       	ldi	r18, 0x04	; 4
     294:	26 87       	std	Z+14, r18	; 0x0e
     296:	97 87       	std	Z+15, r25	; 0x0f
     298:	80 8b       	std	Z+16, r24	; 0x10
     29a:	25 e0       	ldi	r18, 0x05	; 5
     29c:	21 8b       	std	Z+17, r18	; 0x11
     29e:	92 8b       	std	Z+18, r25	; 0x12
     2a0:	83 8b       	std	Z+19, r24	; 0x13
     2a2:	86 e0       	ldi	r24, 0x06	; 6
     2a4:	84 8b       	std	Z+20, r24	; 0x14
     2a6:	08 95       	ret

000002a8 <_ZN13Character_LCD8SendCharEh>:
     2a8:	fc 01       	movw	r30, r24
     2aa:	64 fd       	sbrc	r22, 4
     2ac:	12 c0       	rjmp	.+36     	; 0x2d2 <_ZN13Character_LCD8SendCharEh+0x2a>
     2ae:	a1 85       	ldd	r26, Z+9	; 0x09
     2b0:	b0 e0       	ldi	r27, 0x00	; 0
     2b2:	90 96       	adiw	r26, 0x20	; 32
     2b4:	2c 91       	ld	r18, X
     2b6:	90 97       	sbiw	r26, 0x20	; 32
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	03 84       	ldd	r0, Z+11	; 0x0b
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <_ZN13Character_LCD8SendCharEh+0x1c>
     2c0:	88 0f       	add	r24, r24
     2c2:	99 1f       	adc	r25, r25
     2c4:	0a 94       	dec	r0
     2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <_ZN13Character_LCD8SendCharEh+0x18>
     2c8:	80 95       	com	r24
     2ca:	82 23       	and	r24, r18
     2cc:	90 96       	adiw	r26, 0x20	; 32
     2ce:	8c 93       	st	X, r24
     2d0:	10 c0       	rjmp	.+32     	; 0x2f2 <_ZN13Character_LCD8SendCharEh+0x4a>
     2d2:	a1 85       	ldd	r26, Z+9	; 0x09
     2d4:	b0 e0       	ldi	r27, 0x00	; 0
     2d6:	90 96       	adiw	r26, 0x20	; 32
     2d8:	2c 91       	ld	r18, X
     2da:	90 97       	sbiw	r26, 0x20	; 32
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	03 84       	ldd	r0, Z+11	; 0x0b
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <_ZN13Character_LCD8SendCharEh+0x40>
     2e4:	88 0f       	add	r24, r24
     2e6:	99 1f       	adc	r25, r25
     2e8:	0a 94       	dec	r0
     2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <_ZN13Character_LCD8SendCharEh+0x3c>
     2ec:	82 2b       	or	r24, r18
     2ee:	90 96       	adiw	r26, 0x20	; 32
     2f0:	8c 93       	st	X, r24
     2f2:	65 fd       	sbrc	r22, 5
     2f4:	12 c0       	rjmp	.+36     	; 0x31a <_ZN13Character_LCD8SendCharEh+0x72>
     2f6:	a4 85       	ldd	r26, Z+12	; 0x0c
     2f8:	b0 e0       	ldi	r27, 0x00	; 0
     2fa:	90 96       	adiw	r26, 0x20	; 32
     2fc:	2c 91       	ld	r18, X
     2fe:	90 97       	sbiw	r26, 0x20	; 32
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	06 84       	ldd	r0, Z+14	; 0x0e
     306:	02 c0       	rjmp	.+4      	; 0x30c <_ZN13Character_LCD8SendCharEh+0x64>
     308:	88 0f       	add	r24, r24
     30a:	99 1f       	adc	r25, r25
     30c:	0a 94       	dec	r0
     30e:	e2 f7       	brpl	.-8      	; 0x308 <_ZN13Character_LCD8SendCharEh+0x60>
     310:	80 95       	com	r24
     312:	82 23       	and	r24, r18
     314:	90 96       	adiw	r26, 0x20	; 32
     316:	8c 93       	st	X, r24
     318:	10 c0       	rjmp	.+32     	; 0x33a <_ZN13Character_LCD8SendCharEh+0x92>
     31a:	a4 85       	ldd	r26, Z+12	; 0x0c
     31c:	b0 e0       	ldi	r27, 0x00	; 0
     31e:	90 96       	adiw	r26, 0x20	; 32
     320:	2c 91       	ld	r18, X
     322:	90 97       	sbiw	r26, 0x20	; 32
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	06 84       	ldd	r0, Z+14	; 0x0e
     32a:	02 c0       	rjmp	.+4      	; 0x330 <_ZN13Character_LCD8SendCharEh+0x88>
     32c:	88 0f       	add	r24, r24
     32e:	99 1f       	adc	r25, r25
     330:	0a 94       	dec	r0
     332:	e2 f7       	brpl	.-8      	; 0x32c <_ZN13Character_LCD8SendCharEh+0x84>
     334:	82 2b       	or	r24, r18
     336:	90 96       	adiw	r26, 0x20	; 32
     338:	8c 93       	st	X, r24
     33a:	66 fd       	sbrc	r22, 6
     33c:	12 c0       	rjmp	.+36     	; 0x362 <_ZN13Character_LCD8SendCharEh+0xba>
     33e:	a7 85       	ldd	r26, Z+15	; 0x0f
     340:	b0 e0       	ldi	r27, 0x00	; 0
     342:	90 96       	adiw	r26, 0x20	; 32
     344:	2c 91       	ld	r18, X
     346:	90 97       	sbiw	r26, 0x20	; 32
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	01 88       	ldd	r0, Z+17	; 0x11
     34e:	02 c0       	rjmp	.+4      	; 0x354 <_ZN13Character_LCD8SendCharEh+0xac>
     350:	88 0f       	add	r24, r24
     352:	99 1f       	adc	r25, r25
     354:	0a 94       	dec	r0
     356:	e2 f7       	brpl	.-8      	; 0x350 <_ZN13Character_LCD8SendCharEh+0xa8>
     358:	80 95       	com	r24
     35a:	82 23       	and	r24, r18
     35c:	90 96       	adiw	r26, 0x20	; 32
     35e:	8c 93       	st	X, r24
     360:	10 c0       	rjmp	.+32     	; 0x382 <_ZN13Character_LCD8SendCharEh+0xda>
     362:	a7 85       	ldd	r26, Z+15	; 0x0f
     364:	b0 e0       	ldi	r27, 0x00	; 0
     366:	90 96       	adiw	r26, 0x20	; 32
     368:	2c 91       	ld	r18, X
     36a:	90 97       	sbiw	r26, 0x20	; 32
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	01 88       	ldd	r0, Z+17	; 0x11
     372:	02 c0       	rjmp	.+4      	; 0x378 <_ZN13Character_LCD8SendCharEh+0xd0>
     374:	88 0f       	add	r24, r24
     376:	99 1f       	adc	r25, r25
     378:	0a 94       	dec	r0
     37a:	e2 f7       	brpl	.-8      	; 0x374 <_ZN13Character_LCD8SendCharEh+0xcc>
     37c:	82 2b       	or	r24, r18
     37e:	90 96       	adiw	r26, 0x20	; 32
     380:	8c 93       	st	X, r24
     382:	66 23       	and	r22, r22
     384:	94 f0       	brlt	.+36     	; 0x3aa <_ZN13Character_LCD8SendCharEh+0x102>
     386:	a2 89       	ldd	r26, Z+18	; 0x12
     388:	b0 e0       	ldi	r27, 0x00	; 0
     38a:	90 96       	adiw	r26, 0x20	; 32
     38c:	2c 91       	ld	r18, X
     38e:	90 97       	sbiw	r26, 0x20	; 32
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	04 88       	ldd	r0, Z+20	; 0x14
     396:	02 c0       	rjmp	.+4      	; 0x39c <_ZN13Character_LCD8SendCharEh+0xf4>
     398:	88 0f       	add	r24, r24
     39a:	99 1f       	adc	r25, r25
     39c:	0a 94       	dec	r0
     39e:	e2 f7       	brpl	.-8      	; 0x398 <_ZN13Character_LCD8SendCharEh+0xf0>
     3a0:	80 95       	com	r24
     3a2:	82 23       	and	r24, r18
     3a4:	90 96       	adiw	r26, 0x20	; 32
     3a6:	8c 93       	st	X, r24
     3a8:	10 c0       	rjmp	.+32     	; 0x3ca <_ZN13Character_LCD8SendCharEh+0x122>
     3aa:	a2 89       	ldd	r26, Z+18	; 0x12
     3ac:	b0 e0       	ldi	r27, 0x00	; 0
     3ae:	90 96       	adiw	r26, 0x20	; 32
     3b0:	2c 91       	ld	r18, X
     3b2:	90 97       	sbiw	r26, 0x20	; 32
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	04 88       	ldd	r0, Z+20	; 0x14
     3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <_ZN13Character_LCD8SendCharEh+0x118>
     3bc:	88 0f       	add	r24, r24
     3be:	99 1f       	adc	r25, r25
     3c0:	0a 94       	dec	r0
     3c2:	e2 f7       	brpl	.-8      	; 0x3bc <_ZN13Character_LCD8SendCharEh+0x114>
     3c4:	82 2b       	or	r24, r18
     3c6:	90 96       	adiw	r26, 0x20	; 32
     3c8:	8c 93       	st	X, r24
     3ca:	a0 81       	ld	r26, Z
     3cc:	b0 e0       	ldi	r27, 0x00	; 0
     3ce:	90 96       	adiw	r26, 0x20	; 32
     3d0:	4c 91       	ld	r20, X
     3d2:	90 97       	sbiw	r26, 0x20	; 32
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	9c 01       	movw	r18, r24
     3da:	02 80       	ldd	r0, Z+2	; 0x02
     3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <_ZN13Character_LCD8SendCharEh+0x13a>
     3de:	22 0f       	add	r18, r18
     3e0:	33 1f       	adc	r19, r19
     3e2:	0a 94       	dec	r0
     3e4:	e2 f7       	brpl	.-8      	; 0x3de <_ZN13Character_LCD8SendCharEh+0x136>
     3e6:	24 2b       	or	r18, r20
     3e8:	90 96       	adiw	r26, 0x20	; 32
     3ea:	2c 93       	st	X, r18
     3ec:	a6 81       	ldd	r26, Z+6	; 0x06
     3ee:	b0 e0       	ldi	r27, 0x00	; 0
     3f0:	90 96       	adiw	r26, 0x20	; 32
     3f2:	4c 91       	ld	r20, X
     3f4:	90 97       	sbiw	r26, 0x20	; 32
     3f6:	9c 01       	movw	r18, r24
     3f8:	00 84       	ldd	r0, Z+8	; 0x08
     3fa:	02 c0       	rjmp	.+4      	; 0x400 <__LOCK_REGION_LENGTH__>
     3fc:	22 0f       	add	r18, r18
     3fe:	33 1f       	adc	r19, r19
     400:	0a 94       	dec	r0
     402:	e2 f7       	brpl	.-8      	; 0x3fc <_ZN13Character_LCD8SendCharEh+0x154>
     404:	24 2b       	or	r18, r20
     406:	90 96       	adiw	r26, 0x20	; 32
     408:	2c 93       	st	X, r18
     40a:	af ec       	ldi	r26, 0xCF	; 207
     40c:	b7 e0       	ldi	r27, 0x07	; 7
     40e:	11 97       	sbiw	r26, 0x01	; 1
     410:	f1 f7       	brne	.-4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     412:	00 c0       	rjmp	.+0      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     414:	00 00       	nop
     416:	a6 81       	ldd	r26, Z+6	; 0x06
     418:	b0 e0       	ldi	r27, 0x00	; 0
     41a:	90 96       	adiw	r26, 0x20	; 32
     41c:	3c 91       	ld	r19, X
     41e:	90 97       	sbiw	r26, 0x20	; 32
     420:	ac 01       	movw	r20, r24
     422:	00 84       	ldd	r0, Z+8	; 0x08
     424:	02 c0       	rjmp	.+4      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     426:	44 0f       	add	r20, r20
     428:	55 1f       	adc	r21, r21
     42a:	0a 94       	dec	r0
     42c:	e2 f7       	brpl	.-8      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     42e:	24 2f       	mov	r18, r20
     430:	20 95       	com	r18
     432:	23 23       	and	r18, r19
     434:	90 96       	adiw	r26, 0x20	; 32
     436:	2c 93       	st	X, r18
     438:	a0 81       	ld	r26, Z
     43a:	b0 e0       	ldi	r27, 0x00	; 0
     43c:	90 96       	adiw	r26, 0x20	; 32
     43e:	2c 91       	ld	r18, X
     440:	90 97       	sbiw	r26, 0x20	; 32
     442:	02 80       	ldd	r0, Z+2	; 0x02
     444:	02 c0       	rjmp	.+4      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     446:	88 0f       	add	r24, r24
     448:	99 1f       	adc	r25, r25
     44a:	0a 94       	dec	r0
     44c:	e2 f7       	brpl	.-8      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     44e:	80 95       	com	r24
     450:	82 23       	and	r24, r18
     452:	90 96       	adiw	r26, 0x20	; 32
     454:	8c 93       	st	X, r24
     456:	8f ec       	ldi	r24, 0xCF	; 207
     458:	97 e0       	ldi	r25, 0x07	; 7
     45a:	01 97       	sbiw	r24, 0x01	; 1
     45c:	f1 f7       	brne	.-4      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     45e:	00 c0       	rjmp	.+0      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     460:	00 00       	nop
     462:	60 fd       	sbrc	r22, 0
     464:	12 c0       	rjmp	.+36     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     466:	a1 85       	ldd	r26, Z+9	; 0x09
     468:	b0 e0       	ldi	r27, 0x00	; 0
     46a:	90 96       	adiw	r26, 0x20	; 32
     46c:	2c 91       	ld	r18, X
     46e:	90 97       	sbiw	r26, 0x20	; 32
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	03 84       	ldd	r0, Z+11	; 0x0b
     476:	02 c0       	rjmp	.+4      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     478:	88 0f       	add	r24, r24
     47a:	99 1f       	adc	r25, r25
     47c:	0a 94       	dec	r0
     47e:	e2 f7       	brpl	.-8      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     480:	80 95       	com	r24
     482:	82 23       	and	r24, r18
     484:	90 96       	adiw	r26, 0x20	; 32
     486:	8c 93       	st	X, r24
     488:	10 c0       	rjmp	.+32     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
     48a:	a1 85       	ldd	r26, Z+9	; 0x09
     48c:	b0 e0       	ldi	r27, 0x00	; 0
     48e:	90 96       	adiw	r26, 0x20	; 32
     490:	2c 91       	ld	r18, X
     492:	90 97       	sbiw	r26, 0x20	; 32
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	03 84       	ldd	r0, Z+11	; 0x0b
     49a:	02 c0       	rjmp	.+4      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     49c:	88 0f       	add	r24, r24
     49e:	99 1f       	adc	r25, r25
     4a0:	0a 94       	dec	r0
     4a2:	e2 f7       	brpl	.-8      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     4a4:	82 2b       	or	r24, r18
     4a6:	90 96       	adiw	r26, 0x20	; 32
     4a8:	8c 93       	st	X, r24
     4aa:	61 fd       	sbrc	r22, 1
     4ac:	12 c0       	rjmp	.+36     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
     4ae:	a4 85       	ldd	r26, Z+12	; 0x0c
     4b0:	b0 e0       	ldi	r27, 0x00	; 0
     4b2:	90 96       	adiw	r26, 0x20	; 32
     4b4:	2c 91       	ld	r18, X
     4b6:	90 97       	sbiw	r26, 0x20	; 32
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	06 84       	ldd	r0, Z+14	; 0x0e
     4be:	02 c0       	rjmp	.+4      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
     4c0:	88 0f       	add	r24, r24
     4c2:	99 1f       	adc	r25, r25
     4c4:	0a 94       	dec	r0
     4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     4c8:	80 95       	com	r24
     4ca:	82 23       	and	r24, r18
     4cc:	90 96       	adiw	r26, 0x20	; 32
     4ce:	8c 93       	st	X, r24
     4d0:	10 c0       	rjmp	.+32     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
     4d2:	a4 85       	ldd	r26, Z+12	; 0x0c
     4d4:	b0 e0       	ldi	r27, 0x00	; 0
     4d6:	90 96       	adiw	r26, 0x20	; 32
     4d8:	2c 91       	ld	r18, X
     4da:	90 97       	sbiw	r26, 0x20	; 32
     4dc:	81 e0       	ldi	r24, 0x01	; 1
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	06 84       	ldd	r0, Z+14	; 0x0e
     4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
     4e4:	88 0f       	add	r24, r24
     4e6:	99 1f       	adc	r25, r25
     4e8:	0a 94       	dec	r0
     4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
     4ec:	82 2b       	or	r24, r18
     4ee:	90 96       	adiw	r26, 0x20	; 32
     4f0:	8c 93       	st	X, r24
     4f2:	62 fd       	sbrc	r22, 2
     4f4:	12 c0       	rjmp	.+36     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
     4f6:	a7 85       	ldd	r26, Z+15	; 0x0f
     4f8:	b0 e0       	ldi	r27, 0x00	; 0
     4fa:	90 96       	adiw	r26, 0x20	; 32
     4fc:	2c 91       	ld	r18, X
     4fe:	90 97       	sbiw	r26, 0x20	; 32
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	01 88       	ldd	r0, Z+17	; 0x11
     506:	02 c0       	rjmp	.+4      	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     508:	88 0f       	add	r24, r24
     50a:	99 1f       	adc	r25, r25
     50c:	0a 94       	dec	r0
     50e:	e2 f7       	brpl	.-8      	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     510:	80 95       	com	r24
     512:	82 23       	and	r24, r18
     514:	90 96       	adiw	r26, 0x20	; 32
     516:	8c 93       	st	X, r24
     518:	10 c0       	rjmp	.+32     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
     51a:	a7 85       	ldd	r26, Z+15	; 0x0f
     51c:	b0 e0       	ldi	r27, 0x00	; 0
     51e:	90 96       	adiw	r26, 0x20	; 32
     520:	2c 91       	ld	r18, X
     522:	90 97       	sbiw	r26, 0x20	; 32
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	01 88       	ldd	r0, Z+17	; 0x11
     52a:	02 c0       	rjmp	.+4      	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
     52c:	88 0f       	add	r24, r24
     52e:	99 1f       	adc	r25, r25
     530:	0a 94       	dec	r0
     532:	e2 f7       	brpl	.-8      	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     534:	82 2b       	or	r24, r18
     536:	90 96       	adiw	r26, 0x20	; 32
     538:	8c 93       	st	X, r24
     53a:	63 fd       	sbrc	r22, 3
     53c:	12 c0       	rjmp	.+36     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
     53e:	a2 89       	ldd	r26, Z+18	; 0x12
     540:	b0 e0       	ldi	r27, 0x00	; 0
     542:	90 96       	adiw	r26, 0x20	; 32
     544:	2c 91       	ld	r18, X
     546:	90 97       	sbiw	r26, 0x20	; 32
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	04 88       	ldd	r0, Z+20	; 0x14
     54e:	02 c0       	rjmp	.+4      	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
     550:	88 0f       	add	r24, r24
     552:	99 1f       	adc	r25, r25
     554:	0a 94       	dec	r0
     556:	e2 f7       	brpl	.-8      	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
     558:	80 95       	com	r24
     55a:	82 23       	and	r24, r18
     55c:	90 96       	adiw	r26, 0x20	; 32
     55e:	8c 93       	st	X, r24
     560:	10 c0       	rjmp	.+32     	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
     562:	a2 89       	ldd	r26, Z+18	; 0x12
     564:	b0 e0       	ldi	r27, 0x00	; 0
     566:	90 96       	adiw	r26, 0x20	; 32
     568:	2c 91       	ld	r18, X
     56a:	90 97       	sbiw	r26, 0x20	; 32
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	04 88       	ldd	r0, Z+20	; 0x14
     572:	02 c0       	rjmp	.+4      	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
     574:	88 0f       	add	r24, r24
     576:	99 1f       	adc	r25, r25
     578:	0a 94       	dec	r0
     57a:	e2 f7       	brpl	.-8      	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
     57c:	82 2b       	or	r24, r18
     57e:	90 96       	adiw	r26, 0x20	; 32
     580:	8c 93       	st	X, r24
     582:	a0 81       	ld	r26, Z
     584:	b0 e0       	ldi	r27, 0x00	; 0
     586:	90 96       	adiw	r26, 0x20	; 32
     588:	4c 91       	ld	r20, X
     58a:	90 97       	sbiw	r26, 0x20	; 32
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	9c 01       	movw	r18, r24
     592:	02 80       	ldd	r0, Z+2	; 0x02
     594:	02 c0       	rjmp	.+4      	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
     596:	22 0f       	add	r18, r18
     598:	33 1f       	adc	r19, r19
     59a:	0a 94       	dec	r0
     59c:	e2 f7       	brpl	.-8      	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
     59e:	24 2b       	or	r18, r20
     5a0:	90 96       	adiw	r26, 0x20	; 32
     5a2:	2c 93       	st	X, r18
     5a4:	a6 81       	ldd	r26, Z+6	; 0x06
     5a6:	b0 e0       	ldi	r27, 0x00	; 0
     5a8:	90 96       	adiw	r26, 0x20	; 32
     5aa:	4c 91       	ld	r20, X
     5ac:	90 97       	sbiw	r26, 0x20	; 32
     5ae:	9c 01       	movw	r18, r24
     5b0:	00 84       	ldd	r0, Z+8	; 0x08
     5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
     5b4:	22 0f       	add	r18, r18
     5b6:	33 1f       	adc	r19, r19
     5b8:	0a 94       	dec	r0
     5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
     5bc:	24 2b       	or	r18, r20
     5be:	90 96       	adiw	r26, 0x20	; 32
     5c0:	2c 93       	st	X, r18
     5c2:	af ec       	ldi	r26, 0xCF	; 207
     5c4:	b7 e0       	ldi	r27, 0x07	; 7
     5c6:	11 97       	sbiw	r26, 0x01	; 1
     5c8:	f1 f7       	brne	.-4      	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
     5ca:	00 c0       	rjmp	.+0      	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
     5cc:	00 00       	nop
     5ce:	a6 81       	ldd	r26, Z+6	; 0x06
     5d0:	b0 e0       	ldi	r27, 0x00	; 0
     5d2:	90 96       	adiw	r26, 0x20	; 32
     5d4:	3c 91       	ld	r19, X
     5d6:	90 97       	sbiw	r26, 0x20	; 32
     5d8:	ac 01       	movw	r20, r24
     5da:	00 84       	ldd	r0, Z+8	; 0x08
     5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
     5de:	44 0f       	add	r20, r20
     5e0:	55 1f       	adc	r21, r21
     5e2:	0a 94       	dec	r0
     5e4:	e2 f7       	brpl	.-8      	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
     5e6:	24 2f       	mov	r18, r20
     5e8:	20 95       	com	r18
     5ea:	23 23       	and	r18, r19
     5ec:	90 96       	adiw	r26, 0x20	; 32
     5ee:	2c 93       	st	X, r18
     5f0:	a0 81       	ld	r26, Z
     5f2:	b0 e0       	ldi	r27, 0x00	; 0
     5f4:	90 96       	adiw	r26, 0x20	; 32
     5f6:	2c 91       	ld	r18, X
     5f8:	90 97       	sbiw	r26, 0x20	; 32
     5fa:	02 80       	ldd	r0, Z+2	; 0x02
     5fc:	02 c0       	rjmp	.+4      	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
     5fe:	88 0f       	add	r24, r24
     600:	99 1f       	adc	r25, r25
     602:	0a 94       	dec	r0
     604:	e2 f7       	brpl	.-8      	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
     606:	80 95       	com	r24
     608:	82 23       	and	r24, r18
     60a:	90 96       	adiw	r26, 0x20	; 32
     60c:	8c 93       	st	X, r24
     60e:	8f ec       	ldi	r24, 0xCF	; 207
     610:	97 e0       	ldi	r25, 0x07	; 7
     612:	01 97       	sbiw	r24, 0x01	; 1
     614:	f1 f7       	brne	.-4      	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
     616:	00 c0       	rjmp	.+0      	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
     618:	00 00       	nop
     61a:	08 95       	ret

0000061c <_ZN13Character_LCD10SendStringEPc>:
     61c:	0f 93       	push	r16
     61e:	1f 93       	push	r17
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
     624:	eb 01       	movw	r28, r22
     626:	68 81       	ld	r22, Y
     628:	66 23       	and	r22, r22
     62a:	41 f0       	breq	.+16     	; 0x63c <_ZN13Character_LCD10SendStringEPc+0x20>
     62c:	8c 01       	movw	r16, r24
     62e:	21 96       	adiw	r28, 0x01	; 1
     630:	c8 01       	movw	r24, r16
     632:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_ZN13Character_LCD8SendCharEh>
     636:	69 91       	ld	r22, Y+
     638:	61 11       	cpse	r22, r1
     63a:	fa cf       	rjmp	.-12     	; 0x630 <_ZN13Character_LCD10SendStringEPc+0x14>
     63c:	df 91       	pop	r29
     63e:	cf 91       	pop	r28
     640:	1f 91       	pop	r17
     642:	0f 91       	pop	r16
     644:	08 95       	ret

00000646 <_ZN13Character_LCD11SendCommandEh>:
     646:	fc 01       	movw	r30, r24
     648:	64 fd       	sbrc	r22, 4
     64a:	12 c0       	rjmp	.+36     	; 0x670 <_ZN13Character_LCD11SendCommandEh+0x2a>
     64c:	a1 85       	ldd	r26, Z+9	; 0x09
     64e:	b0 e0       	ldi	r27, 0x00	; 0
     650:	90 96       	adiw	r26, 0x20	; 32
     652:	2c 91       	ld	r18, X
     654:	90 97       	sbiw	r26, 0x20	; 32
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	03 84       	ldd	r0, Z+11	; 0x0b
     65c:	02 c0       	rjmp	.+4      	; 0x662 <_ZN13Character_LCD11SendCommandEh+0x1c>
     65e:	88 0f       	add	r24, r24
     660:	99 1f       	adc	r25, r25
     662:	0a 94       	dec	r0
     664:	e2 f7       	brpl	.-8      	; 0x65e <_ZN13Character_LCD11SendCommandEh+0x18>
     666:	80 95       	com	r24
     668:	82 23       	and	r24, r18
     66a:	90 96       	adiw	r26, 0x20	; 32
     66c:	8c 93       	st	X, r24
     66e:	10 c0       	rjmp	.+32     	; 0x690 <_ZN13Character_LCD11SendCommandEh+0x4a>
     670:	a1 85       	ldd	r26, Z+9	; 0x09
     672:	b0 e0       	ldi	r27, 0x00	; 0
     674:	90 96       	adiw	r26, 0x20	; 32
     676:	2c 91       	ld	r18, X
     678:	90 97       	sbiw	r26, 0x20	; 32
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	03 84       	ldd	r0, Z+11	; 0x0b
     680:	02 c0       	rjmp	.+4      	; 0x686 <_ZN13Character_LCD11SendCommandEh+0x40>
     682:	88 0f       	add	r24, r24
     684:	99 1f       	adc	r25, r25
     686:	0a 94       	dec	r0
     688:	e2 f7       	brpl	.-8      	; 0x682 <_ZN13Character_LCD11SendCommandEh+0x3c>
     68a:	82 2b       	or	r24, r18
     68c:	90 96       	adiw	r26, 0x20	; 32
     68e:	8c 93       	st	X, r24
     690:	65 fd       	sbrc	r22, 5
     692:	12 c0       	rjmp	.+36     	; 0x6b8 <_ZN13Character_LCD11SendCommandEh+0x72>
     694:	a4 85       	ldd	r26, Z+12	; 0x0c
     696:	b0 e0       	ldi	r27, 0x00	; 0
     698:	90 96       	adiw	r26, 0x20	; 32
     69a:	2c 91       	ld	r18, X
     69c:	90 97       	sbiw	r26, 0x20	; 32
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	06 84       	ldd	r0, Z+14	; 0x0e
     6a4:	02 c0       	rjmp	.+4      	; 0x6aa <_ZN13Character_LCD11SendCommandEh+0x64>
     6a6:	88 0f       	add	r24, r24
     6a8:	99 1f       	adc	r25, r25
     6aa:	0a 94       	dec	r0
     6ac:	e2 f7       	brpl	.-8      	; 0x6a6 <_ZN13Character_LCD11SendCommandEh+0x60>
     6ae:	80 95       	com	r24
     6b0:	82 23       	and	r24, r18
     6b2:	90 96       	adiw	r26, 0x20	; 32
     6b4:	8c 93       	st	X, r24
     6b6:	10 c0       	rjmp	.+32     	; 0x6d8 <_ZN13Character_LCD11SendCommandEh+0x92>
     6b8:	a4 85       	ldd	r26, Z+12	; 0x0c
     6ba:	b0 e0       	ldi	r27, 0x00	; 0
     6bc:	90 96       	adiw	r26, 0x20	; 32
     6be:	2c 91       	ld	r18, X
     6c0:	90 97       	sbiw	r26, 0x20	; 32
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	06 84       	ldd	r0, Z+14	; 0x0e
     6c8:	02 c0       	rjmp	.+4      	; 0x6ce <_ZN13Character_LCD11SendCommandEh+0x88>
     6ca:	88 0f       	add	r24, r24
     6cc:	99 1f       	adc	r25, r25
     6ce:	0a 94       	dec	r0
     6d0:	e2 f7       	brpl	.-8      	; 0x6ca <_ZN13Character_LCD11SendCommandEh+0x84>
     6d2:	82 2b       	or	r24, r18
     6d4:	90 96       	adiw	r26, 0x20	; 32
     6d6:	8c 93       	st	X, r24
     6d8:	66 fd       	sbrc	r22, 6
     6da:	12 c0       	rjmp	.+36     	; 0x700 <_ZN13Character_LCD11SendCommandEh+0xba>
     6dc:	a7 85       	ldd	r26, Z+15	; 0x0f
     6de:	b0 e0       	ldi	r27, 0x00	; 0
     6e0:	90 96       	adiw	r26, 0x20	; 32
     6e2:	2c 91       	ld	r18, X
     6e4:	90 97       	sbiw	r26, 0x20	; 32
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	01 88       	ldd	r0, Z+17	; 0x11
     6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <_ZN13Character_LCD11SendCommandEh+0xac>
     6ee:	88 0f       	add	r24, r24
     6f0:	99 1f       	adc	r25, r25
     6f2:	0a 94       	dec	r0
     6f4:	e2 f7       	brpl	.-8      	; 0x6ee <_ZN13Character_LCD11SendCommandEh+0xa8>
     6f6:	80 95       	com	r24
     6f8:	82 23       	and	r24, r18
     6fa:	90 96       	adiw	r26, 0x20	; 32
     6fc:	8c 93       	st	X, r24
     6fe:	10 c0       	rjmp	.+32     	; 0x720 <_ZN13Character_LCD11SendCommandEh+0xda>
     700:	a7 85       	ldd	r26, Z+15	; 0x0f
     702:	b0 e0       	ldi	r27, 0x00	; 0
     704:	90 96       	adiw	r26, 0x20	; 32
     706:	2c 91       	ld	r18, X
     708:	90 97       	sbiw	r26, 0x20	; 32
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	01 88       	ldd	r0, Z+17	; 0x11
     710:	02 c0       	rjmp	.+4      	; 0x716 <_ZN13Character_LCD11SendCommandEh+0xd0>
     712:	88 0f       	add	r24, r24
     714:	99 1f       	adc	r25, r25
     716:	0a 94       	dec	r0
     718:	e2 f7       	brpl	.-8      	; 0x712 <_ZN13Character_LCD11SendCommandEh+0xcc>
     71a:	82 2b       	or	r24, r18
     71c:	90 96       	adiw	r26, 0x20	; 32
     71e:	8c 93       	st	X, r24
     720:	66 23       	and	r22, r22
     722:	94 f0       	brlt	.+36     	; 0x748 <_ZN13Character_LCD11SendCommandEh+0x102>
     724:	a2 89       	ldd	r26, Z+18	; 0x12
     726:	b0 e0       	ldi	r27, 0x00	; 0
     728:	90 96       	adiw	r26, 0x20	; 32
     72a:	2c 91       	ld	r18, X
     72c:	90 97       	sbiw	r26, 0x20	; 32
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	04 88       	ldd	r0, Z+20	; 0x14
     734:	02 c0       	rjmp	.+4      	; 0x73a <_ZN13Character_LCD11SendCommandEh+0xf4>
     736:	88 0f       	add	r24, r24
     738:	99 1f       	adc	r25, r25
     73a:	0a 94       	dec	r0
     73c:	e2 f7       	brpl	.-8      	; 0x736 <_ZN13Character_LCD11SendCommandEh+0xf0>
     73e:	80 95       	com	r24
     740:	82 23       	and	r24, r18
     742:	90 96       	adiw	r26, 0x20	; 32
     744:	8c 93       	st	X, r24
     746:	10 c0       	rjmp	.+32     	; 0x768 <_ZN13Character_LCD11SendCommandEh+0x122>
     748:	a2 89       	ldd	r26, Z+18	; 0x12
     74a:	b0 e0       	ldi	r27, 0x00	; 0
     74c:	90 96       	adiw	r26, 0x20	; 32
     74e:	2c 91       	ld	r18, X
     750:	90 97       	sbiw	r26, 0x20	; 32
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	04 88       	ldd	r0, Z+20	; 0x14
     758:	02 c0       	rjmp	.+4      	; 0x75e <_ZN13Character_LCD11SendCommandEh+0x118>
     75a:	88 0f       	add	r24, r24
     75c:	99 1f       	adc	r25, r25
     75e:	0a 94       	dec	r0
     760:	e2 f7       	brpl	.-8      	; 0x75a <_ZN13Character_LCD11SendCommandEh+0x114>
     762:	82 2b       	or	r24, r18
     764:	90 96       	adiw	r26, 0x20	; 32
     766:	8c 93       	st	X, r24
     768:	a6 81       	ldd	r26, Z+6	; 0x06
     76a:	b0 e0       	ldi	r27, 0x00	; 0
     76c:	90 96       	adiw	r26, 0x20	; 32
     76e:	4c 91       	ld	r20, X
     770:	90 97       	sbiw	r26, 0x20	; 32
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	9c 01       	movw	r18, r24
     778:	00 84       	ldd	r0, Z+8	; 0x08
     77a:	02 c0       	rjmp	.+4      	; 0x780 <_ZN13Character_LCD11SendCommandEh+0x13a>
     77c:	22 0f       	add	r18, r18
     77e:	33 1f       	adc	r19, r19
     780:	0a 94       	dec	r0
     782:	e2 f7       	brpl	.-8      	; 0x77c <_ZN13Character_LCD11SendCommandEh+0x136>
     784:	24 2b       	or	r18, r20
     786:	90 96       	adiw	r26, 0x20	; 32
     788:	2c 93       	st	X, r18
     78a:	af ec       	ldi	r26, 0xCF	; 207
     78c:	b7 e0       	ldi	r27, 0x07	; 7
     78e:	11 97       	sbiw	r26, 0x01	; 1
     790:	f1 f7       	brne	.-4      	; 0x78e <_ZN13Character_LCD11SendCommandEh+0x148>
     792:	00 c0       	rjmp	.+0      	; 0x794 <_ZN13Character_LCD11SendCommandEh+0x14e>
     794:	00 00       	nop
     796:	a6 81       	ldd	r26, Z+6	; 0x06
     798:	b0 e0       	ldi	r27, 0x00	; 0
     79a:	90 96       	adiw	r26, 0x20	; 32
     79c:	2c 91       	ld	r18, X
     79e:	90 97       	sbiw	r26, 0x20	; 32
     7a0:	00 84       	ldd	r0, Z+8	; 0x08
     7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <_ZN13Character_LCD11SendCommandEh+0x162>
     7a4:	88 0f       	add	r24, r24
     7a6:	99 1f       	adc	r25, r25
     7a8:	0a 94       	dec	r0
     7aa:	e2 f7       	brpl	.-8      	; 0x7a4 <_ZN13Character_LCD11SendCommandEh+0x15e>
     7ac:	80 95       	com	r24
     7ae:	82 23       	and	r24, r18
     7b0:	90 96       	adiw	r26, 0x20	; 32
     7b2:	8c 93       	st	X, r24
     7b4:	8f ec       	ldi	r24, 0xCF	; 207
     7b6:	97 e0       	ldi	r25, 0x07	; 7
     7b8:	01 97       	sbiw	r24, 0x01	; 1
     7ba:	f1 f7       	brne	.-4      	; 0x7b8 <_ZN13Character_LCD11SendCommandEh+0x172>
     7bc:	00 c0       	rjmp	.+0      	; 0x7be <_ZN13Character_LCD11SendCommandEh+0x178>
     7be:	00 00       	nop
     7c0:	60 fd       	sbrc	r22, 0
     7c2:	12 c0       	rjmp	.+36     	; 0x7e8 <_ZN13Character_LCD11SendCommandEh+0x1a2>
     7c4:	a1 85       	ldd	r26, Z+9	; 0x09
     7c6:	b0 e0       	ldi	r27, 0x00	; 0
     7c8:	90 96       	adiw	r26, 0x20	; 32
     7ca:	2c 91       	ld	r18, X
     7cc:	90 97       	sbiw	r26, 0x20	; 32
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	03 84       	ldd	r0, Z+11	; 0x0b
     7d4:	02 c0       	rjmp	.+4      	; 0x7da <_ZN13Character_LCD11SendCommandEh+0x194>
     7d6:	88 0f       	add	r24, r24
     7d8:	99 1f       	adc	r25, r25
     7da:	0a 94       	dec	r0
     7dc:	e2 f7       	brpl	.-8      	; 0x7d6 <_ZN13Character_LCD11SendCommandEh+0x190>
     7de:	80 95       	com	r24
     7e0:	82 23       	and	r24, r18
     7e2:	90 96       	adiw	r26, 0x20	; 32
     7e4:	8c 93       	st	X, r24
     7e6:	10 c0       	rjmp	.+32     	; 0x808 <_ZN13Character_LCD11SendCommandEh+0x1c2>
     7e8:	a1 85       	ldd	r26, Z+9	; 0x09
     7ea:	b0 e0       	ldi	r27, 0x00	; 0
     7ec:	90 96       	adiw	r26, 0x20	; 32
     7ee:	2c 91       	ld	r18, X
     7f0:	90 97       	sbiw	r26, 0x20	; 32
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	03 84       	ldd	r0, Z+11	; 0x0b
     7f8:	02 c0       	rjmp	.+4      	; 0x7fe <_ZN13Character_LCD11SendCommandEh+0x1b8>
     7fa:	88 0f       	add	r24, r24
     7fc:	99 1f       	adc	r25, r25
     7fe:	0a 94       	dec	r0
     800:	e2 f7       	brpl	.-8      	; 0x7fa <_ZN13Character_LCD11SendCommandEh+0x1b4>
     802:	82 2b       	or	r24, r18
     804:	90 96       	adiw	r26, 0x20	; 32
     806:	8c 93       	st	X, r24
     808:	61 fd       	sbrc	r22, 1
     80a:	12 c0       	rjmp	.+36     	; 0x830 <_ZN13Character_LCD11SendCommandEh+0x1ea>
     80c:	a4 85       	ldd	r26, Z+12	; 0x0c
     80e:	b0 e0       	ldi	r27, 0x00	; 0
     810:	90 96       	adiw	r26, 0x20	; 32
     812:	2c 91       	ld	r18, X
     814:	90 97       	sbiw	r26, 0x20	; 32
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	06 84       	ldd	r0, Z+14	; 0x0e
     81c:	02 c0       	rjmp	.+4      	; 0x822 <_ZN13Character_LCD11SendCommandEh+0x1dc>
     81e:	88 0f       	add	r24, r24
     820:	99 1f       	adc	r25, r25
     822:	0a 94       	dec	r0
     824:	e2 f7       	brpl	.-8      	; 0x81e <_ZN13Character_LCD11SendCommandEh+0x1d8>
     826:	80 95       	com	r24
     828:	82 23       	and	r24, r18
     82a:	90 96       	adiw	r26, 0x20	; 32
     82c:	8c 93       	st	X, r24
     82e:	10 c0       	rjmp	.+32     	; 0x850 <_ZN13Character_LCD11SendCommandEh+0x20a>
     830:	a4 85       	ldd	r26, Z+12	; 0x0c
     832:	b0 e0       	ldi	r27, 0x00	; 0
     834:	90 96       	adiw	r26, 0x20	; 32
     836:	2c 91       	ld	r18, X
     838:	90 97       	sbiw	r26, 0x20	; 32
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	06 84       	ldd	r0, Z+14	; 0x0e
     840:	02 c0       	rjmp	.+4      	; 0x846 <_ZN13Character_LCD11SendCommandEh+0x200>
     842:	88 0f       	add	r24, r24
     844:	99 1f       	adc	r25, r25
     846:	0a 94       	dec	r0
     848:	e2 f7       	brpl	.-8      	; 0x842 <_ZN13Character_LCD11SendCommandEh+0x1fc>
     84a:	82 2b       	or	r24, r18
     84c:	90 96       	adiw	r26, 0x20	; 32
     84e:	8c 93       	st	X, r24
     850:	62 fd       	sbrc	r22, 2
     852:	12 c0       	rjmp	.+36     	; 0x878 <__stack+0x19>
     854:	a7 85       	ldd	r26, Z+15	; 0x0f
     856:	b0 e0       	ldi	r27, 0x00	; 0
     858:	90 96       	adiw	r26, 0x20	; 32
     85a:	2c 91       	ld	r18, X
     85c:	90 97       	sbiw	r26, 0x20	; 32
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	01 88       	ldd	r0, Z+17	; 0x11
     864:	02 c0       	rjmp	.+4      	; 0x86a <__stack+0xb>
     866:	88 0f       	add	r24, r24
     868:	99 1f       	adc	r25, r25
     86a:	0a 94       	dec	r0
     86c:	e2 f7       	brpl	.-8      	; 0x866 <__stack+0x7>
     86e:	80 95       	com	r24
     870:	82 23       	and	r24, r18
     872:	90 96       	adiw	r26, 0x20	; 32
     874:	8c 93       	st	X, r24
     876:	10 c0       	rjmp	.+32     	; 0x898 <__stack+0x39>
     878:	a7 85       	ldd	r26, Z+15	; 0x0f
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	90 96       	adiw	r26, 0x20	; 32
     87e:	2c 91       	ld	r18, X
     880:	90 97       	sbiw	r26, 0x20	; 32
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	01 88       	ldd	r0, Z+17	; 0x11
     888:	02 c0       	rjmp	.+4      	; 0x88e <__stack+0x2f>
     88a:	88 0f       	add	r24, r24
     88c:	99 1f       	adc	r25, r25
     88e:	0a 94       	dec	r0
     890:	e2 f7       	brpl	.-8      	; 0x88a <__stack+0x2b>
     892:	82 2b       	or	r24, r18
     894:	90 96       	adiw	r26, 0x20	; 32
     896:	8c 93       	st	X, r24
     898:	63 fd       	sbrc	r22, 3
     89a:	12 c0       	rjmp	.+36     	; 0x8c0 <__stack+0x61>
     89c:	a2 89       	ldd	r26, Z+18	; 0x12
     89e:	b0 e0       	ldi	r27, 0x00	; 0
     8a0:	90 96       	adiw	r26, 0x20	; 32
     8a2:	2c 91       	ld	r18, X
     8a4:	90 97       	sbiw	r26, 0x20	; 32
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	04 88       	ldd	r0, Z+20	; 0x14
     8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <__stack+0x53>
     8ae:	88 0f       	add	r24, r24
     8b0:	99 1f       	adc	r25, r25
     8b2:	0a 94       	dec	r0
     8b4:	e2 f7       	brpl	.-8      	; 0x8ae <__stack+0x4f>
     8b6:	80 95       	com	r24
     8b8:	82 23       	and	r24, r18
     8ba:	90 96       	adiw	r26, 0x20	; 32
     8bc:	8c 93       	st	X, r24
     8be:	10 c0       	rjmp	.+32     	; 0x8e0 <__stack+0x81>
     8c0:	a2 89       	ldd	r26, Z+18	; 0x12
     8c2:	b0 e0       	ldi	r27, 0x00	; 0
     8c4:	90 96       	adiw	r26, 0x20	; 32
     8c6:	2c 91       	ld	r18, X
     8c8:	90 97       	sbiw	r26, 0x20	; 32
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	04 88       	ldd	r0, Z+20	; 0x14
     8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <__stack+0x77>
     8d2:	88 0f       	add	r24, r24
     8d4:	99 1f       	adc	r25, r25
     8d6:	0a 94       	dec	r0
     8d8:	e2 f7       	brpl	.-8      	; 0x8d2 <__stack+0x73>
     8da:	82 2b       	or	r24, r18
     8dc:	90 96       	adiw	r26, 0x20	; 32
     8de:	8c 93       	st	X, r24
     8e0:	a6 81       	ldd	r26, Z+6	; 0x06
     8e2:	b0 e0       	ldi	r27, 0x00	; 0
     8e4:	90 96       	adiw	r26, 0x20	; 32
     8e6:	4c 91       	ld	r20, X
     8e8:	90 97       	sbiw	r26, 0x20	; 32
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	9c 01       	movw	r18, r24
     8f0:	00 84       	ldd	r0, Z+8	; 0x08
     8f2:	02 c0       	rjmp	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	22 0f       	add	r18, r18
     8f6:	33 1f       	adc	r19, r19
     8f8:	0a 94       	dec	r0
     8fa:	e2 f7       	brpl	.-8      	; 0x8f4 <__stack+0x95>
     8fc:	24 2b       	or	r18, r20
     8fe:	90 96       	adiw	r26, 0x20	; 32
     900:	2c 93       	st	X, r18
     902:	af ec       	ldi	r26, 0xCF	; 207
     904:	b7 e0       	ldi	r27, 0x07	; 7
     906:	11 97       	sbiw	r26, 0x01	; 1
     908:	f1 f7       	brne	.-4      	; 0x906 <__stack+0xa7>
     90a:	00 c0       	rjmp	.+0      	; 0x90c <__stack+0xad>
     90c:	00 00       	nop
     90e:	a6 81       	ldd	r26, Z+6	; 0x06
     910:	b0 e0       	ldi	r27, 0x00	; 0
     912:	90 96       	adiw	r26, 0x20	; 32
     914:	2c 91       	ld	r18, X
     916:	90 97       	sbiw	r26, 0x20	; 32
     918:	00 84       	ldd	r0, Z+8	; 0x08
     91a:	02 c0       	rjmp	.+4      	; 0x920 <__stack+0xc1>
     91c:	88 0f       	add	r24, r24
     91e:	99 1f       	adc	r25, r25
     920:	0a 94       	dec	r0
     922:	e2 f7       	brpl	.-8      	; 0x91c <__stack+0xbd>
     924:	80 95       	com	r24
     926:	82 23       	and	r24, r18
     928:	90 96       	adiw	r26, 0x20	; 32
     92a:	8c 93       	st	X, r24
     92c:	8f ec       	ldi	r24, 0xCF	; 207
     92e:	97 e0       	ldi	r25, 0x07	; 7
     930:	01 97       	sbiw	r24, 0x01	; 1
     932:	f1 f7       	brne	.-4      	; 0x930 <__stack+0xd1>
     934:	00 c0       	rjmp	.+0      	; 0x936 <__stack+0xd7>
     936:	00 00       	nop
     938:	08 95       	ret

0000093a <_ZN13Character_LCD3ClrEv>:
     93a:	61 e0       	ldi	r22, 0x01	; 1
     93c:	0e 94 23 03 	call	0x646	; 0x646 <_ZN13Character_LCD11SendCommandEh>
     940:	8f ec       	ldi	r24, 0xCF	; 207
     942:	97 e0       	ldi	r25, 0x07	; 7
     944:	01 97       	sbiw	r24, 0x01	; 1
     946:	f1 f7       	brne	.-4      	; 0x944 <_ZN13Character_LCD3ClrEv+0xa>
     948:	00 c0       	rjmp	.+0      	; 0x94a <_ZN13Character_LCD3ClrEv+0x10>
     94a:	00 00       	nop
     94c:	08 95       	ret

0000094e <_ZN13Character_LCD6GotoXYEhh>:
     94e:	42 30       	cpi	r20, 0x02	; 2
     950:	31 f0       	breq	.+12     	; 0x95e <_ZN13Character_LCD6GotoXYEhh+0x10>
     952:	43 30       	cpi	r20, 0x03	; 3
     954:	31 f0       	breq	.+12     	; 0x962 <_ZN13Character_LCD6GotoXYEhh+0x14>
     956:	41 30       	cpi	r20, 0x01	; 1
     958:	29 f4       	brne	.+10     	; 0x964 <_ZN13Character_LCD6GotoXYEhh+0x16>
     95a:	60 5c       	subi	r22, 0xC0	; 192
     95c:	03 c0       	rjmp	.+6      	; 0x964 <_ZN13Character_LCD6GotoXYEhh+0x16>
     95e:	6c 5e       	subi	r22, 0xEC	; 236
     960:	01 c0       	rjmp	.+2      	; 0x964 <_ZN13Character_LCD6GotoXYEhh+0x16>
     962:	6c 5a       	subi	r22, 0xAC	; 172
     964:	60 68       	ori	r22, 0x80	; 128
     966:	0e 94 23 03 	call	0x646	; 0x646 <_ZN13Character_LCD11SendCommandEh>
     96a:	8f ec       	ldi	r24, 0xCF	; 207
     96c:	97 e0       	ldi	r25, 0x07	; 7
     96e:	01 97       	sbiw	r24, 0x01	; 1
     970:	f1 f7       	brne	.-4      	; 0x96e <_ZN13Character_LCD6GotoXYEhh+0x20>
     972:	00 c0       	rjmp	.+0      	; 0x974 <_ZN13Character_LCD6GotoXYEhh+0x26>
     974:	00 00       	nop
     976:	08 95       	ret

00000978 <_ZN13Character_LCD4InitEhh>:
     978:	cf 93       	push	r28
     97a:	df 93       	push	r29
     97c:	ec 01       	movw	r28, r24
     97e:	8f e2       	ldi	r24, 0x2F	; 47
     980:	95 e7       	ldi	r25, 0x75	; 117
     982:	01 97       	sbiw	r24, 0x01	; 1
     984:	f1 f7       	brne	.-4      	; 0x982 <_ZN13Character_LCD4InitEhh+0xa>
     986:	00 c0       	rjmp	.+0      	; 0x988 <_ZN13Character_LCD4InitEhh+0x10>
     988:	00 00       	nop
     98a:	e9 85       	ldd	r30, Y+9	; 0x09
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	30 a1       	ldd	r19, Z+32	; 0x20
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	ac 01       	movw	r20, r24
     996:	0b 84       	ldd	r0, Y+11	; 0x0b
     998:	02 c0       	rjmp	.+4      	; 0x99e <_ZN13Character_LCD4InitEhh+0x26>
     99a:	44 0f       	add	r20, r20
     99c:	55 1f       	adc	r21, r21
     99e:	0a 94       	dec	r0
     9a0:	e2 f7       	brpl	.-8      	; 0x99a <_ZN13Character_LCD4InitEhh+0x22>
     9a2:	24 2f       	mov	r18, r20
     9a4:	20 95       	com	r18
     9a6:	23 23       	and	r18, r19
     9a8:	20 a3       	std	Z+32, r18	; 0x20
     9aa:	ec 85       	ldd	r30, Y+12	; 0x0c
     9ac:	f0 e0       	ldi	r31, 0x00	; 0
     9ae:	30 a1       	ldd	r19, Z+32	; 0x20
     9b0:	ac 01       	movw	r20, r24
     9b2:	0e 84       	ldd	r0, Y+14	; 0x0e
     9b4:	02 c0       	rjmp	.+4      	; 0x9ba <_ZN13Character_LCD4InitEhh+0x42>
     9b6:	44 0f       	add	r20, r20
     9b8:	55 1f       	adc	r21, r21
     9ba:	0a 94       	dec	r0
     9bc:	e2 f7       	brpl	.-8      	; 0x9b6 <_ZN13Character_LCD4InitEhh+0x3e>
     9be:	24 2f       	mov	r18, r20
     9c0:	20 95       	com	r18
     9c2:	23 23       	and	r18, r19
     9c4:	20 a3       	std	Z+32, r18	; 0x20
     9c6:	ef 85       	ldd	r30, Y+15	; 0x0f
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
     9ca:	30 a1       	ldd	r19, Z+32	; 0x20
     9cc:	ac 01       	movw	r20, r24
     9ce:	09 88       	ldd	r0, Y+17	; 0x11
     9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <_ZN13Character_LCD4InitEhh+0x5e>
     9d2:	44 0f       	add	r20, r20
     9d4:	55 1f       	adc	r21, r21
     9d6:	0a 94       	dec	r0
     9d8:	e2 f7       	brpl	.-8      	; 0x9d2 <_ZN13Character_LCD4InitEhh+0x5a>
     9da:	24 2f       	mov	r18, r20
     9dc:	20 95       	com	r18
     9de:	23 23       	and	r18, r19
     9e0:	20 a3       	std	Z+32, r18	; 0x20
     9e2:	ea 89       	ldd	r30, Y+18	; 0x12
     9e4:	f0 e0       	ldi	r31, 0x00	; 0
     9e6:	30 a1       	ldd	r19, Z+32	; 0x20
     9e8:	ac 01       	movw	r20, r24
     9ea:	0c 88       	ldd	r0, Y+20	; 0x14
     9ec:	02 c0       	rjmp	.+4      	; 0x9f2 <_ZN13Character_LCD4InitEhh+0x7a>
     9ee:	44 0f       	add	r20, r20
     9f0:	55 1f       	adc	r21, r21
     9f2:	0a 94       	dec	r0
     9f4:	e2 f7       	brpl	.-8      	; 0x9ee <_ZN13Character_LCD4InitEhh+0x76>
     9f6:	24 2f       	mov	r18, r20
     9f8:	20 95       	com	r18
     9fa:	23 23       	and	r18, r19
     9fc:	20 a3       	std	Z+32, r18	; 0x20
     9fe:	ee 81       	ldd	r30, Y+6	; 0x06
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	30 a1       	ldd	r19, Z+32	; 0x20
     a04:	ac 01       	movw	r20, r24
     a06:	08 84       	ldd	r0, Y+8	; 0x08
     a08:	02 c0       	rjmp	.+4      	; 0xa0e <_ZN13Character_LCD4InitEhh+0x96>
     a0a:	44 0f       	add	r20, r20
     a0c:	55 1f       	adc	r21, r21
     a0e:	0a 94       	dec	r0
     a10:	e2 f7       	brpl	.-8      	; 0xa0a <_ZN13Character_LCD4InitEhh+0x92>
     a12:	24 2f       	mov	r18, r20
     a14:	20 95       	com	r18
     a16:	23 23       	and	r18, r19
     a18:	20 a3       	std	Z+32, r18	; 0x20
     a1a:	ea 85       	ldd	r30, Y+10	; 0x0a
     a1c:	f0 e0       	ldi	r31, 0x00	; 0
     a1e:	40 a1       	ldd	r20, Z+32	; 0x20
     a20:	9c 01       	movw	r18, r24
     a22:	0b 84       	ldd	r0, Y+11	; 0x0b
     a24:	02 c0       	rjmp	.+4      	; 0xa2a <_ZN13Character_LCD4InitEhh+0xb2>
     a26:	22 0f       	add	r18, r18
     a28:	33 1f       	adc	r19, r19
     a2a:	0a 94       	dec	r0
     a2c:	e2 f7       	brpl	.-8      	; 0xa26 <_ZN13Character_LCD4InitEhh+0xae>
     a2e:	24 2b       	or	r18, r20
     a30:	20 a3       	std	Z+32, r18	; 0x20
     a32:	ed 85       	ldd	r30, Y+13	; 0x0d
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	40 a1       	ldd	r20, Z+32	; 0x20
     a38:	9c 01       	movw	r18, r24
     a3a:	0e 84       	ldd	r0, Y+14	; 0x0e
     a3c:	02 c0       	rjmp	.+4      	; 0xa42 <_ZN13Character_LCD4InitEhh+0xca>
     a3e:	22 0f       	add	r18, r18
     a40:	33 1f       	adc	r19, r19
     a42:	0a 94       	dec	r0
     a44:	e2 f7       	brpl	.-8      	; 0xa3e <_ZN13Character_LCD4InitEhh+0xc6>
     a46:	24 2b       	or	r18, r20
     a48:	20 a3       	std	Z+32, r18	; 0x20
     a4a:	e8 89       	ldd	r30, Y+16	; 0x10
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	40 a1       	ldd	r20, Z+32	; 0x20
     a50:	9c 01       	movw	r18, r24
     a52:	09 88       	ldd	r0, Y+17	; 0x11
     a54:	02 c0       	rjmp	.+4      	; 0xa5a <_ZN13Character_LCD4InitEhh+0xe2>
     a56:	22 0f       	add	r18, r18
     a58:	33 1f       	adc	r19, r19
     a5a:	0a 94       	dec	r0
     a5c:	e2 f7       	brpl	.-8      	; 0xa56 <_ZN13Character_LCD4InitEhh+0xde>
     a5e:	24 2b       	or	r18, r20
     a60:	20 a3       	std	Z+32, r18	; 0x20
     a62:	eb 89       	ldd	r30, Y+19	; 0x13
     a64:	f0 e0       	ldi	r31, 0x00	; 0
     a66:	40 a1       	ldd	r20, Z+32	; 0x20
     a68:	9c 01       	movw	r18, r24
     a6a:	0c 88       	ldd	r0, Y+20	; 0x14
     a6c:	02 c0       	rjmp	.+4      	; 0xa72 <_ZN13Character_LCD4InitEhh+0xfa>
     a6e:	22 0f       	add	r18, r18
     a70:	33 1f       	adc	r19, r19
     a72:	0a 94       	dec	r0
     a74:	e2 f7       	brpl	.-8      	; 0xa6e <_ZN13Character_LCD4InitEhh+0xf6>
     a76:	24 2b       	or	r18, r20
     a78:	20 a3       	std	Z+32, r18	; 0x20
     a7a:	ef 81       	ldd	r30, Y+7	; 0x07
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	40 a1       	ldd	r20, Z+32	; 0x20
     a80:	9c 01       	movw	r18, r24
     a82:	08 84       	ldd	r0, Y+8	; 0x08
     a84:	02 c0       	rjmp	.+4      	; 0xa8a <_ZN13Character_LCD4InitEhh+0x112>
     a86:	22 0f       	add	r18, r18
     a88:	33 1f       	adc	r19, r19
     a8a:	0a 94       	dec	r0
     a8c:	e2 f7       	brpl	.-8      	; 0xa86 <_ZN13Character_LCD4InitEhh+0x10e>
     a8e:	24 2b       	or	r18, r20
     a90:	20 a3       	std	Z+32, r18	; 0x20
     a92:	e9 81       	ldd	r30, Y+1	; 0x01
     a94:	f0 e0       	ldi	r31, 0x00	; 0
     a96:	40 a1       	ldd	r20, Z+32	; 0x20
     a98:	9c 01       	movw	r18, r24
     a9a:	0a 80       	ldd	r0, Y+2	; 0x02
     a9c:	02 c0       	rjmp	.+4      	; 0xaa2 <_ZN13Character_LCD4InitEhh+0x12a>
     a9e:	22 0f       	add	r18, r18
     aa0:	33 1f       	adc	r19, r19
     aa2:	0a 94       	dec	r0
     aa4:	e2 f7       	brpl	.-8      	; 0xa9e <_ZN13Character_LCD4InitEhh+0x126>
     aa6:	24 2b       	or	r18, r20
     aa8:	20 a3       	std	Z+32, r18	; 0x20
     aaa:	ec 81       	ldd	r30, Y+4	; 0x04
     aac:	f0 e0       	ldi	r31, 0x00	; 0
     aae:	40 a1       	ldd	r20, Z+32	; 0x20
     ab0:	9c 01       	movw	r18, r24
     ab2:	0d 80       	ldd	r0, Y+5	; 0x05
     ab4:	02 c0       	rjmp	.+4      	; 0xaba <_ZN13Character_LCD4InitEhh+0x142>
     ab6:	22 0f       	add	r18, r18
     ab8:	33 1f       	adc	r19, r19
     aba:	0a 94       	dec	r0
     abc:	e2 f7       	brpl	.-8      	; 0xab6 <_ZN13Character_LCD4InitEhh+0x13e>
     abe:	24 2b       	or	r18, r20
     ac0:	20 a3       	std	Z+32, r18	; 0x20
     ac2:	e9 85       	ldd	r30, Y+9	; 0x09
     ac4:	f0 e0       	ldi	r31, 0x00	; 0
     ac6:	40 a1       	ldd	r20, Z+32	; 0x20
     ac8:	9c 01       	movw	r18, r24
     aca:	0b 84       	ldd	r0, Y+11	; 0x0b
     acc:	02 c0       	rjmp	.+4      	; 0xad2 <_ZN13Character_LCD4InitEhh+0x15a>
     ace:	22 0f       	add	r18, r18
     ad0:	33 1f       	adc	r19, r19
     ad2:	0a 94       	dec	r0
     ad4:	e2 f7       	brpl	.-8      	; 0xace <_ZN13Character_LCD4InitEhh+0x156>
     ad6:	24 2b       	or	r18, r20
     ad8:	20 a3       	std	Z+32, r18	; 0x20
     ada:	ec 85       	ldd	r30, Y+12	; 0x0c
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	40 a1       	ldd	r20, Z+32	; 0x20
     ae0:	9c 01       	movw	r18, r24
     ae2:	0e 84       	ldd	r0, Y+14	; 0x0e
     ae4:	02 c0       	rjmp	.+4      	; 0xaea <_ZN13Character_LCD4InitEhh+0x172>
     ae6:	22 0f       	add	r18, r18
     ae8:	33 1f       	adc	r19, r19
     aea:	0a 94       	dec	r0
     aec:	e2 f7       	brpl	.-8      	; 0xae6 <_ZN13Character_LCD4InitEhh+0x16e>
     aee:	24 2b       	or	r18, r20
     af0:	20 a3       	std	Z+32, r18	; 0x20
     af2:	ef 85       	ldd	r30, Y+15	; 0x0f
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	30 a1       	ldd	r19, Z+32	; 0x20
     af8:	ac 01       	movw	r20, r24
     afa:	09 88       	ldd	r0, Y+17	; 0x11
     afc:	02 c0       	rjmp	.+4      	; 0xb02 <_ZN13Character_LCD4InitEhh+0x18a>
     afe:	44 0f       	add	r20, r20
     b00:	55 1f       	adc	r21, r21
     b02:	0a 94       	dec	r0
     b04:	e2 f7       	brpl	.-8      	; 0xafe <_ZN13Character_LCD4InitEhh+0x186>
     b06:	24 2f       	mov	r18, r20
     b08:	20 95       	com	r18
     b0a:	23 23       	and	r18, r19
     b0c:	20 a3       	std	Z+32, r18	; 0x20
     b0e:	ea 89       	ldd	r30, Y+18	; 0x12
     b10:	f0 e0       	ldi	r31, 0x00	; 0
     b12:	30 a1       	ldd	r19, Z+32	; 0x20
     b14:	ac 01       	movw	r20, r24
     b16:	0c 88       	ldd	r0, Y+20	; 0x14
     b18:	02 c0       	rjmp	.+4      	; 0xb1e <_ZN13Character_LCD4InitEhh+0x1a6>
     b1a:	44 0f       	add	r20, r20
     b1c:	55 1f       	adc	r21, r21
     b1e:	0a 94       	dec	r0
     b20:	e2 f7       	brpl	.-8      	; 0xb1a <_ZN13Character_LCD4InitEhh+0x1a2>
     b22:	24 2f       	mov	r18, r20
     b24:	20 95       	com	r18
     b26:	23 23       	and	r18, r19
     b28:	20 a3       	std	Z+32, r18	; 0x20
     b2a:	ee 81       	ldd	r30, Y+6	; 0x06
     b2c:	f0 e0       	ldi	r31, 0x00	; 0
     b2e:	40 a1       	ldd	r20, Z+32	; 0x20
     b30:	9c 01       	movw	r18, r24
     b32:	08 84       	ldd	r0, Y+8	; 0x08
     b34:	02 c0       	rjmp	.+4      	; 0xb3a <_ZN13Character_LCD4InitEhh+0x1c2>
     b36:	22 0f       	add	r18, r18
     b38:	33 1f       	adc	r19, r19
     b3a:	0a 94       	dec	r0
     b3c:	e2 f7       	brpl	.-8      	; 0xb36 <_ZN13Character_LCD4InitEhh+0x1be>
     b3e:	24 2b       	or	r18, r20
     b40:	20 a3       	std	Z+32, r18	; 0x20
     b42:	e8 81       	ld	r30, Y
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	30 a1       	ldd	r19, Z+32	; 0x20
     b48:	ac 01       	movw	r20, r24
     b4a:	0a 80       	ldd	r0, Y+2	; 0x02
     b4c:	02 c0       	rjmp	.+4      	; 0xb52 <_ZN13Character_LCD4InitEhh+0x1da>
     b4e:	44 0f       	add	r20, r20
     b50:	55 1f       	adc	r21, r21
     b52:	0a 94       	dec	r0
     b54:	e2 f7       	brpl	.-8      	; 0xb4e <_ZN13Character_LCD4InitEhh+0x1d6>
     b56:	24 2f       	mov	r18, r20
     b58:	20 95       	com	r18
     b5a:	23 23       	and	r18, r19
     b5c:	20 a3       	std	Z+32, r18	; 0x20
     b5e:	eb 81       	ldd	r30, Y+3	; 0x03
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	30 a1       	ldd	r19, Z+32	; 0x20
     b64:	ac 01       	movw	r20, r24
     b66:	0d 80       	ldd	r0, Y+5	; 0x05
     b68:	02 c0       	rjmp	.+4      	; 0xb6e <_ZN13Character_LCD4InitEhh+0x1f6>
     b6a:	44 0f       	add	r20, r20
     b6c:	55 1f       	adc	r21, r21
     b6e:	0a 94       	dec	r0
     b70:	e2 f7       	brpl	.-8      	; 0xb6a <_ZN13Character_LCD4InitEhh+0x1f2>
     b72:	24 2f       	mov	r18, r20
     b74:	20 95       	com	r18
     b76:	23 23       	and	r18, r19
     b78:	20 a3       	std	Z+32, r18	; 0x20
     b7a:	ef ec       	ldi	r30, 0xCF	; 207
     b7c:	f7 e0       	ldi	r31, 0x07	; 7
     b7e:	31 97       	sbiw	r30, 0x01	; 1
     b80:	f1 f7       	brne	.-4      	; 0xb7e <_ZN13Character_LCD4InitEhh+0x206>
     b82:	00 c0       	rjmp	.+0      	; 0xb84 <_ZN13Character_LCD4InitEhh+0x20c>
     b84:	00 00       	nop
     b86:	ee 81       	ldd	r30, Y+6	; 0x06
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	30 a1       	ldd	r19, Z+32	; 0x20
     b8c:	ac 01       	movw	r20, r24
     b8e:	08 84       	ldd	r0, Y+8	; 0x08
     b90:	02 c0       	rjmp	.+4      	; 0xb96 <_ZN13Character_LCD4InitEhh+0x21e>
     b92:	44 0f       	add	r20, r20
     b94:	55 1f       	adc	r21, r21
     b96:	0a 94       	dec	r0
     b98:	e2 f7       	brpl	.-8      	; 0xb92 <_ZN13Character_LCD4InitEhh+0x21a>
     b9a:	24 2f       	mov	r18, r20
     b9c:	20 95       	com	r18
     b9e:	23 23       	and	r18, r19
     ba0:	20 a3       	std	Z+32, r18	; 0x20
     ba2:	ef ec       	ldi	r30, 0xCF	; 207
     ba4:	f7 e0       	ldi	r31, 0x07	; 7
     ba6:	31 97       	sbiw	r30, 0x01	; 1
     ba8:	f1 f7       	brne	.-4      	; 0xba6 <_ZN13Character_LCD4InitEhh+0x22e>
     baa:	00 c0       	rjmp	.+0      	; 0xbac <_ZN13Character_LCD4InitEhh+0x234>
     bac:	00 00       	nop
     bae:	e9 85       	ldd	r30, Y+9	; 0x09
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	40 a1       	ldd	r20, Z+32	; 0x20
     bb4:	9c 01       	movw	r18, r24
     bb6:	0b 84       	ldd	r0, Y+11	; 0x0b
     bb8:	02 c0       	rjmp	.+4      	; 0xbbe <_ZN13Character_LCD4InitEhh+0x246>
     bba:	22 0f       	add	r18, r18
     bbc:	33 1f       	adc	r19, r19
     bbe:	0a 94       	dec	r0
     bc0:	e2 f7       	brpl	.-8      	; 0xbba <_ZN13Character_LCD4InitEhh+0x242>
     bc2:	24 2b       	or	r18, r20
     bc4:	20 a3       	std	Z+32, r18	; 0x20
     bc6:	ec 85       	ldd	r30, Y+12	; 0x0c
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	40 a1       	ldd	r20, Z+32	; 0x20
     bcc:	9c 01       	movw	r18, r24
     bce:	0e 84       	ldd	r0, Y+14	; 0x0e
     bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <_ZN13Character_LCD4InitEhh+0x25e>
     bd2:	22 0f       	add	r18, r18
     bd4:	33 1f       	adc	r19, r19
     bd6:	0a 94       	dec	r0
     bd8:	e2 f7       	brpl	.-8      	; 0xbd2 <_ZN13Character_LCD4InitEhh+0x25a>
     bda:	24 2b       	or	r18, r20
     bdc:	20 a3       	std	Z+32, r18	; 0x20
     bde:	ef 85       	ldd	r30, Y+15	; 0x0f
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	30 a1       	ldd	r19, Z+32	; 0x20
     be4:	ac 01       	movw	r20, r24
     be6:	09 88       	ldd	r0, Y+17	; 0x11
     be8:	02 c0       	rjmp	.+4      	; 0xbee <_ZN13Character_LCD4InitEhh+0x276>
     bea:	44 0f       	add	r20, r20
     bec:	55 1f       	adc	r21, r21
     bee:	0a 94       	dec	r0
     bf0:	e2 f7       	brpl	.-8      	; 0xbea <_ZN13Character_LCD4InitEhh+0x272>
     bf2:	24 2f       	mov	r18, r20
     bf4:	20 95       	com	r18
     bf6:	23 23       	and	r18, r19
     bf8:	20 a3       	std	Z+32, r18	; 0x20
     bfa:	ea 89       	ldd	r30, Y+18	; 0x12
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	30 a1       	ldd	r19, Z+32	; 0x20
     c00:	ac 01       	movw	r20, r24
     c02:	0c 88       	ldd	r0, Y+20	; 0x14
     c04:	02 c0       	rjmp	.+4      	; 0xc0a <_ZN13Character_LCD4InitEhh+0x292>
     c06:	44 0f       	add	r20, r20
     c08:	55 1f       	adc	r21, r21
     c0a:	0a 94       	dec	r0
     c0c:	e2 f7       	brpl	.-8      	; 0xc06 <_ZN13Character_LCD4InitEhh+0x28e>
     c0e:	24 2f       	mov	r18, r20
     c10:	20 95       	com	r18
     c12:	23 23       	and	r18, r19
     c14:	20 a3       	std	Z+32, r18	; 0x20
     c16:	ee 81       	ldd	r30, Y+6	; 0x06
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	40 a1       	ldd	r20, Z+32	; 0x20
     c1c:	9c 01       	movw	r18, r24
     c1e:	08 84       	ldd	r0, Y+8	; 0x08
     c20:	02 c0       	rjmp	.+4      	; 0xc26 <_ZN13Character_LCD4InitEhh+0x2ae>
     c22:	22 0f       	add	r18, r18
     c24:	33 1f       	adc	r19, r19
     c26:	0a 94       	dec	r0
     c28:	e2 f7       	brpl	.-8      	; 0xc22 <_ZN13Character_LCD4InitEhh+0x2aa>
     c2a:	24 2b       	or	r18, r20
     c2c:	20 a3       	std	Z+32, r18	; 0x20
     c2e:	e8 81       	ld	r30, Y
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	30 a1       	ldd	r19, Z+32	; 0x20
     c34:	ac 01       	movw	r20, r24
     c36:	0a 80       	ldd	r0, Y+2	; 0x02
     c38:	02 c0       	rjmp	.+4      	; 0xc3e <_ZN13Character_LCD4InitEhh+0x2c6>
     c3a:	44 0f       	add	r20, r20
     c3c:	55 1f       	adc	r21, r21
     c3e:	0a 94       	dec	r0
     c40:	e2 f7       	brpl	.-8      	; 0xc3a <_ZN13Character_LCD4InitEhh+0x2c2>
     c42:	24 2f       	mov	r18, r20
     c44:	20 95       	com	r18
     c46:	23 23       	and	r18, r19
     c48:	20 a3       	std	Z+32, r18	; 0x20
     c4a:	eb 81       	ldd	r30, Y+3	; 0x03
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	30 a1       	ldd	r19, Z+32	; 0x20
     c50:	ac 01       	movw	r20, r24
     c52:	0d 80       	ldd	r0, Y+5	; 0x05
     c54:	02 c0       	rjmp	.+4      	; 0xc5a <_ZN13Character_LCD4InitEhh+0x2e2>
     c56:	44 0f       	add	r20, r20
     c58:	55 1f       	adc	r21, r21
     c5a:	0a 94       	dec	r0
     c5c:	e2 f7       	brpl	.-8      	; 0xc56 <_ZN13Character_LCD4InitEhh+0x2de>
     c5e:	24 2f       	mov	r18, r20
     c60:	20 95       	com	r18
     c62:	23 23       	and	r18, r19
     c64:	20 a3       	std	Z+32, r18	; 0x20
     c66:	ef ec       	ldi	r30, 0xCF	; 207
     c68:	f7 e0       	ldi	r31, 0x07	; 7
     c6a:	31 97       	sbiw	r30, 0x01	; 1
     c6c:	f1 f7       	brne	.-4      	; 0xc6a <_ZN13Character_LCD4InitEhh+0x2f2>
     c6e:	00 c0       	rjmp	.+0      	; 0xc70 <_ZN13Character_LCD4InitEhh+0x2f8>
     c70:	00 00       	nop
     c72:	ee 81       	ldd	r30, Y+6	; 0x06
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	30 a1       	ldd	r19, Z+32	; 0x20
     c78:	ac 01       	movw	r20, r24
     c7a:	08 84       	ldd	r0, Y+8	; 0x08
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <_ZN13Character_LCD4InitEhh+0x30a>
     c7e:	44 0f       	add	r20, r20
     c80:	55 1f       	adc	r21, r21
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <_ZN13Character_LCD4InitEhh+0x306>
     c86:	24 2f       	mov	r18, r20
     c88:	20 95       	com	r18
     c8a:	23 23       	and	r18, r19
     c8c:	20 a3       	std	Z+32, r18	; 0x20
     c8e:	ef ec       	ldi	r30, 0xCF	; 207
     c90:	f7 e0       	ldi	r31, 0x07	; 7
     c92:	31 97       	sbiw	r30, 0x01	; 1
     c94:	f1 f7       	brne	.-4      	; 0xc92 <_ZN13Character_LCD4InitEhh+0x31a>
     c96:	00 c0       	rjmp	.+0      	; 0xc98 <_ZN13Character_LCD4InitEhh+0x320>
     c98:	00 00       	nop
     c9a:	e9 85       	ldd	r30, Y+9	; 0x09
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	30 a1       	ldd	r19, Z+32	; 0x20
     ca0:	ac 01       	movw	r20, r24
     ca2:	0b 84       	ldd	r0, Y+11	; 0x0b
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <_ZN13Character_LCD4InitEhh+0x332>
     ca6:	44 0f       	add	r20, r20
     ca8:	55 1f       	adc	r21, r21
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <_ZN13Character_LCD4InitEhh+0x32e>
     cae:	24 2f       	mov	r18, r20
     cb0:	20 95       	com	r18
     cb2:	23 23       	and	r18, r19
     cb4:	20 a3       	std	Z+32, r18	; 0x20
     cb6:	ec 85       	ldd	r30, Y+12	; 0x0c
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	40 a1       	ldd	r20, Z+32	; 0x20
     cbc:	9c 01       	movw	r18, r24
     cbe:	0e 84       	ldd	r0, Y+14	; 0x0e
     cc0:	02 c0       	rjmp	.+4      	; 0xcc6 <_ZN13Character_LCD4InitEhh+0x34e>
     cc2:	22 0f       	add	r18, r18
     cc4:	33 1f       	adc	r19, r19
     cc6:	0a 94       	dec	r0
     cc8:	e2 f7       	brpl	.-8      	; 0xcc2 <_ZN13Character_LCD4InitEhh+0x34a>
     cca:	24 2b       	or	r18, r20
     ccc:	20 a3       	std	Z+32, r18	; 0x20
     cce:	ef 85       	ldd	r30, Y+15	; 0x0f
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	30 a1       	ldd	r19, Z+32	; 0x20
     cd4:	ac 01       	movw	r20, r24
     cd6:	09 88       	ldd	r0, Y+17	; 0x11
     cd8:	02 c0       	rjmp	.+4      	; 0xcde <_ZN13Character_LCD4InitEhh+0x366>
     cda:	44 0f       	add	r20, r20
     cdc:	55 1f       	adc	r21, r21
     cde:	0a 94       	dec	r0
     ce0:	e2 f7       	brpl	.-8      	; 0xcda <_ZN13Character_LCD4InitEhh+0x362>
     ce2:	24 2f       	mov	r18, r20
     ce4:	20 95       	com	r18
     ce6:	23 23       	and	r18, r19
     ce8:	20 a3       	std	Z+32, r18	; 0x20
     cea:	ea 89       	ldd	r30, Y+18	; 0x12
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	30 a1       	ldd	r19, Z+32	; 0x20
     cf0:	ac 01       	movw	r20, r24
     cf2:	0c 88       	ldd	r0, Y+20	; 0x14
     cf4:	02 c0       	rjmp	.+4      	; 0xcfa <_ZN13Character_LCD4InitEhh+0x382>
     cf6:	44 0f       	add	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	0a 94       	dec	r0
     cfc:	e2 f7       	brpl	.-8      	; 0xcf6 <_ZN13Character_LCD4InitEhh+0x37e>
     cfe:	24 2f       	mov	r18, r20
     d00:	20 95       	com	r18
     d02:	23 23       	and	r18, r19
     d04:	20 a3       	std	Z+32, r18	; 0x20
     d06:	ee 81       	ldd	r30, Y+6	; 0x06
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	40 a1       	ldd	r20, Z+32	; 0x20
     d0c:	9c 01       	movw	r18, r24
     d0e:	08 84       	ldd	r0, Y+8	; 0x08
     d10:	02 c0       	rjmp	.+4      	; 0xd16 <_ZN13Character_LCD4InitEhh+0x39e>
     d12:	22 0f       	add	r18, r18
     d14:	33 1f       	adc	r19, r19
     d16:	0a 94       	dec	r0
     d18:	e2 f7       	brpl	.-8      	; 0xd12 <_ZN13Character_LCD4InitEhh+0x39a>
     d1a:	24 2b       	or	r18, r20
     d1c:	20 a3       	std	Z+32, r18	; 0x20
     d1e:	e8 81       	ld	r30, Y
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	30 a1       	ldd	r19, Z+32	; 0x20
     d24:	ac 01       	movw	r20, r24
     d26:	0a 80       	ldd	r0, Y+2	; 0x02
     d28:	02 c0       	rjmp	.+4      	; 0xd2e <_ZN13Character_LCD4InitEhh+0x3b6>
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	0a 94       	dec	r0
     d30:	e2 f7       	brpl	.-8      	; 0xd2a <_ZN13Character_LCD4InitEhh+0x3b2>
     d32:	24 2f       	mov	r18, r20
     d34:	20 95       	com	r18
     d36:	23 23       	and	r18, r19
     d38:	20 a3       	std	Z+32, r18	; 0x20
     d3a:	eb 81       	ldd	r30, Y+3	; 0x03
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	30 a1       	ldd	r19, Z+32	; 0x20
     d40:	ac 01       	movw	r20, r24
     d42:	0d 80       	ldd	r0, Y+5	; 0x05
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <_ZN13Character_LCD4InitEhh+0x3d2>
     d46:	44 0f       	add	r20, r20
     d48:	55 1f       	adc	r21, r21
     d4a:	0a 94       	dec	r0
     d4c:	e2 f7       	brpl	.-8      	; 0xd46 <_ZN13Character_LCD4InitEhh+0x3ce>
     d4e:	24 2f       	mov	r18, r20
     d50:	20 95       	com	r18
     d52:	23 23       	and	r18, r19
     d54:	20 a3       	std	Z+32, r18	; 0x20
     d56:	ef ec       	ldi	r30, 0xCF	; 207
     d58:	f7 e0       	ldi	r31, 0x07	; 7
     d5a:	31 97       	sbiw	r30, 0x01	; 1
     d5c:	f1 f7       	brne	.-4      	; 0xd5a <_ZN13Character_LCD4InitEhh+0x3e2>
     d5e:	00 c0       	rjmp	.+0      	; 0xd60 <_ZN13Character_LCD4InitEhh+0x3e8>
     d60:	00 00       	nop
     d62:	ee 81       	ldd	r30, Y+6	; 0x06
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	20 a1       	ldd	r18, Z+32	; 0x20
     d68:	08 84       	ldd	r0, Y+8	; 0x08
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <_ZN13Character_LCD4InitEhh+0x3f8>
     d6c:	88 0f       	add	r24, r24
     d6e:	99 1f       	adc	r25, r25
     d70:	0a 94       	dec	r0
     d72:	e2 f7       	brpl	.-8      	; 0xd6c <_ZN13Character_LCD4InitEhh+0x3f4>
     d74:	80 95       	com	r24
     d76:	82 23       	and	r24, r18
     d78:	80 a3       	std	Z+32, r24	; 0x20
     d7a:	8f ec       	ldi	r24, 0xCF	; 207
     d7c:	97 e0       	ldi	r25, 0x07	; 7
     d7e:	01 97       	sbiw	r24, 0x01	; 1
     d80:	f1 f7       	brne	.-4      	; 0xd7e <_ZN13Character_LCD4InitEhh+0x406>
     d82:	00 c0       	rjmp	.+0      	; 0xd84 <_ZN13Character_LCD4InitEhh+0x40c>
     d84:	00 00       	nop
     d86:	68 e2       	ldi	r22, 0x28	; 40
     d88:	ce 01       	movw	r24, r28
     d8a:	0e 94 23 03 	call	0x646	; 0x646 <_ZN13Character_LCD11SendCommandEh>
     d8e:	6c e0       	ldi	r22, 0x0C	; 12
     d90:	ce 01       	movw	r24, r28
     d92:	0e 94 23 03 	call	0x646	; 0x646 <_ZN13Character_LCD11SendCommandEh>
     d96:	ce 01       	movw	r24, r28
     d98:	0e 94 9d 04 	call	0x93a	; 0x93a <_ZN13Character_LCD3ClrEv>
     d9c:	df 91       	pop	r29
     d9e:	cf 91       	pop	r28
     da0:	08 95       	ret

00000da2 <_ZN13Character_LCD6NumberEhmh>:

void Character_LCD :: Number(uint8_t v_numericSystem_u8, uint32_t v_number_u32, uint8_t v_numOfDigits)
{
     da2:	2f 92       	push	r2
     da4:	3f 92       	push	r3
     da6:	4f 92       	push	r4
     da8:	5f 92       	push	r5
     daa:	6f 92       	push	r6
     dac:	7f 92       	push	r7
     dae:	8f 92       	push	r8
     db0:	9f 92       	push	r9
     db2:	af 92       	push	r10
     db4:	bf 92       	push	r11
     db6:	cf 92       	push	r12
     db8:	df 92       	push	r13
     dba:	ef 92       	push	r14
     dbc:	ff 92       	push	r15
     dbe:	0f 93       	push	r16
     dc0:	1f 93       	push	r17
     dc2:	cf 93       	push	r28
     dc4:	df 93       	push	r29
     dc6:	cd b7       	in	r28, 0x3d	; 61
     dc8:	de b7       	in	r29, 0x3e	; 62
     dca:	2a 97       	sbiw	r28, 0x0a	; 10
     dcc:	0f b6       	in	r0, 0x3f	; 63
     dce:	f8 94       	cli
     dd0:	de bf       	out	0x3e, r29	; 62
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	cd bf       	out	0x3d, r28	; 61
     dd6:	5c 01       	movw	r10, r24
     dd8:	66 2e       	mov	r6, r22
     dda:	69 01       	movw	r12, r18
     ddc:	7a 01       	movw	r14, r20
    uint8_t i=0,a[10];

    if(2u == v_numericSystem_u8)
     dde:	22 e0       	ldi	r18, 0x02	; 2
     de0:	62 13       	cpse	r22, r18
     de2:	26 c0       	rjmp	.+76     	; 0xe30 <_ZN13Character_LCD6NumberEhmh+0x8e>
    {
        while(v_numOfDigits!=0)
     de4:	00 23       	and	r16, r16
     de6:	09 f4       	brne	.+2      	; 0xdea <_ZN13Character_LCD6NumberEhmh+0x48>
     de8:	76 c0       	rjmp	.+236    	; 0xed6 <_ZN13Character_LCD6NumberEhmh+0x134>
        {
            /* Start Extracting the bits from the specified bit positions.
             Get the Acsii values of the bits and transmit */
            i = _AS_GetBitStatus(v_number_u32,(v_numOfDigits-1));
            SendChar(_AS_Dec2Ascii(i));
     dea:	88 24       	eor	r8, r8
     dec:	83 94       	inc	r8
     dee:	91 2c       	mov	r9, r1
     df0:	11 e0       	ldi	r17, 0x01	; 1
     df2:	71 2c       	mov	r7, r1
     df4:	8f ef       	ldi	r24, 0xFF	; 255
     df6:	80 0f       	add	r24, r16
     df8:	f4 01       	movw	r30, r8
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <_ZN13Character_LCD6NumberEhmh+0x5e>
     dfc:	ee 0f       	add	r30, r30
     dfe:	ff 1f       	adc	r31, r31
     e00:	8a 95       	dec	r24
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <_ZN13Character_LCD6NumberEhmh+0x5a>
     e04:	cf 01       	movw	r24, r30
     e06:	09 2e       	mov	r0, r25
     e08:	00 0c       	add	r0, r0
     e0a:	aa 0b       	sbc	r26, r26
     e0c:	bb 0b       	sbc	r27, r27
     e0e:	8c 21       	and	r24, r12
     e10:	9d 21       	and	r25, r13
     e12:	ae 21       	and	r26, r14
     e14:	bf 21       	and	r27, r15
     e16:	61 2f       	mov	r22, r17
     e18:	89 2b       	or	r24, r25
     e1a:	8a 2b       	or	r24, r26
     e1c:	8b 2b       	or	r24, r27
     e1e:	09 f4       	brne	.+2      	; 0xe22 <_ZN13Character_LCD6NumberEhmh+0x80>
     e20:	67 2d       	mov	r22, r7
     e22:	60 5d       	subi	r22, 0xD0	; 208
     e24:	c5 01       	movw	r24, r10
     e26:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_ZN13Character_LCD8SendCharEh>
            v_numOfDigits--;
     e2a:	01 50       	subi	r16, 0x01	; 1
{
    uint8_t i=0,a[10];

    if(2u == v_numericSystem_u8)
    {
        while(v_numOfDigits!=0)
     e2c:	19 f7       	brne	.-58     	; 0xdf4 <_ZN13Character_LCD6NumberEhmh+0x52>
     e2e:	53 c0       	rjmp	.+166    	; 0xed6 <_ZN13Character_LCD6NumberEhmh+0x134>
            i = _AS_GetBitStatus(v_number_u32,(v_numOfDigits-1));
            SendChar(_AS_Dec2Ascii(i));
            v_numOfDigits--;
        }    
    }     
    else if(v_number_u32==0)
     e30:	c1 14       	cp	r12, r1
     e32:	d1 04       	cpc	r13, r1
     e34:	e1 04       	cpc	r14, r1
     e36:	f1 04       	cpc	r15, r1
     e38:	19 f0       	breq	.+6      	; 0xe40 <_ZN13Character_LCD6NumberEhmh+0x9e>
        for(i=0;((i<v_numOfDigits) && (i<10u)) ;i++)
            SendChar('0');
    }
    else
    {
        for(i=0;i<v_numOfDigits;i++)
     e3a:	01 11       	cpse	r16, r1
     e3c:	11 c0       	rjmp	.+34     	; 0xe60 <_ZN13Character_LCD6NumberEhmh+0xbe>
     e3e:	4b c0       	rjmp	.+150    	; 0xed6 <_ZN13Character_LCD6NumberEhmh+0x134>
        }    
    }     
    else if(v_number_u32==0)
    {
        /* If the number is zero then update the array with the same for transmitting */
        for(i=0;((i<v_numOfDigits) && (i<10u)) ;i++)
     e40:	00 23       	and	r16, r16
     e42:	09 f4       	brne	.+2      	; 0xe46 <_ZN13Character_LCD6NumberEhmh+0xa4>
     e44:	48 c0       	rjmp	.+144    	; 0xed6 <_ZN13Character_LCD6NumberEhmh+0x134>
     e46:	10 e0       	ldi	r17, 0x00	; 0
     e48:	03 c0       	rjmp	.+6      	; 0xe50 <_ZN13Character_LCD6NumberEhmh+0xae>
     e4a:	1a 30       	cpi	r17, 0x0A	; 10
     e4c:	09 f4       	brne	.+2      	; 0xe50 <_ZN13Character_LCD6NumberEhmh+0xae>
     e4e:	43 c0       	rjmp	.+134    	; 0xed6 <_ZN13Character_LCD6NumberEhmh+0x134>
            SendChar('0');
     e50:	60 e3       	ldi	r22, 0x30	; 48
     e52:	c5 01       	movw	r24, r10
     e54:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_ZN13Character_LCD8SendCharEh>
        }    
    }     
    else if(v_number_u32==0)
    {
        /* If the number is zero then update the array with the same for transmitting */
        for(i=0;((i<v_numOfDigits) && (i<10u)) ;i++)
     e58:	1f 5f       	subi	r17, 0xFF	; 255
     e5a:	01 13       	cpse	r16, r17
     e5c:	f6 cf       	rjmp	.-20     	; 0xe4a <_ZN13Character_LCD6NumberEhmh+0xa8>
     e5e:	3b c0       	rjmp	.+118    	; 0xed6 <_ZN13Character_LCD6NumberEhmh+0x134>
     e60:	9e 01       	movw	r18, r28
     e62:	2f 5f       	subi	r18, 0xFF	; 255
     e64:	3f 4f       	sbci	r19, 0xFF	; 255
     e66:	49 01       	movw	r8, r18
            SendChar('0');
    }
    else
    {
        for(i=0;i<v_numOfDigits;i++)
     e68:	10 e0       	ldi	r17, 0x00	; 0
                First get the remainder and divide the number by 10 each time.

                example for Decimal number:
                If v_number_u32 = 123 then extracted remainder will be 3 and number will be 12.
                The process continues till it becomes zero or max digits reached*/
                a[i]=_AS_GetMod32(v_number_u32,v_numericSystem_u8);
     e6a:	26 2e       	mov	r2, r22
     e6c:	31 2c       	mov	r3, r1
     e6e:	41 2c       	mov	r4, r1
     e70:	51 2c       	mov	r5, r1
    {
        for(i=0;i<v_numOfDigits;i++)
        {
            /* Continue extracting the digits from right side
               till the Specified v_numOfDigitsToTransmit_u8 */
            if(v_number_u32!=0)
     e72:	c1 14       	cp	r12, r1
     e74:	d1 04       	cpc	r13, r1
     e76:	e1 04       	cpc	r14, r1
     e78:	f1 04       	cpc	r15, r1
     e7a:	89 f0       	breq	.+34     	; 0xe9e <_ZN13Character_LCD6NumberEhmh+0xfc>
                First get the remainder and divide the number by 10 each time.

                example for Decimal number:
                If v_number_u32 = 123 then extracted remainder will be 3 and number will be 12.
                The process continues till it becomes zero or max digits reached*/
                a[i]=_AS_GetMod32(v_number_u32,v_numericSystem_u8);
     e7c:	7c 2c       	mov	r7, r12
     e7e:	c7 01       	movw	r24, r14
     e80:	b6 01       	movw	r22, r12
     e82:	a2 01       	movw	r20, r4
     e84:	91 01       	movw	r18, r2
     e86:	0e 94 18 0b 	call	0x1630	; 0x1630 <__udivmodsi4>
     e8a:	c2 2e       	mov	r12, r18
     e8c:	d3 2e       	mov	r13, r19
     e8e:	e4 2e       	mov	r14, r20
     e90:	f5 2e       	mov	r15, r21
     e92:	62 9e       	mul	r6, r18
     e94:	70 18       	sub	r7, r0
     e96:	11 24       	eor	r1, r1
     e98:	f4 01       	movw	r30, r8
     e9a:	70 82       	st	Z, r7
     e9c:	08 c0       	rjmp	.+16     	; 0xeae <_ZN13Character_LCD6NumberEhmh+0x10c>
                v_number_u32=v_number_u32/v_numericSystem_u8;
            }
            else if( (v_numOfDigits == 0xffu) ||
     e9e:	0b 30       	cpi	r16, 0x0B	; 11
     ea0:	20 f0       	brcs	.+8      	; 0xeaa <_ZN13Character_LCD6NumberEhmh+0x108>
                Ex: v_number_u32 is 123 and user wants five digits then 00123 has to be transmitted */
                a[i]=0;
            }
        }

        while(i)
     ea2:	11 23       	and	r17, r17
     ea4:	c1 f0       	breq	.+48     	; 0xed6 <_ZN13Character_LCD6NumberEhmh+0x134>
     ea6:	01 2f       	mov	r16, r17
     ea8:	08 c0       	rjmp	.+16     	; 0xeba <_ZN13Character_LCD6NumberEhmh+0x118>
            else
            {
                /*In case user expects more digits to be transmitted than the actual digits in number,
                  then update the remaining digits with zero.
                Ex: v_number_u32 is 123 and user wants five digits then 00123 has to be transmitted */
                a[i]=0;
     eaa:	f4 01       	movw	r30, r8
     eac:	10 82       	st	Z, r1
        for(i=0;((i<v_numOfDigits) && (i<10u)) ;i++)
            SendChar('0');
    }
    else
    {
        for(i=0;i<v_numOfDigits;i++)
     eae:	1f 5f       	subi	r17, 0xFF	; 255
     eb0:	ff ef       	ldi	r31, 0xFF	; 255
     eb2:	8f 1a       	sub	r8, r31
     eb4:	9f 0a       	sbc	r9, r31
     eb6:	01 13       	cpse	r16, r17
     eb8:	dc cf       	rjmp	.-72     	; 0xe72 <_ZN13Character_LCD6NumberEhmh+0xd0>
        }

        while(i)
        { 
            /* Finally get the ascii values of the digits and transmit*/
            SendChar(_AS_Hex2Ascii(a[i-1]));
     eba:	fe 01       	movw	r30, r28
     ebc:	e0 0f       	add	r30, r16
     ebe:	f1 1d       	adc	r31, r1
     ec0:	60 81       	ld	r22, Z
     ec2:	6a 30       	cpi	r22, 0x0A	; 10
     ec4:	10 f0       	brcs	.+4      	; 0xeca <_ZN13Character_LCD6NumberEhmh+0x128>
     ec6:	69 5c       	subi	r22, 0xC9	; 201
     ec8:	01 c0       	rjmp	.+2      	; 0xecc <_ZN13Character_LCD6NumberEhmh+0x12a>
     eca:	60 5d       	subi	r22, 0xD0	; 208
     ecc:	c5 01       	movw	r24, r10
     ece:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_ZN13Character_LCD8SendCharEh>
            i--;
     ed2:	01 50       	subi	r16, 0x01	; 1
                Ex: v_number_u32 is 123 and user wants five digits then 00123 has to be transmitted */
                a[i]=0;
            }
        }

        while(i)
     ed4:	91 f7       	brne	.-28     	; 0xeba <_ZN13Character_LCD6NumberEhmh+0x118>
            i--;
        }
    }


}
     ed6:	2a 96       	adiw	r28, 0x0a	; 10
     ed8:	0f b6       	in	r0, 0x3f	; 63
     eda:	f8 94       	cli
     edc:	de bf       	out	0x3e, r29	; 62
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	cd bf       	out	0x3d, r28	; 61
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	1f 91       	pop	r17
     ee8:	0f 91       	pop	r16
     eea:	ff 90       	pop	r15
     eec:	ef 90       	pop	r14
     eee:	df 90       	pop	r13
     ef0:	cf 90       	pop	r12
     ef2:	bf 90       	pop	r11
     ef4:	af 90       	pop	r10
     ef6:	9f 90       	pop	r9
     ef8:	8f 90       	pop	r8
     efa:	7f 90       	pop	r7
     efc:	6f 90       	pop	r6
     efe:	5f 90       	pop	r5
     f00:	4f 90       	pop	r4
     f02:	3f 90       	pop	r3
     f04:	2f 90       	pop	r2
     f06:	08 95       	ret

00000f08 <_ZN13Character_LCD11FloatNumberEf>:

void Character_LCD :: FloatNumber(float v_floatNumber_f32)
{
     f08:	8f 92       	push	r8
     f0a:	9f 92       	push	r9
     f0c:	af 92       	push	r10
     f0e:	bf 92       	push	r11
     f10:	cf 92       	push	r12
     f12:	df 92       	push	r13
     f14:	ef 92       	push	r14
     f16:	ff 92       	push	r15
     f18:	0f 93       	push	r16
     f1a:	cf 93       	push	r28
     f1c:	df 93       	push	r29
     f1e:	ec 01       	movw	r28, r24
     f20:	6a 01       	movw	r12, r20
     f22:	7b 01       	movw	r14, r22
      1.Type cast the number to int to get the integer part.
	  2.transmit the extracted integer part followed by a decimal point(.).
	  3.Later the integer part is made zero by subtracting with the extracted integer value.
	  4.Finally the fractional part is multiplied by 100000 to support 6-digit precision */

	v_tempNumber_u32 = (uint32_t) v_floatNumber_f32;
     f24:	cb 01       	movw	r24, r22
     f26:	ba 01       	movw	r22, r20
     f28:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__fixunssfsi>
     f2c:	4b 01       	movw	r8, r22
     f2e:	5c 01       	movw	r10, r24
	Number(10u,v_tempNumber_u32,0xffu);
     f30:	0f ef       	ldi	r16, 0xFF	; 255
     f32:	9b 01       	movw	r18, r22
     f34:	ac 01       	movw	r20, r24
     f36:	6a e0       	ldi	r22, 0x0A	; 10
     f38:	ce 01       	movw	r24, r28
     f3a:	0e 94 d1 06 	call	0xda2	; 0xda2 <_ZN13Character_LCD6NumberEhmh>

	SendChar('.');
     f3e:	6e e2       	ldi	r22, 0x2E	; 46
     f40:	ce 01       	movw	r24, r28
     f42:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_ZN13Character_LCD8SendCharEh>

	v_floatNumber_f32 = v_floatNumber_f32 - v_tempNumber_u32;
	v_tempNumber_u32 = v_floatNumber_f32 * 1000000;
     f46:	c5 01       	movw	r24, r10
     f48:	b4 01       	movw	r22, r8
     f4a:	0e 94 1d 0a 	call	0x143a	; 0x143a <__floatunsisf>
     f4e:	9b 01       	movw	r18, r22
     f50:	ac 01       	movw	r20, r24
     f52:	c7 01       	movw	r24, r14
     f54:	b6 01       	movw	r22, r12
     f56:	0e 94 81 09 	call	0x1302	; 0x1302 <__subsf3>
     f5a:	20 e0       	ldi	r18, 0x00	; 0
     f5c:	34 e2       	ldi	r19, 0x24	; 36
     f5e:	44 e7       	ldi	r20, 0x74	; 116
     f60:	59 e4       	ldi	r21, 0x49	; 73
     f62:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__mulsf3>
	Number(10u,v_tempNumber_u32,0xffu);
     f66:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__fixunssfsi>
     f6a:	9b 01       	movw	r18, r22
     f6c:	ac 01       	movw	r20, r24
     f6e:	6a e0       	ldi	r22, 0x0A	; 10
     f70:	ce 01       	movw	r24, r28
     f72:	0e 94 d1 06 	call	0xda2	; 0xda2 <_ZN13Character_LCD6NumberEhmh>
}
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	0f 91       	pop	r16
     f7c:	ff 90       	pop	r15
     f7e:	ef 90       	pop	r14
     f80:	df 90       	pop	r13
     f82:	cf 90       	pop	r12
     f84:	bf 90       	pop	r11
     f86:	af 90       	pop	r10
     f88:	9f 90       	pop	r9
     f8a:	8f 90       	pop	r8
     f8c:	08 95       	ret

00000f8e <_ZN13Character_LCD6PrintfEPKchhz>:
#####: In case of printing the variables(8-bit) its recommended to type cast and promote them to uint16_t.
        uint8_t v_Num_u8;
		LCD1.Printf("num1:%u",(uint16_t)v_Num_u8); 		 
***************************************************************************************************/
void Character_LCD :: Printf(const char *argList , uint8_t x, uint8_t y , ... )
{
     f8e:	3f 92       	push	r3
     f90:	4f 92       	push	r4
     f92:	5f 92       	push	r5
     f94:	6f 92       	push	r6
     f96:	7f 92       	push	r7
     f98:	8f 92       	push	r8
     f9a:	9f 92       	push	r9
     f9c:	af 92       	push	r10
     f9e:	bf 92       	push	r11
     fa0:	cf 92       	push	r12
     fa2:	df 92       	push	r13
     fa4:	ef 92       	push	r14
     fa6:	ff 92       	push	r15
     fa8:	0f 93       	push	r16
     faa:	1f 93       	push	r17
     fac:	cf 93       	push	r28
     fae:	df 93       	push	r29
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
     fb4:	ec 88       	ldd	r14, Y+20	; 0x14
     fb6:	fd 88       	ldd	r15, Y+21	; 0x15
     fb8:	0e 89       	ldd	r16, Y+22	; 0x16
     fba:	1f 89       	ldd	r17, Y+23	; 0x17
	GotoXY(x,y);
     fbc:	49 8d       	ldd	r20, Y+25	; 0x19
     fbe:	68 8d       	ldd	r22, Y+24	; 0x18
     fc0:	c7 01       	movw	r24, r14
     fc2:	0e 94 a7 04 	call	0x94e	; 0x94e <_ZN13Character_LCD6GotoXYEhh>

	double v_floatNum_f32;
	


	va_start(argp, argList);
     fc6:	5e 01       	movw	r10, r28
     fc8:	8a e1       	ldi	r24, 0x1A	; 26
     fca:	a8 0e       	add	r10, r24
     fcc:	b1 1c       	adc	r11, r1

	// Loop through the list to extract all the input arguments 
	for(ptr = argList; *ptr != '\0'; ptr++)
     fce:	d8 01       	movw	r26, r16
     fd0:	6c 91       	ld	r22, X
     fd2:	66 23       	and	r22, r22
     fd4:	09 f4       	brne	.+2      	; 0xfd8 <_ZN13Character_LCD6PrintfEPKchhz+0x4a>
     fd6:	09 c1       	rjmp	.+530    	; 0x11ea <_ZN13Character_LCD6PrintfEPKchhz+0x25c>
				   ch = *ptr;
				}
			}
			else
			{
			  v_numOfDigits = 0xffu;
     fd8:	88 24       	eor	r8, r8
     fda:	8a 94       	dec	r8
			
			case 'b':  // Argument type is of binary,Read int and convert to binary 
				v_num_u16 = va_arg(argp, uint16_t);		
				
				if(v_numOfDigits >= 8)
				   v_numOfDigits = 8;
     fdc:	68 94       	set
     fde:	33 24       	eor	r3, r3
     fe0:	33 f8       	bld	r3, 3
		ch= *ptr;
		if(ch == '%')         //Check for '%' as there will be format specifier after it 
		{
		    ptr++;
		    ch = *ptr;
		   if((ch>=0x30) && (ch<=0x39))
     fe2:	91 2c       	mov	r9, r1
	// Loop through the list to extract all the input arguments 
	for(ptr = argList; *ptr != '\0'; ptr++)
	{

		ch= *ptr;
		if(ch == '%')         //Check for '%' as there will be format specifier after it 
     fe4:	65 32       	cpi	r22, 0x25	; 37
     fe6:	09 f0       	breq	.+2      	; 0xfea <_ZN13Character_LCD6PrintfEPKchhz+0x5c>
     fe8:	de c0       	rjmp	.+444    	; 0x11a6 <_ZN13Character_LCD6PrintfEPKchhz+0x218>
		{
		    ptr++;
     fea:	68 01       	movw	r12, r16
     fec:	bf ef       	ldi	r27, 0xFF	; 255
     fee:	cb 1a       	sub	r12, r27
     ff0:	db 0a       	sbc	r13, r27
		    ch = *ptr;
     ff2:	d8 01       	movw	r26, r16
     ff4:	11 96       	adiw	r26, 0x01	; 1
     ff6:	ec 91       	ld	r30, X
     ff8:	11 97       	sbiw	r26, 0x01	; 1
		   if((ch>=0x30) && (ch<=0x39))
     ffa:	80 ed       	ldi	r24, 0xD0	; 208
     ffc:	8e 0f       	add	r24, r30
     ffe:	8a 30       	cpi	r24, 0x0A	; 10
    1000:	08 f0       	brcs	.+2      	; 0x1004 <_ZN13Character_LCD6PrintfEPKchhz+0x76>
    1002:	e8 c0       	rjmp	.+464    	; 0x11d4 <_ZN13Character_LCD6PrintfEPKchhz+0x246>
    1004:	12 96       	adiw	r26, 0x02	; 2
    1006:	09 2d       	mov	r16, r9
    1008:	00 0f       	add	r16, r16
    100a:	80 2f       	mov	r24, r16
    100c:	88 0f       	add	r24, r24
    100e:	88 0f       	add	r24, r24
    1010:	08 0f       	add	r16, r24
    1012:	00 53       	subi	r16, 0x30	; 48
			{
			   v_numOfDigits = 0;
			   while((ch>=0x30) && (ch<=0x39))
			    {
				   v_numOfDigits = (v_numOfDigits * 10) + (ch-0x30);
    1014:	0e 0f       	add	r16, r30
				   ptr++;
    1016:	6d 01       	movw	r12, r26
				   ch = *ptr;
    1018:	ed 91       	ld	r30, X+
		    ptr++;
		    ch = *ptr;
		   if((ch>=0x30) && (ch<=0x39))
			{
			   v_numOfDigits = 0;
			   while((ch>=0x30) && (ch<=0x39))
    101a:	80 ed       	ldi	r24, 0xD0	; 208
    101c:	8e 0f       	add	r24, r30
    101e:	8a 30       	cpi	r24, 0x0A	; 10
    1020:	98 f3       	brcs	.-26     	; 0x1008 <_ZN13Character_LCD6PrintfEPKchhz+0x7a>
			{
			  v_numOfDigits = 0xffu;
			}				


			switch(ch)       // Decode the type of the argument 
    1022:	8e 2f       	mov	r24, r30
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	fc 01       	movw	r30, r24
    1028:	b5 97       	sbiw	r30, 0x25	; 37
    102a:	e4 35       	cpi	r30, 0x54	; 84
    102c:	f1 05       	cpc	r31, r1
    102e:	08 f0       	brcs	.+2      	; 0x1032 <_ZN13Character_LCD6PrintfEPKchhz+0xa4>
    1030:	be c0       	rjmp	.+380    	; 0x11ae <_ZN13Character_LCD6PrintfEPKchhz+0x220>
    1032:	e6 5d       	subi	r30, 0xD6	; 214
    1034:	ff 4f       	sbci	r31, 0xFF	; 255
    1036:	0c 94 3a 0b 	jmp	0x1674	; 0x1674 <__tablejump2__>
			{
			case 'C':
			case 'c':     // Argument type is of char, hence read char data from the argp 
				ch = va_arg(argp, int);
    103a:	85 01       	movw	r16, r10
    103c:	0e 5f       	subi	r16, 0xFE	; 254
    103e:	1f 4f       	sbci	r17, 0xFF	; 255
				SendChar(ch);
    1040:	f5 01       	movw	r30, r10
    1042:	60 81       	ld	r22, Z
    1044:	c7 01       	movw	r24, r14
    1046:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_ZN13Character_LCD8SendCharEh>

			switch(ch)       // Decode the type of the argument 
			{
			case 'C':
			case 'c':     // Argument type is of char, hence read char data from the argp 
				ch = va_arg(argp, int);
    104a:	58 01       	movw	r10, r16
				SendChar(ch);
				break;
    104c:	b0 c0       	rjmp	.+352    	; 0x11ae <_ZN13Character_LCD6PrintfEPKchhz+0x220>
				   ch = *ptr;
				}
			}
			else
			{
			  v_numOfDigits = 0xffu;
    104e:	08 2d       	mov	r16, r8
				ch = va_arg(argp, int);
				SendChar(ch);
				break;

			case 'd':    // Argument type is of signed integer, hence read 16bit data from the argp 
				v_num_s16 = va_arg(argp, signed int);
    1050:	f5 01       	movw	r30, r10
    1052:	60 80       	ld	r6, Z
    1054:	71 80       	ldd	r7, Z+1	; 0x01
    1056:	f2 e0       	ldi	r31, 0x02	; 2
    1058:	af 0e       	add	r10, r31
    105a:	b1 1c       	adc	r11, r1
				if(v_num_s16<0)
    105c:	77 20       	and	r7, r7
    105e:	3c f4       	brge	.+14     	; 0x106e <_ZN13Character_LCD6PrintfEPKchhz+0xe0>
				 { // If the number is -ve then display the 2's complement along with '-' sign  
				   v_num_s16 = -v_num_s16;
    1060:	71 94       	neg	r7
    1062:	61 94       	neg	r6
    1064:	71 08       	sbc	r7, r1
				   SendChar('-');
    1066:	6d e2       	ldi	r22, 0x2D	; 45
    1068:	c7 01       	movw	r24, r14
    106a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_ZN13Character_LCD8SendCharEh>
				 }
				Number(10u,v_num_s16,v_numOfDigits);
    106e:	93 01       	movw	r18, r6
    1070:	77 0c       	add	r7, r7
    1072:	44 0b       	sbc	r20, r20
    1074:	55 0b       	sbc	r21, r21
    1076:	6a e0       	ldi	r22, 0x0A	; 10
    1078:	c7 01       	movw	r24, r14
    107a:	0e 94 d1 06 	call	0xda2	; 0xda2 <_ZN13Character_LCD6NumberEhmh>
				break;
    107e:	97 c0       	rjmp	.+302    	; 0x11ae <_ZN13Character_LCD6PrintfEPKchhz+0x220>
				   ch = *ptr;
				}
			}
			else
			{
			  v_numOfDigits = 0xffu;
    1080:	08 2d       	mov	r16, r8
				 }
				Number(10u,v_num_s16,v_numOfDigits);
				break;
				
			case 'D':    // Argument type is of integer, hence read 16bit data from the argp 
				v_num_s32 = va_arg(argp, signed long int);				
    1082:	f5 01       	movw	r30, r10
    1084:	40 80       	ld	r4, Z
    1086:	51 80       	ldd	r5, Z+1	; 0x01
    1088:	62 80       	ldd	r6, Z+2	; 0x02
    108a:	73 80       	ldd	r7, Z+3	; 0x03
    108c:	84 e0       	ldi	r24, 0x04	; 4
    108e:	a8 0e       	add	r10, r24
    1090:	b1 1c       	adc	r11, r1
				if(v_num_s32<0)
    1092:	77 20       	and	r7, r7
    1094:	64 f4       	brge	.+24     	; 0x10ae <_ZN13Character_LCD6PrintfEPKchhz+0x120>
				 { // If the number is -ve then display the 2's complement along with '-' sign 
				   v_num_s32 = -v_num_s32;
    1096:	70 94       	com	r7
    1098:	60 94       	com	r6
    109a:	50 94       	com	r5
    109c:	40 94       	com	r4
    109e:	41 1c       	adc	r4, r1
    10a0:	51 1c       	adc	r5, r1
    10a2:	61 1c       	adc	r6, r1
    10a4:	71 1c       	adc	r7, r1
				   SendChar('-');
    10a6:	6d e2       	ldi	r22, 0x2D	; 45
    10a8:	c7 01       	movw	r24, r14
    10aa:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_ZN13Character_LCD8SendCharEh>
				 }
				Number(10u,v_num_s32,v_numOfDigits);			
    10ae:	a3 01       	movw	r20, r6
    10b0:	92 01       	movw	r18, r4
    10b2:	6a e0       	ldi	r22, 0x0A	; 10
    10b4:	c7 01       	movw	r24, r14
    10b6:	0e 94 d1 06 	call	0xda2	; 0xda2 <_ZN13Character_LCD6NumberEhmh>
				break;	
    10ba:	79 c0       	rjmp	.+242    	; 0x11ae <_ZN13Character_LCD6PrintfEPKchhz+0x220>
				   ch = *ptr;
				}
			}
			else
			{
			  v_numOfDigits = 0xffu;
    10bc:	08 2d       	mov	r16, r8
				 }
				Number(10u,v_num_s32,v_numOfDigits);			
				break;	

			case 'u':    // Argument type is of unsigned integer, hence read 16bit unsigned data 
				v_num_u16 = va_arg(argp, uint16_t);			
    10be:	f5 01       	movw	r30, r10
				Number(10u,v_num_u16,v_numOfDigits);				
    10c0:	20 81       	ld	r18, Z
    10c2:	31 81       	ldd	r19, Z+1	; 0x01
    10c4:	a2 e0       	ldi	r26, 0x02	; 2
    10c6:	aa 0e       	add	r10, r26
    10c8:	b1 1c       	adc	r11, r1
    10ca:	40 e0       	ldi	r20, 0x00	; 0
    10cc:	50 e0       	ldi	r21, 0x00	; 0
    10ce:	6a e0       	ldi	r22, 0x0A	; 10
    10d0:	c7 01       	movw	r24, r14
    10d2:	0e 94 d1 06 	call	0xda2	; 0xda2 <_ZN13Character_LCD6NumberEhmh>
				break;
    10d6:	6b c0       	rjmp	.+214    	; 0x11ae <_ZN13Character_LCD6PrintfEPKchhz+0x220>
				   ch = *ptr;
				}
			}
			else
			{
			  v_numOfDigits = 0xffu;
    10d8:	08 2d       	mov	r16, r8
				v_num_u16 = va_arg(argp, uint16_t);			
				Number(10u,v_num_u16,v_numOfDigits);				
				break;
			
			case 'U':    // Argument type is of integer, hence read 32bit unsigend data 
				v_num_u32 = va_arg(argp, uint32_t);			
    10da:	f5 01       	movw	r30, r10
				Number(10u,v_num_u32,v_numOfDigits);				
    10dc:	20 81       	ld	r18, Z
    10de:	31 81       	ldd	r19, Z+1	; 0x01
    10e0:	42 81       	ldd	r20, Z+2	; 0x02
    10e2:	53 81       	ldd	r21, Z+3	; 0x03
    10e4:	b4 e0       	ldi	r27, 0x04	; 4
    10e6:	ab 0e       	add	r10, r27
    10e8:	b1 1c       	adc	r11, r1
    10ea:	6a e0       	ldi	r22, 0x0A	; 10
    10ec:	c7 01       	movw	r24, r14
    10ee:	0e 94 d1 06 	call	0xda2	; 0xda2 <_ZN13Character_LCD6NumberEhmh>
				break;			
    10f2:	5d c0       	rjmp	.+186    	; 0x11ae <_ZN13Character_LCD6PrintfEPKchhz+0x220>
				   ch = *ptr;
				}
			}
			else
			{
			  v_numOfDigits = 0xffu;
    10f4:	08 2d       	mov	r16, r8
				v_num_u32 = va_arg(argp, uint32_t);			
				Number(10u,v_num_u32,v_numOfDigits);				
				break;			

			case 'x':  // Argument type is of hex, hence hexadecimal data from the argp 
				v_num_u16 = va_arg(argp, uint16_t);				
    10f6:	f5 01       	movw	r30, r10
				Number(16u,v_num_u16,v_numOfDigits);			
    10f8:	20 81       	ld	r18, Z
    10fa:	31 81       	ldd	r19, Z+1	; 0x01
    10fc:	e2 e0       	ldi	r30, 0x02	; 2
    10fe:	ae 0e       	add	r10, r30
    1100:	b1 1c       	adc	r11, r1
    1102:	40 e0       	ldi	r20, 0x00	; 0
    1104:	50 e0       	ldi	r21, 0x00	; 0
    1106:	60 e1       	ldi	r22, 0x10	; 16
    1108:	c7 01       	movw	r24, r14
    110a:	0e 94 d1 06 	call	0xda2	; 0xda2 <_ZN13Character_LCD6NumberEhmh>
				break;
    110e:	4f c0       	rjmp	.+158    	; 0x11ae <_ZN13Character_LCD6PrintfEPKchhz+0x220>
				   ch = *ptr;
				}
			}
			else
			{
			  v_numOfDigits = 0xffu;
    1110:	08 2d       	mov	r16, r8
				v_num_u16 = va_arg(argp, uint16_t);				
				Number(16u,v_num_u16,v_numOfDigits);			
				break;

			case 'X':  // Argument type is of hex, hence hexadecimal data from the argp 
				v_num_u32 = va_arg(argp, uint32_t);						
    1112:	f5 01       	movw	r30, r10
				Number(16u,v_num_u32,v_numOfDigits);				
    1114:	20 81       	ld	r18, Z
    1116:	31 81       	ldd	r19, Z+1	; 0x01
    1118:	42 81       	ldd	r20, Z+2	; 0x02
    111a:	53 81       	ldd	r21, Z+3	; 0x03
    111c:	f4 e0       	ldi	r31, 0x04	; 4
    111e:	af 0e       	add	r10, r31
    1120:	b1 1c       	adc	r11, r1
    1122:	60 e1       	ldi	r22, 0x10	; 16
    1124:	c7 01       	movw	r24, r14
    1126:	0e 94 d1 06 	call	0xda2	; 0xda2 <_ZN13Character_LCD6NumberEhmh>
				break;
    112a:	41 c0       	rjmp	.+130    	; 0x11ae <_ZN13Character_LCD6PrintfEPKchhz+0x220>
				   ch = *ptr;
				}
			}
			else
			{
			  v_numOfDigits = 0xffu;
    112c:	08 2d       	mov	r16, r8
				Number(16u,v_num_u32,v_numOfDigits);				
				break;

			
			case 'b':  // Argument type is of binary,Read int and convert to binary 
				v_num_u16 = va_arg(argp, uint16_t);		
    112e:	f5 01       	movw	r30, r10
    1130:	20 81       	ld	r18, Z
    1132:	31 81       	ldd	r19, Z+1	; 0x01
    1134:	82 e0       	ldi	r24, 0x02	; 2
    1136:	a8 0e       	add	r10, r24
    1138:	b1 1c       	adc	r11, r1
				
				if(v_numOfDigits >= 8)
    113a:	08 30       	cpi	r16, 0x08	; 8
    113c:	08 f0       	brcs	.+2      	; 0x1140 <_ZN13Character_LCD6PrintfEPKchhz+0x1b2>
				   v_numOfDigits = 8;
    113e:	03 2d       	mov	r16, r3
               
				Number(2u,v_num_u16,v_numOfDigits);			
    1140:	40 e0       	ldi	r20, 0x00	; 0
    1142:	50 e0       	ldi	r21, 0x00	; 0
    1144:	62 e0       	ldi	r22, 0x02	; 2
    1146:	c7 01       	movw	r24, r14
    1148:	0e 94 d1 06 	call	0xda2	; 0xda2 <_ZN13Character_LCD6NumberEhmh>
				break;
    114c:	30 c0       	rjmp	.+96     	; 0x11ae <_ZN13Character_LCD6PrintfEPKchhz+0x220>

			case 'B':  // Argument type is of binary,Read int and convert to binary 
				v_num_u32 = va_arg(argp, uint32_t);			
    114e:	f5 01       	movw	r30, r10
    1150:	20 81       	ld	r18, Z
    1152:	31 81       	ldd	r19, Z+1	; 0x01
    1154:	42 81       	ldd	r20, Z+2	; 0x02
    1156:	53 81       	ldd	r21, Z+3	; 0x03
    1158:	a4 e0       	ldi	r26, 0x04	; 4
    115a:	aa 0e       	add	r10, r26
    115c:	b1 1c       	adc	r11, r1
                
				if(v_numOfDigits == 0xffu)
    115e:	0f 3f       	cpi	r16, 0xFF	; 255
    1160:	09 f4       	brne	.+2      	; 0x1164 <_ZN13Character_LCD6PrintfEPKchhz+0x1d6>
				   v_numOfDigits = 32;		
    1162:	00 e2       	ldi	r16, 0x20	; 32
               
				Number(2u,v_num_u32,v_numOfDigits);				
    1164:	62 e0       	ldi	r22, 0x02	; 2
    1166:	c7 01       	movw	r24, r14
    1168:	0e 94 d1 06 	call	0xda2	; 0xda2 <_ZN13Character_LCD6NumberEhmh>
				break;
    116c:	20 c0       	rjmp	.+64     	; 0x11ae <_ZN13Character_LCD6PrintfEPKchhz+0x220>


			case 'F':
			case 'f': // Argument type is of float, hence read double data from the argp 
			
				v_floatNum_f32 = va_arg(argp, double);				
    116e:	f5 01       	movw	r30, r10
				FloatNumber(v_floatNum_f32);
    1170:	40 81       	ld	r20, Z
    1172:	51 81       	ldd	r21, Z+1	; 0x01
    1174:	62 81       	ldd	r22, Z+2	; 0x02
    1176:	73 81       	ldd	r23, Z+3	; 0x03
    1178:	b4 e0       	ldi	r27, 0x04	; 4
    117a:	ab 0e       	add	r10, r27
    117c:	b1 1c       	adc	r11, r1
    117e:	c7 01       	movw	r24, r14
    1180:	0e 94 84 07 	call	0xf08	; 0xf08 <_ZN13Character_LCD11FloatNumberEf>
            
				break;                
    1184:	14 c0       	rjmp	.+40     	; 0x11ae <_ZN13Character_LCD6PrintfEPKchhz+0x220>


			case 'S':
			case 's': // Argument type is of string, hence get the pointer to sting passed 
				str = va_arg(argp, char *);
    1186:	85 01       	movw	r16, r10
    1188:	0e 5f       	subi	r16, 0xFE	; 254
    118a:	1f 4f       	sbci	r17, 0xFF	; 255
				SendString(str);			
    118c:	f5 01       	movw	r30, r10
    118e:	60 81       	ld	r22, Z
    1190:	71 81       	ldd	r23, Z+1	; 0x01
    1192:	c7 01       	movw	r24, r14
    1194:	0e 94 0e 03 	call	0x61c	; 0x61c <_ZN13Character_LCD10SendStringEPc>
				break;                


			case 'S':
			case 's': // Argument type is of string, hence get the pointer to sting passed 
				str = va_arg(argp, char *);
    1198:	58 01       	movw	r10, r16
				SendString(str);			
				break;
    119a:	09 c0       	rjmp	.+18     	; 0x11ae <_ZN13Character_LCD6PrintfEPKchhz+0x220>

			case '%':
				SendChar('%');
    119c:	65 e2       	ldi	r22, 0x25	; 37
    119e:	c7 01       	movw	r24, r14
    11a0:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_ZN13Character_LCD8SendCharEh>
				break;
    11a4:	04 c0       	rjmp	.+8      	; 0x11ae <_ZN13Character_LCD6PrintfEPKchhz+0x220>
			}
		}
		else
		{
			// As '%' is not detected transmit the char passed 
			SendChar(ch);
    11a6:	c7 01       	movw	r24, r14
    11a8:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_ZN13Character_LCD8SendCharEh>
    11ac:	68 01       	movw	r12, r16


	va_start(argp, argList);

	// Loop through the list to extract all the input arguments 
	for(ptr = argList; *ptr != '\0'; ptr++)
    11ae:	86 01       	movw	r16, r12
    11b0:	0f 5f       	subi	r16, 0xFF	; 255
    11b2:	1f 4f       	sbci	r17, 0xFF	; 255
    11b4:	d6 01       	movw	r26, r12
    11b6:	11 96       	adiw	r26, 0x01	; 1
    11b8:	6c 91       	ld	r22, X
    11ba:	61 11       	cpse	r22, r1
    11bc:	13 cf       	rjmp	.-474    	; 0xfe4 <_ZN13Character_LCD6PrintfEPKchhz+0x56>
    11be:	15 c0       	rjmp	.+42     	; 0x11ea <_ZN13Character_LCD6PrintfEPKchhz+0x25c>
               
				Number(2u,v_num_u16,v_numOfDigits);			
				break;

			case 'B':  // Argument type is of binary,Read int and convert to binary 
				v_num_u32 = va_arg(argp, uint32_t);			
    11c0:	f5 01       	movw	r30, r10
    11c2:	20 81       	ld	r18, Z
    11c4:	31 81       	ldd	r19, Z+1	; 0x01
    11c6:	42 81       	ldd	r20, Z+2	; 0x02
    11c8:	53 81       	ldd	r21, Z+3	; 0x03
    11ca:	b4 e0       	ldi	r27, 0x04	; 4
    11cc:	ab 0e       	add	r10, r27
    11ce:	b1 1c       	adc	r11, r1
                
				if(v_numOfDigits == 0xffu)
				   v_numOfDigits = 32;		
    11d0:	00 e2       	ldi	r16, 0x20	; 32
    11d2:	c8 cf       	rjmp	.-112    	; 0x1164 <_ZN13Character_LCD6PrintfEPKchhz+0x1d6>
			{
			  v_numOfDigits = 0xffu;
			}				


			switch(ch)       // Decode the type of the argument 
    11d4:	8e 2f       	mov	r24, r30
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	fc 01       	movw	r30, r24
    11da:	b5 97       	sbiw	r30, 0x25	; 37
    11dc:	e4 35       	cpi	r30, 0x54	; 84
    11de:	f1 05       	cpc	r31, r1
    11e0:	30 f7       	brcc	.-52     	; 0x11ae <_ZN13Character_LCD6PrintfEPKchhz+0x220>
    11e2:	e2 58       	subi	r30, 0x82	; 130
    11e4:	ff 4f       	sbci	r31, 0xFF	; 255
    11e6:	0c 94 3a 0b 	jmp	0x1674	; 0x1674 <__tablejump2__>
			SendChar(ch);
		}
	}

	va_end(argp);
}
    11ea:	df 91       	pop	r29
    11ec:	cf 91       	pop	r28
    11ee:	1f 91       	pop	r17
    11f0:	0f 91       	pop	r16
    11f2:	ff 90       	pop	r15
    11f4:	ef 90       	pop	r14
    11f6:	df 90       	pop	r13
    11f8:	cf 90       	pop	r12
    11fa:	bf 90       	pop	r11
    11fc:	af 90       	pop	r10
    11fe:	9f 90       	pop	r9
    1200:	8f 90       	pop	r8
    1202:	7f 90       	pop	r7
    1204:	6f 90       	pop	r6
    1206:	5f 90       	pop	r5
    1208:	4f 90       	pop	r4
    120a:	3f 90       	pop	r3
    120c:	08 95       	ret

0000120e <main>:
#define Prescaler 1
#define TWBR_val ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)

void i2c_init(void)
{
	TWBR = (uint8_t)TWBR_val;
    120e:	80 e2       	ldi	r24, 0x20	; 32
    1210:	80 b9       	out	0x00, r24	; 0
Character_LCD LCD1;

int main(void)
{
	i2c_init();
	DDRA = 0;
    1212:	1a ba       	out	0x1a, r1	; 26
	DDRB = 0;
    1214:	17 ba       	out	0x17, r1	; 23


	public:
	Character_LCD ();
	
	void SetRSPin(uint8_t ADD_PORT , uint8_t ADD_DDR , uint8_t Bit) { RS_PORT = ADD_PORT ; RS_DDR = ADD_DDR ; RS_Bit = Bit ; }
    1216:	e6 e6       	ldi	r30, 0x66	; 102
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	92 e1       	ldi	r25, 0x12	; 18
    121c:	90 83       	st	Z, r25
    121e:	81 e1       	ldi	r24, 0x11	; 17
    1220:	81 83       	std	Z+1, r24	; 0x01
    1222:	12 82       	std	Z+2, r1	; 0x02
	void SetRWPin(uint8_t ADD_PORT , uint8_t ADD_DDR , uint8_t Bit) { RW_PORT = ADD_PORT ; RW_DDR = ADD_DDR ; RW_Bit = Bit ; }
    1224:	93 83       	std	Z+3, r25	; 0x03
    1226:	84 83       	std	Z+4, r24	; 0x04
    1228:	21 e0       	ldi	r18, 0x01	; 1
    122a:	25 83       	std	Z+5, r18	; 0x05
	void SetEPin(uint8_t ADD_PORT , uint8_t ADD_DDR , uint8_t Bit) { E_PORT = ADD_PORT ; E_DDR = ADD_DDR ; E_Bit = Bit ; }
    122c:	96 83       	std	Z+6, r25	; 0x06
    122e:	87 83       	std	Z+7, r24	; 0x07
    1230:	22 e0       	ldi	r18, 0x02	; 2
    1232:	20 87       	std	Z+8, r18	; 0x08
	void SetD4Pin(uint8_t ADD_PORT , uint8_t ADD_DDR , uint8_t Bit) { D4_PORT = ADD_PORT ; D4_DDR = ADD_DDR ; D4_Bit = Bit ; }
    1234:	91 87       	std	Z+9, r25	; 0x09
    1236:	82 87       	std	Z+10, r24	; 0x0a
    1238:	23 e0       	ldi	r18, 0x03	; 3
    123a:	23 87       	std	Z+11, r18	; 0x0b
	void SetD5Pin(uint8_t ADD_PORT , uint8_t ADD_DDR , uint8_t Bit) { D5_PORT = ADD_PORT ; D5_DDR = ADD_DDR ; D5_Bit = Bit ; }
    123c:	94 87       	std	Z+12, r25	; 0x0c
    123e:	85 87       	std	Z+13, r24	; 0x0d
    1240:	24 e0       	ldi	r18, 0x04	; 4
    1242:	26 87       	std	Z+14, r18	; 0x0e
	void SetD6Pin(uint8_t ADD_PORT , uint8_t ADD_DDR , uint8_t Bit) { D6_PORT = ADD_PORT ; D6_DDR = ADD_DDR ; D6_Bit = Bit ; }
    1244:	97 87       	std	Z+15, r25	; 0x0f
    1246:	80 8b       	std	Z+16, r24	; 0x10
    1248:	25 e0       	ldi	r18, 0x05	; 5
    124a:	21 8b       	std	Z+17, r18	; 0x11
	void SetD7Pin(uint8_t ADD_PORT , uint8_t ADD_DDR , uint8_t Bit) { D7_PORT = ADD_PORT ; D7_DDR = ADD_DDR ; D7_Bit = Bit ; }
    124c:	92 8b       	std	Z+18, r25	; 0x12
    124e:	83 8b       	std	Z+19, r24	; 0x13
    1250:	86 e0       	ldi	r24, 0x06	; 6
    1252:	84 8b       	std	Z+20, r24	; 0x14
			LCD1.SetEPin  (ADD(PORTD),ADD(DDRD),2);
			LCD1.SetD4Pin (ADD(PORTD),ADD(DDRD),3);
			LCD1.SetD5Pin (ADD(PORTD),ADD(DDRD),4);
			LCD1.SetD6Pin (ADD(PORTD),ADD(DDRD),5);
			LCD1.SetD7Pin (ADD(PORTD),ADD(DDRD),6);
			LCD1.Init(16,2);
    1254:	42 e0       	ldi	r20, 0x02	; 2
    1256:	60 e1       	ldi	r22, 0x10	; 16
    1258:	cf 01       	movw	r24, r30
    125a:	0e 94 bc 04 	call	0x978	; 0x978 <_ZN13Character_LCD4InitEhh>
    /* Replace with your application code */
    while (1) 
    {
		
		LCD1.Clr();
		LCD1.Printf("test",0,0);
    125e:	00 e6       	ldi	r16, 0x60	; 96
    1260:	10 e0       	ldi	r17, 0x00	; 0
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1262:	c4 e9       	ldi	r28, 0x94	; 148
	
    /* Replace with your application code */
    while (1) 
    {
		
		LCD1.Clr();
    1264:	86 e6       	ldi	r24, 0x66	; 102
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	0e 94 9d 04 	call	0x93a	; 0x93a <_ZN13Character_LCD3ClrEv>
		LCD1.Printf("test",0,0);
    126c:	1f 92       	push	r1
    126e:	1f 92       	push	r1
    1270:	1f 93       	push	r17
    1272:	0f 93       	push	r16
    1274:	86 e6       	ldi	r24, 0x66	; 102
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	9f 93       	push	r25
    127a:	8f 93       	push	r24
    127c:	0e 94 c7 07 	call	0xf8e	; 0xf8e <_ZN13Character_LCD6PrintfEPKchhz>
		while(PINB ==1){
    1280:	86 b3       	in	r24, 0x16	; 22
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	0f 90       	pop	r0
    128e:	81 30       	cpi	r24, 0x01	; 1
    1290:	49 f7       	brne	.-46     	; 0x1264 <main+0x56>
		char key = 0x2f;
		i2c_start(0x10<<1 | I2C_WRITE);
    1292:	80 e2       	ldi	r24, 0x20	; 32
    1294:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_Z9i2c_starth>
		i2c_write(PINA);
    1298:	89 b3       	in	r24, 0x19	; 25
    129a:	0e 94 1a 01 	call	0x234	; 0x234 <_Z9i2c_writeh>
    129e:	c6 bf       	out	0x36, r28	; 54
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12a0:	8f e1       	ldi	r24, 0x1F	; 31
    12a2:	9e e4       	ldi	r25, 0x4E	; 78
    12a4:	01 97       	sbiw	r24, 0x01	; 1
    12a6:	f1 f7       	brne	.-4      	; 0x12a4 <main+0x96>
    12a8:	00 c0       	rjmp	.+0      	; 0x12aa <main+0x9c>
    12aa:	00 00       	nop
		i2c_stop();
		_delay_ms(10);
		i2c_start(0x10<<1 | I2C_READ);
    12ac:	81 e2       	ldi	r24, 0x21	; 33
    12ae:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_Z9i2c_starth>
		data_received = i2c_read_ack();
    12b2:	0e 94 27 01 	call	0x24e	; 0x24e <_Z12i2c_read_ackv>
    12b6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <data_received>
		LCD1.Clr();
    12ba:	86 e6       	ldi	r24, 0x66	; 102
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	0e 94 9d 04 	call	0x93a	; 0x93a <_ZN13Character_LCD3ClrEv>
		LCD1.SendChar(data_received);
    12c2:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <data_received>
    12c6:	86 e6       	ldi	r24, 0x66	; 102
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_ZN13Character_LCD8SendCharEh>
		LCD1.SendChar(PINA);
    12ce:	69 b3       	in	r22, 0x19	; 25
    12d0:	86 e6       	ldi	r24, 0x66	; 102
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_ZN13Character_LCD8SendCharEh>
		i2c_read_nack();
    12d8:	0e 94 2e 01 	call	0x25c	; 0x25c <_Z13i2c_read_nackv>
    12dc:	c6 bf       	out	0x36, r28	; 54
    12de:	9f ef       	ldi	r25, 0xFF	; 255
    12e0:	20 e7       	ldi	r18, 0x70	; 112
    12e2:	82 e0       	ldi	r24, 0x02	; 2
    12e4:	91 50       	subi	r25, 0x01	; 1
    12e6:	20 40       	sbci	r18, 0x00	; 0
    12e8:	80 40       	sbci	r24, 0x00	; 0
    12ea:	e1 f7       	brne	.-8      	; 0x12e4 <main+0xd6>
    12ec:	00 c0       	rjmp	.+0      	; 0x12ee <main+0xe0>
    12ee:	00 00       	nop
    while (1) 
    {
		
		LCD1.Clr();
		LCD1.Printf("test",0,0);
		while(PINB ==1){
    12f0:	86 b3       	in	r24, 0x16	; 22
    12f2:	81 30       	cpi	r24, 0x01	; 1
    12f4:	71 f2       	breq	.-100    	; 0x1292 <main+0x84>
    12f6:	b6 cf       	rjmp	.-148    	; 0x1264 <main+0x56>

000012f8 <_GLOBAL__sub_I__Z8i2c_initv>:
#include <D:\GitHub\LED-I2C\LED-I2C Lib\i2c_master.c>
#include <D:\GitHub\LCD-Lib-Cplusplus\LIB\CharacterLCD.h>
#include <D:\GitHub\LCD-Lib-Cplusplus\LIB\CharacterLCD.cpp>
char data_received;

Character_LCD LCD1;
    12f8:	86 e6       	ldi	r24, 0x66	; 102
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	0e 94 35 01 	call	0x26a	; 0x26a <_ZN13Character_LCDC1Ev>
    1300:	08 95       	ret

00001302 <__subsf3>:
    1302:	50 58       	subi	r21, 0x80	; 128

00001304 <__addsf3>:
    1304:	bb 27       	eor	r27, r27
    1306:	aa 27       	eor	r26, r26
    1308:	0e 94 99 09 	call	0x1332	; 0x1332 <__addsf3x>
    130c:	0c 94 71 0a 	jmp	0x14e2	; 0x14e2 <__fp_round>
    1310:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__fp_pscA>
    1314:	38 f0       	brcs	.+14     	; 0x1324 <__addsf3+0x20>
    1316:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <__fp_pscB>
    131a:	20 f0       	brcs	.+8      	; 0x1324 <__addsf3+0x20>
    131c:	39 f4       	brne	.+14     	; 0x132c <__addsf3+0x28>
    131e:	9f 3f       	cpi	r25, 0xFF	; 255
    1320:	19 f4       	brne	.+6      	; 0x1328 <__addsf3+0x24>
    1322:	26 f4       	brtc	.+8      	; 0x132c <__addsf3+0x28>
    1324:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__fp_nan>
    1328:	0e f4       	brtc	.+2      	; 0x132c <__addsf3+0x28>
    132a:	e0 95       	com	r30
    132c:	e7 fb       	bst	r30, 7
    132e:	0c 94 5a 0a 	jmp	0x14b4	; 0x14b4 <__fp_inf>

00001332 <__addsf3x>:
    1332:	e9 2f       	mov	r30, r25
    1334:	0e 94 82 0a 	call	0x1504	; 0x1504 <__fp_split3>
    1338:	58 f3       	brcs	.-42     	; 0x1310 <__addsf3+0xc>
    133a:	ba 17       	cp	r27, r26
    133c:	62 07       	cpc	r22, r18
    133e:	73 07       	cpc	r23, r19
    1340:	84 07       	cpc	r24, r20
    1342:	95 07       	cpc	r25, r21
    1344:	20 f0       	brcs	.+8      	; 0x134e <__addsf3x+0x1c>
    1346:	79 f4       	brne	.+30     	; 0x1366 <__addsf3x+0x34>
    1348:	a6 f5       	brtc	.+104    	; 0x13b2 <__addsf3x+0x80>
    134a:	0c 94 a4 0a 	jmp	0x1548	; 0x1548 <__fp_zero>
    134e:	0e f4       	brtc	.+2      	; 0x1352 <__addsf3x+0x20>
    1350:	e0 95       	com	r30
    1352:	0b 2e       	mov	r0, r27
    1354:	ba 2f       	mov	r27, r26
    1356:	a0 2d       	mov	r26, r0
    1358:	0b 01       	movw	r0, r22
    135a:	b9 01       	movw	r22, r18
    135c:	90 01       	movw	r18, r0
    135e:	0c 01       	movw	r0, r24
    1360:	ca 01       	movw	r24, r20
    1362:	a0 01       	movw	r20, r0
    1364:	11 24       	eor	r1, r1
    1366:	ff 27       	eor	r31, r31
    1368:	59 1b       	sub	r21, r25
    136a:	99 f0       	breq	.+38     	; 0x1392 <__addsf3x+0x60>
    136c:	59 3f       	cpi	r21, 0xF9	; 249
    136e:	50 f4       	brcc	.+20     	; 0x1384 <__addsf3x+0x52>
    1370:	50 3e       	cpi	r21, 0xE0	; 224
    1372:	68 f1       	brcs	.+90     	; 0x13ce <__addsf3x+0x9c>
    1374:	1a 16       	cp	r1, r26
    1376:	f0 40       	sbci	r31, 0x00	; 0
    1378:	a2 2f       	mov	r26, r18
    137a:	23 2f       	mov	r18, r19
    137c:	34 2f       	mov	r19, r20
    137e:	44 27       	eor	r20, r20
    1380:	58 5f       	subi	r21, 0xF8	; 248
    1382:	f3 cf       	rjmp	.-26     	; 0x136a <__addsf3x+0x38>
    1384:	46 95       	lsr	r20
    1386:	37 95       	ror	r19
    1388:	27 95       	ror	r18
    138a:	a7 95       	ror	r26
    138c:	f0 40       	sbci	r31, 0x00	; 0
    138e:	53 95       	inc	r21
    1390:	c9 f7       	brne	.-14     	; 0x1384 <__addsf3x+0x52>
    1392:	7e f4       	brtc	.+30     	; 0x13b2 <__addsf3x+0x80>
    1394:	1f 16       	cp	r1, r31
    1396:	ba 0b       	sbc	r27, r26
    1398:	62 0b       	sbc	r22, r18
    139a:	73 0b       	sbc	r23, r19
    139c:	84 0b       	sbc	r24, r20
    139e:	ba f0       	brmi	.+46     	; 0x13ce <__addsf3x+0x9c>
    13a0:	91 50       	subi	r25, 0x01	; 1
    13a2:	a1 f0       	breq	.+40     	; 0x13cc <__addsf3x+0x9a>
    13a4:	ff 0f       	add	r31, r31
    13a6:	bb 1f       	adc	r27, r27
    13a8:	66 1f       	adc	r22, r22
    13aa:	77 1f       	adc	r23, r23
    13ac:	88 1f       	adc	r24, r24
    13ae:	c2 f7       	brpl	.-16     	; 0x13a0 <__addsf3x+0x6e>
    13b0:	0e c0       	rjmp	.+28     	; 0x13ce <__addsf3x+0x9c>
    13b2:	ba 0f       	add	r27, r26
    13b4:	62 1f       	adc	r22, r18
    13b6:	73 1f       	adc	r23, r19
    13b8:	84 1f       	adc	r24, r20
    13ba:	48 f4       	brcc	.+18     	; 0x13ce <__addsf3x+0x9c>
    13bc:	87 95       	ror	r24
    13be:	77 95       	ror	r23
    13c0:	67 95       	ror	r22
    13c2:	b7 95       	ror	r27
    13c4:	f7 95       	ror	r31
    13c6:	9e 3f       	cpi	r25, 0xFE	; 254
    13c8:	08 f0       	brcs	.+2      	; 0x13cc <__addsf3x+0x9a>
    13ca:	b0 cf       	rjmp	.-160    	; 0x132c <__addsf3+0x28>
    13cc:	93 95       	inc	r25
    13ce:	88 0f       	add	r24, r24
    13d0:	08 f0       	brcs	.+2      	; 0x13d4 <__addsf3x+0xa2>
    13d2:	99 27       	eor	r25, r25
    13d4:	ee 0f       	add	r30, r30
    13d6:	97 95       	ror	r25
    13d8:	87 95       	ror	r24
    13da:	08 95       	ret

000013dc <__fixunssfsi>:
    13dc:	0e 94 8a 0a 	call	0x1514	; 0x1514 <__fp_splitA>
    13e0:	88 f0       	brcs	.+34     	; 0x1404 <__fixunssfsi+0x28>
    13e2:	9f 57       	subi	r25, 0x7F	; 127
    13e4:	98 f0       	brcs	.+38     	; 0x140c <__fixunssfsi+0x30>
    13e6:	b9 2f       	mov	r27, r25
    13e8:	99 27       	eor	r25, r25
    13ea:	b7 51       	subi	r27, 0x17	; 23
    13ec:	b0 f0       	brcs	.+44     	; 0x141a <__fixunssfsi+0x3e>
    13ee:	e1 f0       	breq	.+56     	; 0x1428 <__fixunssfsi+0x4c>
    13f0:	66 0f       	add	r22, r22
    13f2:	77 1f       	adc	r23, r23
    13f4:	88 1f       	adc	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	1a f0       	brmi	.+6      	; 0x1400 <__fixunssfsi+0x24>
    13fa:	ba 95       	dec	r27
    13fc:	c9 f7       	brne	.-14     	; 0x13f0 <__fixunssfsi+0x14>
    13fe:	14 c0       	rjmp	.+40     	; 0x1428 <__fixunssfsi+0x4c>
    1400:	b1 30       	cpi	r27, 0x01	; 1
    1402:	91 f0       	breq	.+36     	; 0x1428 <__fixunssfsi+0x4c>
    1404:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__fp_zero>
    1408:	b1 e0       	ldi	r27, 0x01	; 1
    140a:	08 95       	ret
    140c:	0c 94 a4 0a 	jmp	0x1548	; 0x1548 <__fp_zero>
    1410:	67 2f       	mov	r22, r23
    1412:	78 2f       	mov	r23, r24
    1414:	88 27       	eor	r24, r24
    1416:	b8 5f       	subi	r27, 0xF8	; 248
    1418:	39 f0       	breq	.+14     	; 0x1428 <__fixunssfsi+0x4c>
    141a:	b9 3f       	cpi	r27, 0xF9	; 249
    141c:	cc f3       	brlt	.-14     	; 0x1410 <__fixunssfsi+0x34>
    141e:	86 95       	lsr	r24
    1420:	77 95       	ror	r23
    1422:	67 95       	ror	r22
    1424:	b3 95       	inc	r27
    1426:	d9 f7       	brne	.-10     	; 0x141e <__fixunssfsi+0x42>
    1428:	3e f4       	brtc	.+14     	; 0x1438 <__fixunssfsi+0x5c>
    142a:	90 95       	com	r25
    142c:	80 95       	com	r24
    142e:	70 95       	com	r23
    1430:	61 95       	neg	r22
    1432:	7f 4f       	sbci	r23, 0xFF	; 255
    1434:	8f 4f       	sbci	r24, 0xFF	; 255
    1436:	9f 4f       	sbci	r25, 0xFF	; 255
    1438:	08 95       	ret

0000143a <__floatunsisf>:
    143a:	e8 94       	clt
    143c:	09 c0       	rjmp	.+18     	; 0x1450 <__floatsisf+0x12>

0000143e <__floatsisf>:
    143e:	97 fb       	bst	r25, 7
    1440:	3e f4       	brtc	.+14     	; 0x1450 <__floatsisf+0x12>
    1442:	90 95       	com	r25
    1444:	80 95       	com	r24
    1446:	70 95       	com	r23
    1448:	61 95       	neg	r22
    144a:	7f 4f       	sbci	r23, 0xFF	; 255
    144c:	8f 4f       	sbci	r24, 0xFF	; 255
    144e:	9f 4f       	sbci	r25, 0xFF	; 255
    1450:	99 23       	and	r25, r25
    1452:	a9 f0       	breq	.+42     	; 0x147e <__floatsisf+0x40>
    1454:	f9 2f       	mov	r31, r25
    1456:	96 e9       	ldi	r25, 0x96	; 150
    1458:	bb 27       	eor	r27, r27
    145a:	93 95       	inc	r25
    145c:	f6 95       	lsr	r31
    145e:	87 95       	ror	r24
    1460:	77 95       	ror	r23
    1462:	67 95       	ror	r22
    1464:	b7 95       	ror	r27
    1466:	f1 11       	cpse	r31, r1
    1468:	f8 cf       	rjmp	.-16     	; 0x145a <__floatsisf+0x1c>
    146a:	fa f4       	brpl	.+62     	; 0x14aa <__floatsisf+0x6c>
    146c:	bb 0f       	add	r27, r27
    146e:	11 f4       	brne	.+4      	; 0x1474 <__floatsisf+0x36>
    1470:	60 ff       	sbrs	r22, 0
    1472:	1b c0       	rjmp	.+54     	; 0x14aa <__floatsisf+0x6c>
    1474:	6f 5f       	subi	r22, 0xFF	; 255
    1476:	7f 4f       	sbci	r23, 0xFF	; 255
    1478:	8f 4f       	sbci	r24, 0xFF	; 255
    147a:	9f 4f       	sbci	r25, 0xFF	; 255
    147c:	16 c0       	rjmp	.+44     	; 0x14aa <__floatsisf+0x6c>
    147e:	88 23       	and	r24, r24
    1480:	11 f0       	breq	.+4      	; 0x1486 <__floatsisf+0x48>
    1482:	96 e9       	ldi	r25, 0x96	; 150
    1484:	11 c0       	rjmp	.+34     	; 0x14a8 <__floatsisf+0x6a>
    1486:	77 23       	and	r23, r23
    1488:	21 f0       	breq	.+8      	; 0x1492 <__floatsisf+0x54>
    148a:	9e e8       	ldi	r25, 0x8E	; 142
    148c:	87 2f       	mov	r24, r23
    148e:	76 2f       	mov	r23, r22
    1490:	05 c0       	rjmp	.+10     	; 0x149c <__floatsisf+0x5e>
    1492:	66 23       	and	r22, r22
    1494:	71 f0       	breq	.+28     	; 0x14b2 <__floatsisf+0x74>
    1496:	96 e8       	ldi	r25, 0x86	; 134
    1498:	86 2f       	mov	r24, r22
    149a:	70 e0       	ldi	r23, 0x00	; 0
    149c:	60 e0       	ldi	r22, 0x00	; 0
    149e:	2a f0       	brmi	.+10     	; 0x14aa <__floatsisf+0x6c>
    14a0:	9a 95       	dec	r25
    14a2:	66 0f       	add	r22, r22
    14a4:	77 1f       	adc	r23, r23
    14a6:	88 1f       	adc	r24, r24
    14a8:	da f7       	brpl	.-10     	; 0x14a0 <__floatsisf+0x62>
    14aa:	88 0f       	add	r24, r24
    14ac:	96 95       	lsr	r25
    14ae:	87 95       	ror	r24
    14b0:	97 f9       	bld	r25, 7
    14b2:	08 95       	ret

000014b4 <__fp_inf>:
    14b4:	97 f9       	bld	r25, 7
    14b6:	9f 67       	ori	r25, 0x7F	; 127
    14b8:	80 e8       	ldi	r24, 0x80	; 128
    14ba:	70 e0       	ldi	r23, 0x00	; 0
    14bc:	60 e0       	ldi	r22, 0x00	; 0
    14be:	08 95       	ret

000014c0 <__fp_nan>:
    14c0:	9f ef       	ldi	r25, 0xFF	; 255
    14c2:	80 ec       	ldi	r24, 0xC0	; 192
    14c4:	08 95       	ret

000014c6 <__fp_pscA>:
    14c6:	00 24       	eor	r0, r0
    14c8:	0a 94       	dec	r0
    14ca:	16 16       	cp	r1, r22
    14cc:	17 06       	cpc	r1, r23
    14ce:	18 06       	cpc	r1, r24
    14d0:	09 06       	cpc	r0, r25
    14d2:	08 95       	ret

000014d4 <__fp_pscB>:
    14d4:	00 24       	eor	r0, r0
    14d6:	0a 94       	dec	r0
    14d8:	12 16       	cp	r1, r18
    14da:	13 06       	cpc	r1, r19
    14dc:	14 06       	cpc	r1, r20
    14de:	05 06       	cpc	r0, r21
    14e0:	08 95       	ret

000014e2 <__fp_round>:
    14e2:	09 2e       	mov	r0, r25
    14e4:	03 94       	inc	r0
    14e6:	00 0c       	add	r0, r0
    14e8:	11 f4       	brne	.+4      	; 0x14ee <__fp_round+0xc>
    14ea:	88 23       	and	r24, r24
    14ec:	52 f0       	brmi	.+20     	; 0x1502 <__fp_round+0x20>
    14ee:	bb 0f       	add	r27, r27
    14f0:	40 f4       	brcc	.+16     	; 0x1502 <__fp_round+0x20>
    14f2:	bf 2b       	or	r27, r31
    14f4:	11 f4       	brne	.+4      	; 0x14fa <__fp_round+0x18>
    14f6:	60 ff       	sbrs	r22, 0
    14f8:	04 c0       	rjmp	.+8      	; 0x1502 <__fp_round+0x20>
    14fa:	6f 5f       	subi	r22, 0xFF	; 255
    14fc:	7f 4f       	sbci	r23, 0xFF	; 255
    14fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1500:	9f 4f       	sbci	r25, 0xFF	; 255
    1502:	08 95       	ret

00001504 <__fp_split3>:
    1504:	57 fd       	sbrc	r21, 7
    1506:	90 58       	subi	r25, 0x80	; 128
    1508:	44 0f       	add	r20, r20
    150a:	55 1f       	adc	r21, r21
    150c:	59 f0       	breq	.+22     	; 0x1524 <__fp_splitA+0x10>
    150e:	5f 3f       	cpi	r21, 0xFF	; 255
    1510:	71 f0       	breq	.+28     	; 0x152e <__fp_splitA+0x1a>
    1512:	47 95       	ror	r20

00001514 <__fp_splitA>:
    1514:	88 0f       	add	r24, r24
    1516:	97 fb       	bst	r25, 7
    1518:	99 1f       	adc	r25, r25
    151a:	61 f0       	breq	.+24     	; 0x1534 <__fp_splitA+0x20>
    151c:	9f 3f       	cpi	r25, 0xFF	; 255
    151e:	79 f0       	breq	.+30     	; 0x153e <__fp_splitA+0x2a>
    1520:	87 95       	ror	r24
    1522:	08 95       	ret
    1524:	12 16       	cp	r1, r18
    1526:	13 06       	cpc	r1, r19
    1528:	14 06       	cpc	r1, r20
    152a:	55 1f       	adc	r21, r21
    152c:	f2 cf       	rjmp	.-28     	; 0x1512 <__fp_split3+0xe>
    152e:	46 95       	lsr	r20
    1530:	f1 df       	rcall	.-30     	; 0x1514 <__fp_splitA>
    1532:	08 c0       	rjmp	.+16     	; 0x1544 <__fp_splitA+0x30>
    1534:	16 16       	cp	r1, r22
    1536:	17 06       	cpc	r1, r23
    1538:	18 06       	cpc	r1, r24
    153a:	99 1f       	adc	r25, r25
    153c:	f1 cf       	rjmp	.-30     	; 0x1520 <__fp_splitA+0xc>
    153e:	86 95       	lsr	r24
    1540:	71 05       	cpc	r23, r1
    1542:	61 05       	cpc	r22, r1
    1544:	08 94       	sec
    1546:	08 95       	ret

00001548 <__fp_zero>:
    1548:	e8 94       	clt

0000154a <__fp_szero>:
    154a:	bb 27       	eor	r27, r27
    154c:	66 27       	eor	r22, r22
    154e:	77 27       	eor	r23, r23
    1550:	cb 01       	movw	r24, r22
    1552:	97 f9       	bld	r25, 7
    1554:	08 95       	ret

00001556 <__mulsf3>:
    1556:	0e 94 be 0a 	call	0x157c	; 0x157c <__mulsf3x>
    155a:	0c 94 71 0a 	jmp	0x14e2	; 0x14e2 <__fp_round>
    155e:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__fp_pscA>
    1562:	38 f0       	brcs	.+14     	; 0x1572 <__mulsf3+0x1c>
    1564:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <__fp_pscB>
    1568:	20 f0       	brcs	.+8      	; 0x1572 <__mulsf3+0x1c>
    156a:	95 23       	and	r25, r21
    156c:	11 f0       	breq	.+4      	; 0x1572 <__mulsf3+0x1c>
    156e:	0c 94 5a 0a 	jmp	0x14b4	; 0x14b4 <__fp_inf>
    1572:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__fp_nan>
    1576:	11 24       	eor	r1, r1
    1578:	0c 94 a5 0a 	jmp	0x154a	; 0x154a <__fp_szero>

0000157c <__mulsf3x>:
    157c:	0e 94 82 0a 	call	0x1504	; 0x1504 <__fp_split3>
    1580:	70 f3       	brcs	.-36     	; 0x155e <__mulsf3+0x8>

00001582 <__mulsf3_pse>:
    1582:	95 9f       	mul	r25, r21
    1584:	c1 f3       	breq	.-16     	; 0x1576 <__mulsf3+0x20>
    1586:	95 0f       	add	r25, r21
    1588:	50 e0       	ldi	r21, 0x00	; 0
    158a:	55 1f       	adc	r21, r21
    158c:	62 9f       	mul	r22, r18
    158e:	f0 01       	movw	r30, r0
    1590:	72 9f       	mul	r23, r18
    1592:	bb 27       	eor	r27, r27
    1594:	f0 0d       	add	r31, r0
    1596:	b1 1d       	adc	r27, r1
    1598:	63 9f       	mul	r22, r19
    159a:	aa 27       	eor	r26, r26
    159c:	f0 0d       	add	r31, r0
    159e:	b1 1d       	adc	r27, r1
    15a0:	aa 1f       	adc	r26, r26
    15a2:	64 9f       	mul	r22, r20
    15a4:	66 27       	eor	r22, r22
    15a6:	b0 0d       	add	r27, r0
    15a8:	a1 1d       	adc	r26, r1
    15aa:	66 1f       	adc	r22, r22
    15ac:	82 9f       	mul	r24, r18
    15ae:	22 27       	eor	r18, r18
    15b0:	b0 0d       	add	r27, r0
    15b2:	a1 1d       	adc	r26, r1
    15b4:	62 1f       	adc	r22, r18
    15b6:	73 9f       	mul	r23, r19
    15b8:	b0 0d       	add	r27, r0
    15ba:	a1 1d       	adc	r26, r1
    15bc:	62 1f       	adc	r22, r18
    15be:	83 9f       	mul	r24, r19
    15c0:	a0 0d       	add	r26, r0
    15c2:	61 1d       	adc	r22, r1
    15c4:	22 1f       	adc	r18, r18
    15c6:	74 9f       	mul	r23, r20
    15c8:	33 27       	eor	r19, r19
    15ca:	a0 0d       	add	r26, r0
    15cc:	61 1d       	adc	r22, r1
    15ce:	23 1f       	adc	r18, r19
    15d0:	84 9f       	mul	r24, r20
    15d2:	60 0d       	add	r22, r0
    15d4:	21 1d       	adc	r18, r1
    15d6:	82 2f       	mov	r24, r18
    15d8:	76 2f       	mov	r23, r22
    15da:	6a 2f       	mov	r22, r26
    15dc:	11 24       	eor	r1, r1
    15de:	9f 57       	subi	r25, 0x7F	; 127
    15e0:	50 40       	sbci	r21, 0x00	; 0
    15e2:	9a f0       	brmi	.+38     	; 0x160a <__mulsf3_pse+0x88>
    15e4:	f1 f0       	breq	.+60     	; 0x1622 <__mulsf3_pse+0xa0>
    15e6:	88 23       	and	r24, r24
    15e8:	4a f0       	brmi	.+18     	; 0x15fc <__mulsf3_pse+0x7a>
    15ea:	ee 0f       	add	r30, r30
    15ec:	ff 1f       	adc	r31, r31
    15ee:	bb 1f       	adc	r27, r27
    15f0:	66 1f       	adc	r22, r22
    15f2:	77 1f       	adc	r23, r23
    15f4:	88 1f       	adc	r24, r24
    15f6:	91 50       	subi	r25, 0x01	; 1
    15f8:	50 40       	sbci	r21, 0x00	; 0
    15fa:	a9 f7       	brne	.-22     	; 0x15e6 <__mulsf3_pse+0x64>
    15fc:	9e 3f       	cpi	r25, 0xFE	; 254
    15fe:	51 05       	cpc	r21, r1
    1600:	80 f0       	brcs	.+32     	; 0x1622 <__mulsf3_pse+0xa0>
    1602:	0c 94 5a 0a 	jmp	0x14b4	; 0x14b4 <__fp_inf>
    1606:	0c 94 a5 0a 	jmp	0x154a	; 0x154a <__fp_szero>
    160a:	5f 3f       	cpi	r21, 0xFF	; 255
    160c:	e4 f3       	brlt	.-8      	; 0x1606 <__mulsf3_pse+0x84>
    160e:	98 3e       	cpi	r25, 0xE8	; 232
    1610:	d4 f3       	brlt	.-12     	; 0x1606 <__mulsf3_pse+0x84>
    1612:	86 95       	lsr	r24
    1614:	77 95       	ror	r23
    1616:	67 95       	ror	r22
    1618:	b7 95       	ror	r27
    161a:	f7 95       	ror	r31
    161c:	e7 95       	ror	r30
    161e:	9f 5f       	subi	r25, 0xFF	; 255
    1620:	c1 f7       	brne	.-16     	; 0x1612 <__mulsf3_pse+0x90>
    1622:	fe 2b       	or	r31, r30
    1624:	88 0f       	add	r24, r24
    1626:	91 1d       	adc	r25, r1
    1628:	96 95       	lsr	r25
    162a:	87 95       	ror	r24
    162c:	97 f9       	bld	r25, 7
    162e:	08 95       	ret

00001630 <__udivmodsi4>:
    1630:	a1 e2       	ldi	r26, 0x21	; 33
    1632:	1a 2e       	mov	r1, r26
    1634:	aa 1b       	sub	r26, r26
    1636:	bb 1b       	sub	r27, r27
    1638:	fd 01       	movw	r30, r26
    163a:	0d c0       	rjmp	.+26     	; 0x1656 <__udivmodsi4_ep>

0000163c <__udivmodsi4_loop>:
    163c:	aa 1f       	adc	r26, r26
    163e:	bb 1f       	adc	r27, r27
    1640:	ee 1f       	adc	r30, r30
    1642:	ff 1f       	adc	r31, r31
    1644:	a2 17       	cp	r26, r18
    1646:	b3 07       	cpc	r27, r19
    1648:	e4 07       	cpc	r30, r20
    164a:	f5 07       	cpc	r31, r21
    164c:	20 f0       	brcs	.+8      	; 0x1656 <__udivmodsi4_ep>
    164e:	a2 1b       	sub	r26, r18
    1650:	b3 0b       	sbc	r27, r19
    1652:	e4 0b       	sbc	r30, r20
    1654:	f5 0b       	sbc	r31, r21

00001656 <__udivmodsi4_ep>:
    1656:	66 1f       	adc	r22, r22
    1658:	77 1f       	adc	r23, r23
    165a:	88 1f       	adc	r24, r24
    165c:	99 1f       	adc	r25, r25
    165e:	1a 94       	dec	r1
    1660:	69 f7       	brne	.-38     	; 0x163c <__udivmodsi4_loop>
    1662:	60 95       	com	r22
    1664:	70 95       	com	r23
    1666:	80 95       	com	r24
    1668:	90 95       	com	r25
    166a:	9b 01       	movw	r18, r22
    166c:	ac 01       	movw	r20, r24
    166e:	bd 01       	movw	r22, r26
    1670:	cf 01       	movw	r24, r30
    1672:	08 95       	ret

00001674 <__tablejump2__>:
    1674:	ee 0f       	add	r30, r30
    1676:	ff 1f       	adc	r31, r31
    1678:	05 90       	lpm	r0, Z+
    167a:	f4 91       	lpm	r31, Z
    167c:	e0 2d       	mov	r30, r0
    167e:	09 94       	ijmp

00001680 <_exit>:
    1680:	f8 94       	cli

00001682 <__stop_program>:
    1682:	ff cf       	rjmp	.-2      	; 0x1682 <__stop_program>
