
LED-I2C-Master C++.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001636  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00001636  000016ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800066  00800066  000016d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000016d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001700  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  0000173c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000029c2  00000000  00000000  00001874  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000091e  00000000  00000000  00004236  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f92  00000000  00000000  00004b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004e8  00000000  00000000  00005ae8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cd2  00000000  00000000  00005fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000027ce  00000000  00000000  00006ca2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00009470  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__ctors_end>
       4:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
       8:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
       c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      10:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      14:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      18:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      1c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      20:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      24:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      28:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      2c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      30:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      34:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      38:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      3c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      40:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      44:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      48:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      4c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      50:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      54:	c0 08       	sbc	r12, r0
      56:	c9 08       	sbc	r12, r9
      58:	c9 08       	sbc	r12, r9
      5a:	c9 08       	sbc	r12, r9
      5c:	c9 08       	sbc	r12, r9
      5e:	c9 08       	sbc	r12, r9
      60:	c9 08       	sbc	r12, r9
      62:	c9 08       	sbc	r12, r9
      64:	c9 08       	sbc	r12, r9
      66:	c9 08       	sbc	r12, r9
      68:	c9 08       	sbc	r12, r9
      6a:	c9 08       	sbc	r12, r9
      6c:	c9 08       	sbc	r12, r9
      6e:	c9 08       	sbc	r12, r9
      70:	c9 08       	sbc	r12, r9
      72:	c9 08       	sbc	r12, r9
      74:	c9 08       	sbc	r12, r9
      76:	c9 08       	sbc	r12, r9
      78:	c9 08       	sbc	r12, r9
      7a:	c9 08       	sbc	r12, r9
      7c:	c9 08       	sbc	r12, r9
      7e:	c9 08       	sbc	r12, r9
      80:	c9 08       	sbc	r12, r9
      82:	c9 08       	sbc	r12, r9
      84:	c9 08       	sbc	r12, r9
      86:	c9 08       	sbc	r12, r9
      88:	c9 08       	sbc	r12, r9
      8a:	c9 08       	sbc	r12, r9
      8c:	c9 08       	sbc	r12, r9
      8e:	99 08       	sbc	r9, r9
      90:	0f 08       	sbc	r0, r15
      92:	33 08       	sbc	r3, r3
      94:	c9 08       	sbc	r12, r9
      96:	a9 08       	sbc	r10, r9
      98:	c9 08       	sbc	r12, r9
      9a:	c9 08       	sbc	r12, r9
      9c:	c9 08       	sbc	r12, r9
      9e:	c9 08       	sbc	r12, r9
      a0:	c9 08       	sbc	r12, r9
      a2:	c9 08       	sbc	r12, r9
      a4:	c9 08       	sbc	r12, r9
      a6:	c9 08       	sbc	r12, r9
      a8:	c9 08       	sbc	r12, r9
      aa:	c9 08       	sbc	r12, r9
      ac:	c9 08       	sbc	r12, r9
      ae:	c9 08       	sbc	r12, r9
      b0:	b5 08       	sbc	r11, r5
      b2:	c9 08       	sbc	r12, r9
      b4:	5f 08       	sbc	r5, r15
      b6:	c9 08       	sbc	r12, r9
      b8:	c9 08       	sbc	r12, r9
      ba:	7b 08       	sbc	r7, r11
      bc:	c9 08       	sbc	r12, r9
      be:	c9 08       	sbc	r12, r9
      c0:	c9 08       	sbc	r12, r9
      c2:	c9 08       	sbc	r12, r9
      c4:	c9 08       	sbc	r12, r9
      c6:	c9 08       	sbc	r12, r9
      c8:	c9 08       	sbc	r12, r9
      ca:	c9 08       	sbc	r12, r9
      cc:	c9 08       	sbc	r12, r9
      ce:	89 08       	sbc	r8, r9
      d0:	0f 08       	sbc	r0, r15
      d2:	1a 08       	sbc	r1, r10
      d4:	c9 08       	sbc	r12, r9
      d6:	a9 08       	sbc	r10, r9
      d8:	c9 08       	sbc	r12, r9
      da:	c9 08       	sbc	r12, r9
      dc:	c9 08       	sbc	r12, r9
      de:	c9 08       	sbc	r12, r9
      e0:	c9 08       	sbc	r12, r9
      e2:	c9 08       	sbc	r12, r9
      e4:	c9 08       	sbc	r12, r9
      e6:	c9 08       	sbc	r12, r9
      e8:	c9 08       	sbc	r12, r9
      ea:	c9 08       	sbc	r12, r9
      ec:	c9 08       	sbc	r12, r9
      ee:	c9 08       	sbc	r12, r9
      f0:	b5 08       	sbc	r11, r5
      f2:	c9 08       	sbc	r12, r9
      f4:	51 08       	sbc	r5, r1
      f6:	c9 08       	sbc	r12, r9
      f8:	c9 08       	sbc	r12, r9
      fa:	6d 08       	sbc	r6, r13
      fc:	c0 08       	sbc	r12, r0
      fe:	c9 08       	sbc	r12, r9
     100:	c9 08       	sbc	r12, r9
     102:	c9 08       	sbc	r12, r9
     104:	c9 08       	sbc	r12, r9
     106:	c9 08       	sbc	r12, r9
     108:	c9 08       	sbc	r12, r9
     10a:	c9 08       	sbc	r12, r9
     10c:	c9 08       	sbc	r12, r9
     10e:	c9 08       	sbc	r12, r9
     110:	c9 08       	sbc	r12, r9
     112:	c9 08       	sbc	r12, r9
     114:	c9 08       	sbc	r12, r9
     116:	c9 08       	sbc	r12, r9
     118:	c9 08       	sbc	r12, r9
     11a:	c9 08       	sbc	r12, r9
     11c:	c9 08       	sbc	r12, r9
     11e:	c9 08       	sbc	r12, r9
     120:	c9 08       	sbc	r12, r9
     122:	c9 08       	sbc	r12, r9
     124:	c9 08       	sbc	r12, r9
     126:	c9 08       	sbc	r12, r9
     128:	c9 08       	sbc	r12, r9
     12a:	c9 08       	sbc	r12, r9
     12c:	c9 08       	sbc	r12, r9
     12e:	c9 08       	sbc	r12, r9
     130:	c9 08       	sbc	r12, r9
     132:	c9 08       	sbc	r12, r9
     134:	c9 08       	sbc	r12, r9
     136:	d2 08       	sbc	r13, r2
     138:	0f 08       	sbc	r0, r15
     13a:	32 08       	sbc	r3, r2
     13c:	c9 08       	sbc	r12, r9
     13e:	a9 08       	sbc	r10, r9
     140:	c9 08       	sbc	r12, r9
     142:	c9 08       	sbc	r12, r9
     144:	c9 08       	sbc	r12, r9
     146:	c9 08       	sbc	r12, r9
     148:	c9 08       	sbc	r12, r9
     14a:	c9 08       	sbc	r12, r9
     14c:	c9 08       	sbc	r12, r9
     14e:	c9 08       	sbc	r12, r9
     150:	c9 08       	sbc	r12, r9
     152:	c9 08       	sbc	r12, r9
     154:	c9 08       	sbc	r12, r9
     156:	c9 08       	sbc	r12, r9
     158:	b5 08       	sbc	r11, r5
     15a:	c9 08       	sbc	r12, r9
     15c:	5e 08       	sbc	r5, r14
     15e:	c9 08       	sbc	r12, r9
     160:	c9 08       	sbc	r12, r9
     162:	7a 08       	sbc	r7, r10
     164:	c9 08       	sbc	r12, r9
     166:	c9 08       	sbc	r12, r9
     168:	c9 08       	sbc	r12, r9
     16a:	c9 08       	sbc	r12, r9
     16c:	c9 08       	sbc	r12, r9
     16e:	c9 08       	sbc	r12, r9
     170:	c9 08       	sbc	r12, r9
     172:	c9 08       	sbc	r12, r9
     174:	c9 08       	sbc	r12, r9
     176:	88 08       	sbc	r8, r8
     178:	0f 08       	sbc	r0, r15
     17a:	19 08       	sbc	r1, r9
     17c:	c9 08       	sbc	r12, r9
     17e:	a9 08       	sbc	r10, r9
     180:	c9 08       	sbc	r12, r9
     182:	c9 08       	sbc	r12, r9
     184:	c9 08       	sbc	r12, r9
     186:	c9 08       	sbc	r12, r9
     188:	c9 08       	sbc	r12, r9
     18a:	c9 08       	sbc	r12, r9
     18c:	c9 08       	sbc	r12, r9
     18e:	c9 08       	sbc	r12, r9
     190:	c9 08       	sbc	r12, r9
     192:	c9 08       	sbc	r12, r9
     194:	c9 08       	sbc	r12, r9
     196:	c9 08       	sbc	r12, r9
     198:	b5 08       	sbc	r11, r5
     19a:	c9 08       	sbc	r12, r9
     19c:	50 08       	sbc	r5, r0
     19e:	c9 08       	sbc	r12, r9
     1a0:	c9 08       	sbc	r12, r9
     1a2:	6c 08       	sbc	r6, r12

000001a4 <__ctors_start>:
     1a4:	55 09       	sbc	r21, r5

000001a6 <__ctors_end>:
     1a6:	11 24       	eor	r1, r1
     1a8:	1f be       	out	0x3f, r1	; 63
     1aa:	cf e5       	ldi	r28, 0x5F	; 95
     1ac:	d8 e0       	ldi	r29, 0x08	; 8
     1ae:	de bf       	out	0x3e, r29	; 62
     1b0:	cd bf       	out	0x3d, r28	; 61

000001b2 <__do_copy_data>:
     1b2:	10 e0       	ldi	r17, 0x00	; 0
     1b4:	a0 e6       	ldi	r26, 0x60	; 96
     1b6:	b0 e0       	ldi	r27, 0x00	; 0
     1b8:	e6 e3       	ldi	r30, 0x36	; 54
     1ba:	f6 e1       	ldi	r31, 0x16	; 22
     1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <__do_copy_data+0x10>
     1be:	05 90       	lpm	r0, Z+
     1c0:	0d 92       	st	X+, r0
     1c2:	a6 36       	cpi	r26, 0x66	; 102
     1c4:	b1 07       	cpc	r27, r17
     1c6:	d9 f7       	brne	.-10     	; 0x1be <__do_copy_data+0xc>

000001c8 <__do_clear_bss>:
     1c8:	20 e0       	ldi	r18, 0x00	; 0
     1ca:	a6 e6       	ldi	r26, 0x66	; 102
     1cc:	b0 e0       	ldi	r27, 0x00	; 0
     1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <.do_clear_bss_start>

000001d0 <.do_clear_bss_loop>:
     1d0:	1d 92       	st	X+, r1

000001d2 <.do_clear_bss_start>:
     1d2:	ac 37       	cpi	r26, 0x7C	; 124
     1d4:	b2 07       	cpc	r27, r18
     1d6:	e1 f7       	brne	.-8      	; 0x1d0 <.do_clear_bss_loop>

000001d8 <__do_global_ctors>:
     1d8:	10 e0       	ldi	r17, 0x00	; 0
     1da:	c3 ed       	ldi	r28, 0xD3	; 211
     1dc:	d0 e0       	ldi	r29, 0x00	; 0
     1de:	04 c0       	rjmp	.+8      	; 0x1e8 <__do_global_ctors+0x10>
     1e0:	21 97       	sbiw	r28, 0x01	; 1
     1e2:	fe 01       	movw	r30, r28
     1e4:	0e 94 13 0b 	call	0x1626	; 0x1626 <__tablejump2__>
     1e8:	c2 3d       	cpi	r28, 0xD2	; 210
     1ea:	d1 07       	cpc	r29, r17
     1ec:	c9 f7       	brne	.-14     	; 0x1e0 <__do_global_ctors+0x8>
     1ee:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <main>
     1f2:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <_exit>

000001f6 <__bad_interrupt>:
     1f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001fa <_Z9i2c_starth>:
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		SendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
	_delay_ms(1);
}
     1fa:	16 be       	out	0x36, r1	; 54
     1fc:	94 ea       	ldi	r25, 0xA4	; 164
     1fe:	96 bf       	out	0x36, r25	; 54
     200:	06 b6       	in	r0, 0x36	; 54
     202:	07 fe       	sbrs	r0, 7
     204:	fd cf       	rjmp	.-6      	; 0x200 <_Z9i2c_starth+0x6>
     206:	91 b1       	in	r25, 0x01	; 1
     208:	98 7f       	andi	r25, 0xF8	; 248
     20a:	98 30       	cpi	r25, 0x08	; 8
     20c:	79 f4       	brne	.+30     	; 0x22c <_Z9i2c_starth+0x32>
     20e:	83 b9       	out	0x03, r24	; 3
     210:	84 e8       	ldi	r24, 0x84	; 132
     212:	86 bf       	out	0x36, r24	; 54
     214:	06 b6       	in	r0, 0x36	; 54
     216:	07 fe       	sbrs	r0, 7
     218:	fd cf       	rjmp	.-6      	; 0x214 <_Z9i2c_starth+0x1a>
     21a:	91 b1       	in	r25, 0x01	; 1
     21c:	98 7f       	andi	r25, 0xF8	; 248
     21e:	98 31       	cpi	r25, 0x18	; 24
     220:	39 f0       	breq	.+14     	; 0x230 <_Z9i2c_starth+0x36>
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	90 34       	cpi	r25, 0x40	; 64
     226:	29 f4       	brne	.+10     	; 0x232 <_Z9i2c_starth+0x38>
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	08 95       	ret
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	08 95       	ret
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	08 95       	ret

00000234 <_Z9i2c_writeh>:
     234:	83 b9       	out	0x03, r24	; 3
     236:	84 e8       	ldi	r24, 0x84	; 132
     238:	86 bf       	out	0x36, r24	; 54
     23a:	06 b6       	in	r0, 0x36	; 54
     23c:	07 fe       	sbrs	r0, 7
     23e:	fd cf       	rjmp	.-6      	; 0x23a <_Z9i2c_writeh+0x6>
     240:	91 b1       	in	r25, 0x01	; 1
     242:	98 7f       	andi	r25, 0xF8	; 248
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	98 32       	cpi	r25, 0x28	; 40
     248:	09 f4       	brne	.+2      	; 0x24c <_Z9i2c_writeh+0x18>
     24a:	80 e0       	ldi	r24, 0x00	; 0
     24c:	08 95       	ret

0000024e <_ZN13Character_LCDC1Ev>:
     24e:	fc 01       	movw	r30, r24
     250:	9b e1       	ldi	r25, 0x1B	; 27
     252:	90 83       	st	Z, r25
     254:	8a e1       	ldi	r24, 0x1A	; 26
     256:	81 83       	std	Z+1, r24	; 0x01
     258:	12 82       	std	Z+2, r1	; 0x02
     25a:	93 83       	std	Z+3, r25	; 0x03
     25c:	84 83       	std	Z+4, r24	; 0x04
     25e:	21 e0       	ldi	r18, 0x01	; 1
     260:	25 83       	std	Z+5, r18	; 0x05
     262:	96 83       	std	Z+6, r25	; 0x06
     264:	87 83       	std	Z+7, r24	; 0x07
     266:	22 e0       	ldi	r18, 0x02	; 2
     268:	20 87       	std	Z+8, r18	; 0x08
     26a:	91 87       	std	Z+9, r25	; 0x09
     26c:	82 87       	std	Z+10, r24	; 0x0a
     26e:	23 e0       	ldi	r18, 0x03	; 3
     270:	23 87       	std	Z+11, r18	; 0x0b
     272:	94 87       	std	Z+12, r25	; 0x0c
     274:	85 87       	std	Z+13, r24	; 0x0d
     276:	24 e0       	ldi	r18, 0x04	; 4
     278:	26 87       	std	Z+14, r18	; 0x0e
     27a:	97 87       	std	Z+15, r25	; 0x0f
     27c:	80 8b       	std	Z+16, r24	; 0x10
     27e:	25 e0       	ldi	r18, 0x05	; 5
     280:	21 8b       	std	Z+17, r18	; 0x11
     282:	92 8b       	std	Z+18, r25	; 0x12
     284:	83 8b       	std	Z+19, r24	; 0x13
     286:	86 e0       	ldi	r24, 0x06	; 6
     288:	84 8b       	std	Z+20, r24	; 0x14
     28a:	08 95       	ret

0000028c <_ZN13Character_LCD8SendCharEh>:
     28c:	fc 01       	movw	r30, r24
     28e:	64 fd       	sbrc	r22, 4
     290:	12 c0       	rjmp	.+36     	; 0x2b6 <_ZN13Character_LCD8SendCharEh+0x2a>
     292:	a1 85       	ldd	r26, Z+9	; 0x09
     294:	b0 e0       	ldi	r27, 0x00	; 0
     296:	90 96       	adiw	r26, 0x20	; 32
     298:	2c 91       	ld	r18, X
     29a:	90 97       	sbiw	r26, 0x20	; 32
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	03 84       	ldd	r0, Z+11	; 0x0b
     2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <_ZN13Character_LCD8SendCharEh+0x1c>
     2a4:	88 0f       	add	r24, r24
     2a6:	99 1f       	adc	r25, r25
     2a8:	0a 94       	dec	r0
     2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <_ZN13Character_LCD8SendCharEh+0x18>
     2ac:	80 95       	com	r24
     2ae:	82 23       	and	r24, r18
     2b0:	90 96       	adiw	r26, 0x20	; 32
     2b2:	8c 93       	st	X, r24
     2b4:	10 c0       	rjmp	.+32     	; 0x2d6 <_ZN13Character_LCD8SendCharEh+0x4a>
     2b6:	a1 85       	ldd	r26, Z+9	; 0x09
     2b8:	b0 e0       	ldi	r27, 0x00	; 0
     2ba:	90 96       	adiw	r26, 0x20	; 32
     2bc:	2c 91       	ld	r18, X
     2be:	90 97       	sbiw	r26, 0x20	; 32
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	03 84       	ldd	r0, Z+11	; 0x0b
     2c6:	02 c0       	rjmp	.+4      	; 0x2cc <_ZN13Character_LCD8SendCharEh+0x40>
     2c8:	88 0f       	add	r24, r24
     2ca:	99 1f       	adc	r25, r25
     2cc:	0a 94       	dec	r0
     2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <_ZN13Character_LCD8SendCharEh+0x3c>
     2d0:	82 2b       	or	r24, r18
     2d2:	90 96       	adiw	r26, 0x20	; 32
     2d4:	8c 93       	st	X, r24
     2d6:	65 fd       	sbrc	r22, 5
     2d8:	12 c0       	rjmp	.+36     	; 0x2fe <_ZN13Character_LCD8SendCharEh+0x72>
     2da:	a4 85       	ldd	r26, Z+12	; 0x0c
     2dc:	b0 e0       	ldi	r27, 0x00	; 0
     2de:	90 96       	adiw	r26, 0x20	; 32
     2e0:	2c 91       	ld	r18, X
     2e2:	90 97       	sbiw	r26, 0x20	; 32
     2e4:	81 e0       	ldi	r24, 0x01	; 1
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	06 84       	ldd	r0, Z+14	; 0x0e
     2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <_ZN13Character_LCD8SendCharEh+0x64>
     2ec:	88 0f       	add	r24, r24
     2ee:	99 1f       	adc	r25, r25
     2f0:	0a 94       	dec	r0
     2f2:	e2 f7       	brpl	.-8      	; 0x2ec <_ZN13Character_LCD8SendCharEh+0x60>
     2f4:	80 95       	com	r24
     2f6:	82 23       	and	r24, r18
     2f8:	90 96       	adiw	r26, 0x20	; 32
     2fa:	8c 93       	st	X, r24
     2fc:	10 c0       	rjmp	.+32     	; 0x31e <_ZN13Character_LCD8SendCharEh+0x92>
     2fe:	a4 85       	ldd	r26, Z+12	; 0x0c
     300:	b0 e0       	ldi	r27, 0x00	; 0
     302:	90 96       	adiw	r26, 0x20	; 32
     304:	2c 91       	ld	r18, X
     306:	90 97       	sbiw	r26, 0x20	; 32
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	06 84       	ldd	r0, Z+14	; 0x0e
     30e:	02 c0       	rjmp	.+4      	; 0x314 <_ZN13Character_LCD8SendCharEh+0x88>
     310:	88 0f       	add	r24, r24
     312:	99 1f       	adc	r25, r25
     314:	0a 94       	dec	r0
     316:	e2 f7       	brpl	.-8      	; 0x310 <_ZN13Character_LCD8SendCharEh+0x84>
     318:	82 2b       	or	r24, r18
     31a:	90 96       	adiw	r26, 0x20	; 32
     31c:	8c 93       	st	X, r24
     31e:	66 fd       	sbrc	r22, 6
     320:	12 c0       	rjmp	.+36     	; 0x346 <_ZN13Character_LCD8SendCharEh+0xba>
     322:	a7 85       	ldd	r26, Z+15	; 0x0f
     324:	b0 e0       	ldi	r27, 0x00	; 0
     326:	90 96       	adiw	r26, 0x20	; 32
     328:	2c 91       	ld	r18, X
     32a:	90 97       	sbiw	r26, 0x20	; 32
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	01 88       	ldd	r0, Z+17	; 0x11
     332:	02 c0       	rjmp	.+4      	; 0x338 <_ZN13Character_LCD8SendCharEh+0xac>
     334:	88 0f       	add	r24, r24
     336:	99 1f       	adc	r25, r25
     338:	0a 94       	dec	r0
     33a:	e2 f7       	brpl	.-8      	; 0x334 <_ZN13Character_LCD8SendCharEh+0xa8>
     33c:	80 95       	com	r24
     33e:	82 23       	and	r24, r18
     340:	90 96       	adiw	r26, 0x20	; 32
     342:	8c 93       	st	X, r24
     344:	10 c0       	rjmp	.+32     	; 0x366 <_ZN13Character_LCD8SendCharEh+0xda>
     346:	a7 85       	ldd	r26, Z+15	; 0x0f
     348:	b0 e0       	ldi	r27, 0x00	; 0
     34a:	90 96       	adiw	r26, 0x20	; 32
     34c:	2c 91       	ld	r18, X
     34e:	90 97       	sbiw	r26, 0x20	; 32
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	01 88       	ldd	r0, Z+17	; 0x11
     356:	02 c0       	rjmp	.+4      	; 0x35c <_ZN13Character_LCD8SendCharEh+0xd0>
     358:	88 0f       	add	r24, r24
     35a:	99 1f       	adc	r25, r25
     35c:	0a 94       	dec	r0
     35e:	e2 f7       	brpl	.-8      	; 0x358 <_ZN13Character_LCD8SendCharEh+0xcc>
     360:	82 2b       	or	r24, r18
     362:	90 96       	adiw	r26, 0x20	; 32
     364:	8c 93       	st	X, r24
     366:	66 23       	and	r22, r22
     368:	94 f0       	brlt	.+36     	; 0x38e <_ZN13Character_LCD8SendCharEh+0x102>
     36a:	a2 89       	ldd	r26, Z+18	; 0x12
     36c:	b0 e0       	ldi	r27, 0x00	; 0
     36e:	90 96       	adiw	r26, 0x20	; 32
     370:	2c 91       	ld	r18, X
     372:	90 97       	sbiw	r26, 0x20	; 32
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	04 88       	ldd	r0, Z+20	; 0x14
     37a:	02 c0       	rjmp	.+4      	; 0x380 <_ZN13Character_LCD8SendCharEh+0xf4>
     37c:	88 0f       	add	r24, r24
     37e:	99 1f       	adc	r25, r25
     380:	0a 94       	dec	r0
     382:	e2 f7       	brpl	.-8      	; 0x37c <_ZN13Character_LCD8SendCharEh+0xf0>
     384:	80 95       	com	r24
     386:	82 23       	and	r24, r18
     388:	90 96       	adiw	r26, 0x20	; 32
     38a:	8c 93       	st	X, r24
     38c:	10 c0       	rjmp	.+32     	; 0x3ae <_ZN13Character_LCD8SendCharEh+0x122>
     38e:	a2 89       	ldd	r26, Z+18	; 0x12
     390:	b0 e0       	ldi	r27, 0x00	; 0
     392:	90 96       	adiw	r26, 0x20	; 32
     394:	2c 91       	ld	r18, X
     396:	90 97       	sbiw	r26, 0x20	; 32
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	04 88       	ldd	r0, Z+20	; 0x14
     39e:	02 c0       	rjmp	.+4      	; 0x3a4 <_ZN13Character_LCD8SendCharEh+0x118>
     3a0:	88 0f       	add	r24, r24
     3a2:	99 1f       	adc	r25, r25
     3a4:	0a 94       	dec	r0
     3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <_ZN13Character_LCD8SendCharEh+0x114>
     3a8:	82 2b       	or	r24, r18
     3aa:	90 96       	adiw	r26, 0x20	; 32
     3ac:	8c 93       	st	X, r24
     3ae:	a0 81       	ld	r26, Z
     3b0:	b0 e0       	ldi	r27, 0x00	; 0
     3b2:	90 96       	adiw	r26, 0x20	; 32
     3b4:	4c 91       	ld	r20, X
     3b6:	90 97       	sbiw	r26, 0x20	; 32
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	9c 01       	movw	r18, r24
     3be:	02 80       	ldd	r0, Z+2	; 0x02
     3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <_ZN13Character_LCD8SendCharEh+0x13a>
     3c2:	22 0f       	add	r18, r18
     3c4:	33 1f       	adc	r19, r19
     3c6:	0a 94       	dec	r0
     3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <_ZN13Character_LCD8SendCharEh+0x136>
     3ca:	24 2b       	or	r18, r20
     3cc:	90 96       	adiw	r26, 0x20	; 32
     3ce:	2c 93       	st	X, r18
     3d0:	a6 81       	ldd	r26, Z+6	; 0x06
     3d2:	b0 e0       	ldi	r27, 0x00	; 0
     3d4:	90 96       	adiw	r26, 0x20	; 32
     3d6:	4c 91       	ld	r20, X
     3d8:	90 97       	sbiw	r26, 0x20	; 32
     3da:	9c 01       	movw	r18, r24
     3dc:	00 84       	ldd	r0, Z+8	; 0x08
     3de:	02 c0       	rjmp	.+4      	; 0x3e4 <_ZN13Character_LCD8SendCharEh+0x158>
     3e0:	22 0f       	add	r18, r18
     3e2:	33 1f       	adc	r19, r19
     3e4:	0a 94       	dec	r0
     3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <_ZN13Character_LCD8SendCharEh+0x154>
     3e8:	24 2b       	or	r18, r20
     3ea:	90 96       	adiw	r26, 0x20	; 32
     3ec:	2c 93       	st	X, r18
     3ee:	af ec       	ldi	r26, 0xCF	; 207
     3f0:	b7 e0       	ldi	r27, 0x07	; 7
     3f2:	11 97       	sbiw	r26, 0x01	; 1
     3f4:	f1 f7       	brne	.-4      	; 0x3f2 <_ZN13Character_LCD8SendCharEh+0x166>
     3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <_ZN13Character_LCD8SendCharEh+0x16c>
     3f8:	00 00       	nop
     3fa:	a6 81       	ldd	r26, Z+6	; 0x06
     3fc:	b0 e0       	ldi	r27, 0x00	; 0
     3fe:	90 96       	adiw	r26, 0x20	; 32
     400:	3c 91       	ld	r19, X
     402:	90 97       	sbiw	r26, 0x20	; 32
     404:	ac 01       	movw	r20, r24
     406:	00 84       	ldd	r0, Z+8	; 0x08
     408:	02 c0       	rjmp	.+4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     40a:	44 0f       	add	r20, r20
     40c:	55 1f       	adc	r21, r21
     40e:	0a 94       	dec	r0
     410:	e2 f7       	brpl	.-8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     412:	24 2f       	mov	r18, r20
     414:	20 95       	com	r18
     416:	23 23       	and	r18, r19
     418:	90 96       	adiw	r26, 0x20	; 32
     41a:	2c 93       	st	X, r18
     41c:	a0 81       	ld	r26, Z
     41e:	b0 e0       	ldi	r27, 0x00	; 0
     420:	90 96       	adiw	r26, 0x20	; 32
     422:	2c 91       	ld	r18, X
     424:	90 97       	sbiw	r26, 0x20	; 32
     426:	02 80       	ldd	r0, Z+2	; 0x02
     428:	02 c0       	rjmp	.+4      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     42a:	88 0f       	add	r24, r24
     42c:	99 1f       	adc	r25, r25
     42e:	0a 94       	dec	r0
     430:	e2 f7       	brpl	.-8      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     432:	80 95       	com	r24
     434:	82 23       	and	r24, r18
     436:	90 96       	adiw	r26, 0x20	; 32
     438:	8c 93       	st	X, r24
     43a:	8f ec       	ldi	r24, 0xCF	; 207
     43c:	97 e0       	ldi	r25, 0x07	; 7
     43e:	01 97       	sbiw	r24, 0x01	; 1
     440:	f1 f7       	brne	.-4      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     442:	00 c0       	rjmp	.+0      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     444:	00 00       	nop
     446:	60 fd       	sbrc	r22, 0
     448:	12 c0       	rjmp	.+36     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     44a:	a1 85       	ldd	r26, Z+9	; 0x09
     44c:	b0 e0       	ldi	r27, 0x00	; 0
     44e:	90 96       	adiw	r26, 0x20	; 32
     450:	2c 91       	ld	r18, X
     452:	90 97       	sbiw	r26, 0x20	; 32
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	03 84       	ldd	r0, Z+11	; 0x0b
     45a:	02 c0       	rjmp	.+4      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     45c:	88 0f       	add	r24, r24
     45e:	99 1f       	adc	r25, r25
     460:	0a 94       	dec	r0
     462:	e2 f7       	brpl	.-8      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     464:	80 95       	com	r24
     466:	82 23       	and	r24, r18
     468:	90 96       	adiw	r26, 0x20	; 32
     46a:	8c 93       	st	X, r24
     46c:	10 c0       	rjmp	.+32     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     46e:	a1 85       	ldd	r26, Z+9	; 0x09
     470:	b0 e0       	ldi	r27, 0x00	; 0
     472:	90 96       	adiw	r26, 0x20	; 32
     474:	2c 91       	ld	r18, X
     476:	90 97       	sbiw	r26, 0x20	; 32
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	03 84       	ldd	r0, Z+11	; 0x0b
     47e:	02 c0       	rjmp	.+4      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     480:	88 0f       	add	r24, r24
     482:	99 1f       	adc	r25, r25
     484:	0a 94       	dec	r0
     486:	e2 f7       	brpl	.-8      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     488:	82 2b       	or	r24, r18
     48a:	90 96       	adiw	r26, 0x20	; 32
     48c:	8c 93       	st	X, r24
     48e:	61 fd       	sbrc	r22, 1
     490:	12 c0       	rjmp	.+36     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     492:	a4 85       	ldd	r26, Z+12	; 0x0c
     494:	b0 e0       	ldi	r27, 0x00	; 0
     496:	90 96       	adiw	r26, 0x20	; 32
     498:	2c 91       	ld	r18, X
     49a:	90 97       	sbiw	r26, 0x20	; 32
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	06 84       	ldd	r0, Z+14	; 0x0e
     4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     4a4:	88 0f       	add	r24, r24
     4a6:	99 1f       	adc	r25, r25
     4a8:	0a 94       	dec	r0
     4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     4ac:	80 95       	com	r24
     4ae:	82 23       	and	r24, r18
     4b0:	90 96       	adiw	r26, 0x20	; 32
     4b2:	8c 93       	st	X, r24
     4b4:	10 c0       	rjmp	.+32     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
     4b6:	a4 85       	ldd	r26, Z+12	; 0x0c
     4b8:	b0 e0       	ldi	r27, 0x00	; 0
     4ba:	90 96       	adiw	r26, 0x20	; 32
     4bc:	2c 91       	ld	r18, X
     4be:	90 97       	sbiw	r26, 0x20	; 32
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	06 84       	ldd	r0, Z+14	; 0x0e
     4c6:	02 c0       	rjmp	.+4      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     4c8:	88 0f       	add	r24, r24
     4ca:	99 1f       	adc	r25, r25
     4cc:	0a 94       	dec	r0
     4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     4d0:	82 2b       	or	r24, r18
     4d2:	90 96       	adiw	r26, 0x20	; 32
     4d4:	8c 93       	st	X, r24
     4d6:	62 fd       	sbrc	r22, 2
     4d8:	12 c0       	rjmp	.+36     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
     4da:	a7 85       	ldd	r26, Z+15	; 0x0f
     4dc:	b0 e0       	ldi	r27, 0x00	; 0
     4de:	90 96       	adiw	r26, 0x20	; 32
     4e0:	2c 91       	ld	r18, X
     4e2:	90 97       	sbiw	r26, 0x20	; 32
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	01 88       	ldd	r0, Z+17	; 0x11
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     4ec:	88 0f       	add	r24, r24
     4ee:	99 1f       	adc	r25, r25
     4f0:	0a 94       	dec	r0
     4f2:	e2 f7       	brpl	.-8      	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
     4f4:	80 95       	com	r24
     4f6:	82 23       	and	r24, r18
     4f8:	90 96       	adiw	r26, 0x20	; 32
     4fa:	8c 93       	st	X, r24
     4fc:	10 c0       	rjmp	.+32     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
     4fe:	a7 85       	ldd	r26, Z+15	; 0x0f
     500:	b0 e0       	ldi	r27, 0x00	; 0
     502:	90 96       	adiw	r26, 0x20	; 32
     504:	2c 91       	ld	r18, X
     506:	90 97       	sbiw	r26, 0x20	; 32
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	01 88       	ldd	r0, Z+17	; 0x11
     50e:	02 c0       	rjmp	.+4      	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
     510:	88 0f       	add	r24, r24
     512:	99 1f       	adc	r25, r25
     514:	0a 94       	dec	r0
     516:	e2 f7       	brpl	.-8      	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
     518:	82 2b       	or	r24, r18
     51a:	90 96       	adiw	r26, 0x20	; 32
     51c:	8c 93       	st	X, r24
     51e:	63 fd       	sbrc	r22, 3
     520:	12 c0       	rjmp	.+36     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     522:	a2 89       	ldd	r26, Z+18	; 0x12
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	90 96       	adiw	r26, 0x20	; 32
     528:	2c 91       	ld	r18, X
     52a:	90 97       	sbiw	r26, 0x20	; 32
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	04 88       	ldd	r0, Z+20	; 0x14
     532:	02 c0       	rjmp	.+4      	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
     534:	88 0f       	add	r24, r24
     536:	99 1f       	adc	r25, r25
     538:	0a 94       	dec	r0
     53a:	e2 f7       	brpl	.-8      	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
     53c:	80 95       	com	r24
     53e:	82 23       	and	r24, r18
     540:	90 96       	adiw	r26, 0x20	; 32
     542:	8c 93       	st	X, r24
     544:	10 c0       	rjmp	.+32     	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
     546:	a2 89       	ldd	r26, Z+18	; 0x12
     548:	b0 e0       	ldi	r27, 0x00	; 0
     54a:	90 96       	adiw	r26, 0x20	; 32
     54c:	2c 91       	ld	r18, X
     54e:	90 97       	sbiw	r26, 0x20	; 32
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	04 88       	ldd	r0, Z+20	; 0x14
     556:	02 c0       	rjmp	.+4      	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
     558:	88 0f       	add	r24, r24
     55a:	99 1f       	adc	r25, r25
     55c:	0a 94       	dec	r0
     55e:	e2 f7       	brpl	.-8      	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
     560:	82 2b       	or	r24, r18
     562:	90 96       	adiw	r26, 0x20	; 32
     564:	8c 93       	st	X, r24
     566:	a0 81       	ld	r26, Z
     568:	b0 e0       	ldi	r27, 0x00	; 0
     56a:	90 96       	adiw	r26, 0x20	; 32
     56c:	4c 91       	ld	r20, X
     56e:	90 97       	sbiw	r26, 0x20	; 32
     570:	81 e0       	ldi	r24, 0x01	; 1
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	9c 01       	movw	r18, r24
     576:	02 80       	ldd	r0, Z+2	; 0x02
     578:	02 c0       	rjmp	.+4      	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
     57a:	22 0f       	add	r18, r18
     57c:	33 1f       	adc	r19, r19
     57e:	0a 94       	dec	r0
     580:	e2 f7       	brpl	.-8      	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
     582:	24 2b       	or	r18, r20
     584:	90 96       	adiw	r26, 0x20	; 32
     586:	2c 93       	st	X, r18
     588:	a6 81       	ldd	r26, Z+6	; 0x06
     58a:	b0 e0       	ldi	r27, 0x00	; 0
     58c:	90 96       	adiw	r26, 0x20	; 32
     58e:	4c 91       	ld	r20, X
     590:	90 97       	sbiw	r26, 0x20	; 32
     592:	9c 01       	movw	r18, r24
     594:	00 84       	ldd	r0, Z+8	; 0x08
     596:	02 c0       	rjmp	.+4      	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
     598:	22 0f       	add	r18, r18
     59a:	33 1f       	adc	r19, r19
     59c:	0a 94       	dec	r0
     59e:	e2 f7       	brpl	.-8      	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
     5a0:	24 2b       	or	r18, r20
     5a2:	90 96       	adiw	r26, 0x20	; 32
     5a4:	2c 93       	st	X, r18
     5a6:	af ec       	ldi	r26, 0xCF	; 207
     5a8:	b7 e0       	ldi	r27, 0x07	; 7
     5aa:	11 97       	sbiw	r26, 0x01	; 1
     5ac:	f1 f7       	brne	.-4      	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
     5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
     5b0:	00 00       	nop
     5b2:	a6 81       	ldd	r26, Z+6	; 0x06
     5b4:	b0 e0       	ldi	r27, 0x00	; 0
     5b6:	90 96       	adiw	r26, 0x20	; 32
     5b8:	3c 91       	ld	r19, X
     5ba:	90 97       	sbiw	r26, 0x20	; 32
     5bc:	ac 01       	movw	r20, r24
     5be:	00 84       	ldd	r0, Z+8	; 0x08
     5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
     5c2:	44 0f       	add	r20, r20
     5c4:	55 1f       	adc	r21, r21
     5c6:	0a 94       	dec	r0
     5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
     5ca:	24 2f       	mov	r18, r20
     5cc:	20 95       	com	r18
     5ce:	23 23       	and	r18, r19
     5d0:	90 96       	adiw	r26, 0x20	; 32
     5d2:	2c 93       	st	X, r18
     5d4:	a0 81       	ld	r26, Z
     5d6:	b0 e0       	ldi	r27, 0x00	; 0
     5d8:	90 96       	adiw	r26, 0x20	; 32
     5da:	2c 91       	ld	r18, X
     5dc:	90 97       	sbiw	r26, 0x20	; 32
     5de:	02 80       	ldd	r0, Z+2	; 0x02
     5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
     5e2:	88 0f       	add	r24, r24
     5e4:	99 1f       	adc	r25, r25
     5e6:	0a 94       	dec	r0
     5e8:	e2 f7       	brpl	.-8      	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
     5ea:	80 95       	com	r24
     5ec:	82 23       	and	r24, r18
     5ee:	90 96       	adiw	r26, 0x20	; 32
     5f0:	8c 93       	st	X, r24
     5f2:	8f ec       	ldi	r24, 0xCF	; 207
     5f4:	97 e0       	ldi	r25, 0x07	; 7
     5f6:	01 97       	sbiw	r24, 0x01	; 1
     5f8:	f1 f7       	brne	.-4      	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
     5fa:	00 c0       	rjmp	.+0      	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
     5fc:	00 00       	nop
     5fe:	08 95       	ret

00000600 <_ZN13Character_LCD10SendStringEPc>:
     600:	0f 93       	push	r16
     602:	1f 93       	push	r17
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	eb 01       	movw	r28, r22
     60a:	68 81       	ld	r22, Y
     60c:	66 23       	and	r22, r22
     60e:	41 f0       	breq	.+16     	; 0x620 <_ZN13Character_LCD10SendStringEPc+0x20>
     610:	8c 01       	movw	r16, r24
     612:	21 96       	adiw	r28, 0x01	; 1
     614:	c8 01       	movw	r24, r16
     616:	0e 94 46 01 	call	0x28c	; 0x28c <_ZN13Character_LCD8SendCharEh>
     61a:	69 91       	ld	r22, Y+
     61c:	61 11       	cpse	r22, r1
     61e:	fa cf       	rjmp	.-12     	; 0x614 <_ZN13Character_LCD10SendStringEPc+0x14>
     620:	df 91       	pop	r29
     622:	cf 91       	pop	r28
     624:	1f 91       	pop	r17
     626:	0f 91       	pop	r16
     628:	08 95       	ret

0000062a <_ZN13Character_LCD11SendCommandEh>:
     62a:	fc 01       	movw	r30, r24
     62c:	64 fd       	sbrc	r22, 4
     62e:	12 c0       	rjmp	.+36     	; 0x654 <_ZN13Character_LCD11SendCommandEh+0x2a>
     630:	a1 85       	ldd	r26, Z+9	; 0x09
     632:	b0 e0       	ldi	r27, 0x00	; 0
     634:	90 96       	adiw	r26, 0x20	; 32
     636:	2c 91       	ld	r18, X
     638:	90 97       	sbiw	r26, 0x20	; 32
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	03 84       	ldd	r0, Z+11	; 0x0b
     640:	02 c0       	rjmp	.+4      	; 0x646 <_ZN13Character_LCD11SendCommandEh+0x1c>
     642:	88 0f       	add	r24, r24
     644:	99 1f       	adc	r25, r25
     646:	0a 94       	dec	r0
     648:	e2 f7       	brpl	.-8      	; 0x642 <_ZN13Character_LCD11SendCommandEh+0x18>
     64a:	80 95       	com	r24
     64c:	82 23       	and	r24, r18
     64e:	90 96       	adiw	r26, 0x20	; 32
     650:	8c 93       	st	X, r24
     652:	10 c0       	rjmp	.+32     	; 0x674 <_ZN13Character_LCD11SendCommandEh+0x4a>
     654:	a1 85       	ldd	r26, Z+9	; 0x09
     656:	b0 e0       	ldi	r27, 0x00	; 0
     658:	90 96       	adiw	r26, 0x20	; 32
     65a:	2c 91       	ld	r18, X
     65c:	90 97       	sbiw	r26, 0x20	; 32
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	03 84       	ldd	r0, Z+11	; 0x0b
     664:	02 c0       	rjmp	.+4      	; 0x66a <_ZN13Character_LCD11SendCommandEh+0x40>
     666:	88 0f       	add	r24, r24
     668:	99 1f       	adc	r25, r25
     66a:	0a 94       	dec	r0
     66c:	e2 f7       	brpl	.-8      	; 0x666 <_ZN13Character_LCD11SendCommandEh+0x3c>
     66e:	82 2b       	or	r24, r18
     670:	90 96       	adiw	r26, 0x20	; 32
     672:	8c 93       	st	X, r24
     674:	65 fd       	sbrc	r22, 5
     676:	12 c0       	rjmp	.+36     	; 0x69c <_ZN13Character_LCD11SendCommandEh+0x72>
     678:	a4 85       	ldd	r26, Z+12	; 0x0c
     67a:	b0 e0       	ldi	r27, 0x00	; 0
     67c:	90 96       	adiw	r26, 0x20	; 32
     67e:	2c 91       	ld	r18, X
     680:	90 97       	sbiw	r26, 0x20	; 32
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	06 84       	ldd	r0, Z+14	; 0x0e
     688:	02 c0       	rjmp	.+4      	; 0x68e <_ZN13Character_LCD11SendCommandEh+0x64>
     68a:	88 0f       	add	r24, r24
     68c:	99 1f       	adc	r25, r25
     68e:	0a 94       	dec	r0
     690:	e2 f7       	brpl	.-8      	; 0x68a <_ZN13Character_LCD11SendCommandEh+0x60>
     692:	80 95       	com	r24
     694:	82 23       	and	r24, r18
     696:	90 96       	adiw	r26, 0x20	; 32
     698:	8c 93       	st	X, r24
     69a:	10 c0       	rjmp	.+32     	; 0x6bc <_ZN13Character_LCD11SendCommandEh+0x92>
     69c:	a4 85       	ldd	r26, Z+12	; 0x0c
     69e:	b0 e0       	ldi	r27, 0x00	; 0
     6a0:	90 96       	adiw	r26, 0x20	; 32
     6a2:	2c 91       	ld	r18, X
     6a4:	90 97       	sbiw	r26, 0x20	; 32
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	06 84       	ldd	r0, Z+14	; 0x0e
     6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <_ZN13Character_LCD11SendCommandEh+0x88>
     6ae:	88 0f       	add	r24, r24
     6b0:	99 1f       	adc	r25, r25
     6b2:	0a 94       	dec	r0
     6b4:	e2 f7       	brpl	.-8      	; 0x6ae <_ZN13Character_LCD11SendCommandEh+0x84>
     6b6:	82 2b       	or	r24, r18
     6b8:	90 96       	adiw	r26, 0x20	; 32
     6ba:	8c 93       	st	X, r24
     6bc:	66 fd       	sbrc	r22, 6
     6be:	12 c0       	rjmp	.+36     	; 0x6e4 <_ZN13Character_LCD11SendCommandEh+0xba>
     6c0:	a7 85       	ldd	r26, Z+15	; 0x0f
     6c2:	b0 e0       	ldi	r27, 0x00	; 0
     6c4:	90 96       	adiw	r26, 0x20	; 32
     6c6:	2c 91       	ld	r18, X
     6c8:	90 97       	sbiw	r26, 0x20	; 32
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	01 88       	ldd	r0, Z+17	; 0x11
     6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <_ZN13Character_LCD11SendCommandEh+0xac>
     6d2:	88 0f       	add	r24, r24
     6d4:	99 1f       	adc	r25, r25
     6d6:	0a 94       	dec	r0
     6d8:	e2 f7       	brpl	.-8      	; 0x6d2 <_ZN13Character_LCD11SendCommandEh+0xa8>
     6da:	80 95       	com	r24
     6dc:	82 23       	and	r24, r18
     6de:	90 96       	adiw	r26, 0x20	; 32
     6e0:	8c 93       	st	X, r24
     6e2:	10 c0       	rjmp	.+32     	; 0x704 <_ZN13Character_LCD11SendCommandEh+0xda>
     6e4:	a7 85       	ldd	r26, Z+15	; 0x0f
     6e6:	b0 e0       	ldi	r27, 0x00	; 0
     6e8:	90 96       	adiw	r26, 0x20	; 32
     6ea:	2c 91       	ld	r18, X
     6ec:	90 97       	sbiw	r26, 0x20	; 32
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	01 88       	ldd	r0, Z+17	; 0x11
     6f4:	02 c0       	rjmp	.+4      	; 0x6fa <_ZN13Character_LCD11SendCommandEh+0xd0>
     6f6:	88 0f       	add	r24, r24
     6f8:	99 1f       	adc	r25, r25
     6fa:	0a 94       	dec	r0
     6fc:	e2 f7       	brpl	.-8      	; 0x6f6 <_ZN13Character_LCD11SendCommandEh+0xcc>
     6fe:	82 2b       	or	r24, r18
     700:	90 96       	adiw	r26, 0x20	; 32
     702:	8c 93       	st	X, r24
     704:	66 23       	and	r22, r22
     706:	94 f0       	brlt	.+36     	; 0x72c <_ZN13Character_LCD11SendCommandEh+0x102>
     708:	a2 89       	ldd	r26, Z+18	; 0x12
     70a:	b0 e0       	ldi	r27, 0x00	; 0
     70c:	90 96       	adiw	r26, 0x20	; 32
     70e:	2c 91       	ld	r18, X
     710:	90 97       	sbiw	r26, 0x20	; 32
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	04 88       	ldd	r0, Z+20	; 0x14
     718:	02 c0       	rjmp	.+4      	; 0x71e <_ZN13Character_LCD11SendCommandEh+0xf4>
     71a:	88 0f       	add	r24, r24
     71c:	99 1f       	adc	r25, r25
     71e:	0a 94       	dec	r0
     720:	e2 f7       	brpl	.-8      	; 0x71a <_ZN13Character_LCD11SendCommandEh+0xf0>
     722:	80 95       	com	r24
     724:	82 23       	and	r24, r18
     726:	90 96       	adiw	r26, 0x20	; 32
     728:	8c 93       	st	X, r24
     72a:	10 c0       	rjmp	.+32     	; 0x74c <_ZN13Character_LCD11SendCommandEh+0x122>
     72c:	a2 89       	ldd	r26, Z+18	; 0x12
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	90 96       	adiw	r26, 0x20	; 32
     732:	2c 91       	ld	r18, X
     734:	90 97       	sbiw	r26, 0x20	; 32
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	04 88       	ldd	r0, Z+20	; 0x14
     73c:	02 c0       	rjmp	.+4      	; 0x742 <_ZN13Character_LCD11SendCommandEh+0x118>
     73e:	88 0f       	add	r24, r24
     740:	99 1f       	adc	r25, r25
     742:	0a 94       	dec	r0
     744:	e2 f7       	brpl	.-8      	; 0x73e <_ZN13Character_LCD11SendCommandEh+0x114>
     746:	82 2b       	or	r24, r18
     748:	90 96       	adiw	r26, 0x20	; 32
     74a:	8c 93       	st	X, r24
     74c:	a6 81       	ldd	r26, Z+6	; 0x06
     74e:	b0 e0       	ldi	r27, 0x00	; 0
     750:	90 96       	adiw	r26, 0x20	; 32
     752:	4c 91       	ld	r20, X
     754:	90 97       	sbiw	r26, 0x20	; 32
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	9c 01       	movw	r18, r24
     75c:	00 84       	ldd	r0, Z+8	; 0x08
     75e:	02 c0       	rjmp	.+4      	; 0x764 <_ZN13Character_LCD11SendCommandEh+0x13a>
     760:	22 0f       	add	r18, r18
     762:	33 1f       	adc	r19, r19
     764:	0a 94       	dec	r0
     766:	e2 f7       	brpl	.-8      	; 0x760 <_ZN13Character_LCD11SendCommandEh+0x136>
     768:	24 2b       	or	r18, r20
     76a:	90 96       	adiw	r26, 0x20	; 32
     76c:	2c 93       	st	X, r18
     76e:	af ec       	ldi	r26, 0xCF	; 207
     770:	b7 e0       	ldi	r27, 0x07	; 7
     772:	11 97       	sbiw	r26, 0x01	; 1
     774:	f1 f7       	brne	.-4      	; 0x772 <_ZN13Character_LCD11SendCommandEh+0x148>
     776:	00 c0       	rjmp	.+0      	; 0x778 <_ZN13Character_LCD11SendCommandEh+0x14e>
     778:	00 00       	nop
     77a:	a6 81       	ldd	r26, Z+6	; 0x06
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	90 96       	adiw	r26, 0x20	; 32
     780:	2c 91       	ld	r18, X
     782:	90 97       	sbiw	r26, 0x20	; 32
     784:	00 84       	ldd	r0, Z+8	; 0x08
     786:	02 c0       	rjmp	.+4      	; 0x78c <_ZN13Character_LCD11SendCommandEh+0x162>
     788:	88 0f       	add	r24, r24
     78a:	99 1f       	adc	r25, r25
     78c:	0a 94       	dec	r0
     78e:	e2 f7       	brpl	.-8      	; 0x788 <_ZN13Character_LCD11SendCommandEh+0x15e>
     790:	80 95       	com	r24
     792:	82 23       	and	r24, r18
     794:	90 96       	adiw	r26, 0x20	; 32
     796:	8c 93       	st	X, r24
     798:	8f ec       	ldi	r24, 0xCF	; 207
     79a:	97 e0       	ldi	r25, 0x07	; 7
     79c:	01 97       	sbiw	r24, 0x01	; 1
     79e:	f1 f7       	brne	.-4      	; 0x79c <_ZN13Character_LCD11SendCommandEh+0x172>
     7a0:	00 c0       	rjmp	.+0      	; 0x7a2 <_ZN13Character_LCD11SendCommandEh+0x178>
     7a2:	00 00       	nop
     7a4:	60 fd       	sbrc	r22, 0
     7a6:	12 c0       	rjmp	.+36     	; 0x7cc <_ZN13Character_LCD11SendCommandEh+0x1a2>
     7a8:	a1 85       	ldd	r26, Z+9	; 0x09
     7aa:	b0 e0       	ldi	r27, 0x00	; 0
     7ac:	90 96       	adiw	r26, 0x20	; 32
     7ae:	2c 91       	ld	r18, X
     7b0:	90 97       	sbiw	r26, 0x20	; 32
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	03 84       	ldd	r0, Z+11	; 0x0b
     7b8:	02 c0       	rjmp	.+4      	; 0x7be <_ZN13Character_LCD11SendCommandEh+0x194>
     7ba:	88 0f       	add	r24, r24
     7bc:	99 1f       	adc	r25, r25
     7be:	0a 94       	dec	r0
     7c0:	e2 f7       	brpl	.-8      	; 0x7ba <_ZN13Character_LCD11SendCommandEh+0x190>
     7c2:	80 95       	com	r24
     7c4:	82 23       	and	r24, r18
     7c6:	90 96       	adiw	r26, 0x20	; 32
     7c8:	8c 93       	st	X, r24
     7ca:	10 c0       	rjmp	.+32     	; 0x7ec <_ZN13Character_LCD11SendCommandEh+0x1c2>
     7cc:	a1 85       	ldd	r26, Z+9	; 0x09
     7ce:	b0 e0       	ldi	r27, 0x00	; 0
     7d0:	90 96       	adiw	r26, 0x20	; 32
     7d2:	2c 91       	ld	r18, X
     7d4:	90 97       	sbiw	r26, 0x20	; 32
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	03 84       	ldd	r0, Z+11	; 0x0b
     7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <_ZN13Character_LCD11SendCommandEh+0x1b8>
     7de:	88 0f       	add	r24, r24
     7e0:	99 1f       	adc	r25, r25
     7e2:	0a 94       	dec	r0
     7e4:	e2 f7       	brpl	.-8      	; 0x7de <_ZN13Character_LCD11SendCommandEh+0x1b4>
     7e6:	82 2b       	or	r24, r18
     7e8:	90 96       	adiw	r26, 0x20	; 32
     7ea:	8c 93       	st	X, r24
     7ec:	61 fd       	sbrc	r22, 1
     7ee:	12 c0       	rjmp	.+36     	; 0x814 <_ZN13Character_LCD11SendCommandEh+0x1ea>
     7f0:	a4 85       	ldd	r26, Z+12	; 0x0c
     7f2:	b0 e0       	ldi	r27, 0x00	; 0
     7f4:	90 96       	adiw	r26, 0x20	; 32
     7f6:	2c 91       	ld	r18, X
     7f8:	90 97       	sbiw	r26, 0x20	; 32
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	06 84       	ldd	r0, Z+14	; 0x0e
     800:	02 c0       	rjmp	.+4      	; 0x806 <_ZN13Character_LCD11SendCommandEh+0x1dc>
     802:	88 0f       	add	r24, r24
     804:	99 1f       	adc	r25, r25
     806:	0a 94       	dec	r0
     808:	e2 f7       	brpl	.-8      	; 0x802 <_ZN13Character_LCD11SendCommandEh+0x1d8>
     80a:	80 95       	com	r24
     80c:	82 23       	and	r24, r18
     80e:	90 96       	adiw	r26, 0x20	; 32
     810:	8c 93       	st	X, r24
     812:	10 c0       	rjmp	.+32     	; 0x834 <_ZN13Character_LCD11SendCommandEh+0x20a>
     814:	a4 85       	ldd	r26, Z+12	; 0x0c
     816:	b0 e0       	ldi	r27, 0x00	; 0
     818:	90 96       	adiw	r26, 0x20	; 32
     81a:	2c 91       	ld	r18, X
     81c:	90 97       	sbiw	r26, 0x20	; 32
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	06 84       	ldd	r0, Z+14	; 0x0e
     824:	02 c0       	rjmp	.+4      	; 0x82a <_ZN13Character_LCD11SendCommandEh+0x200>
     826:	88 0f       	add	r24, r24
     828:	99 1f       	adc	r25, r25
     82a:	0a 94       	dec	r0
     82c:	e2 f7       	brpl	.-8      	; 0x826 <_ZN13Character_LCD11SendCommandEh+0x1fc>
     82e:	82 2b       	or	r24, r18
     830:	90 96       	adiw	r26, 0x20	; 32
     832:	8c 93       	st	X, r24
     834:	62 fd       	sbrc	r22, 2
     836:	12 c0       	rjmp	.+36     	; 0x85c <_ZN13Character_LCD11SendCommandEh+0x232>
     838:	a7 85       	ldd	r26, Z+15	; 0x0f
     83a:	b0 e0       	ldi	r27, 0x00	; 0
     83c:	90 96       	adiw	r26, 0x20	; 32
     83e:	2c 91       	ld	r18, X
     840:	90 97       	sbiw	r26, 0x20	; 32
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	01 88       	ldd	r0, Z+17	; 0x11
     848:	02 c0       	rjmp	.+4      	; 0x84e <_ZN13Character_LCD11SendCommandEh+0x224>
     84a:	88 0f       	add	r24, r24
     84c:	99 1f       	adc	r25, r25
     84e:	0a 94       	dec	r0
     850:	e2 f7       	brpl	.-8      	; 0x84a <_ZN13Character_LCD11SendCommandEh+0x220>
     852:	80 95       	com	r24
     854:	82 23       	and	r24, r18
     856:	90 96       	adiw	r26, 0x20	; 32
     858:	8c 93       	st	X, r24
     85a:	10 c0       	rjmp	.+32     	; 0x87c <__stack+0x1d>
     85c:	a7 85       	ldd	r26, Z+15	; 0x0f
     85e:	b0 e0       	ldi	r27, 0x00	; 0
     860:	90 96       	adiw	r26, 0x20	; 32
     862:	2c 91       	ld	r18, X
     864:	90 97       	sbiw	r26, 0x20	; 32
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	01 88       	ldd	r0, Z+17	; 0x11
     86c:	02 c0       	rjmp	.+4      	; 0x872 <__stack+0x13>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	0a 94       	dec	r0
     874:	e2 f7       	brpl	.-8      	; 0x86e <__stack+0xf>
     876:	82 2b       	or	r24, r18
     878:	90 96       	adiw	r26, 0x20	; 32
     87a:	8c 93       	st	X, r24
     87c:	63 fd       	sbrc	r22, 3
     87e:	12 c0       	rjmp	.+36     	; 0x8a4 <__stack+0x45>
     880:	a2 89       	ldd	r26, Z+18	; 0x12
     882:	b0 e0       	ldi	r27, 0x00	; 0
     884:	90 96       	adiw	r26, 0x20	; 32
     886:	2c 91       	ld	r18, X
     888:	90 97       	sbiw	r26, 0x20	; 32
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	04 88       	ldd	r0, Z+20	; 0x14
     890:	02 c0       	rjmp	.+4      	; 0x896 <__stack+0x37>
     892:	88 0f       	add	r24, r24
     894:	99 1f       	adc	r25, r25
     896:	0a 94       	dec	r0
     898:	e2 f7       	brpl	.-8      	; 0x892 <__stack+0x33>
     89a:	80 95       	com	r24
     89c:	82 23       	and	r24, r18
     89e:	90 96       	adiw	r26, 0x20	; 32
     8a0:	8c 93       	st	X, r24
     8a2:	10 c0       	rjmp	.+32     	; 0x8c4 <__stack+0x65>
     8a4:	a2 89       	ldd	r26, Z+18	; 0x12
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	90 96       	adiw	r26, 0x20	; 32
     8aa:	2c 91       	ld	r18, X
     8ac:	90 97       	sbiw	r26, 0x20	; 32
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	04 88       	ldd	r0, Z+20	; 0x14
     8b4:	02 c0       	rjmp	.+4      	; 0x8ba <__stack+0x5b>
     8b6:	88 0f       	add	r24, r24
     8b8:	99 1f       	adc	r25, r25
     8ba:	0a 94       	dec	r0
     8bc:	e2 f7       	brpl	.-8      	; 0x8b6 <__stack+0x57>
     8be:	82 2b       	or	r24, r18
     8c0:	90 96       	adiw	r26, 0x20	; 32
     8c2:	8c 93       	st	X, r24
     8c4:	a6 81       	ldd	r26, Z+6	; 0x06
     8c6:	b0 e0       	ldi	r27, 0x00	; 0
     8c8:	90 96       	adiw	r26, 0x20	; 32
     8ca:	4c 91       	ld	r20, X
     8cc:	90 97       	sbiw	r26, 0x20	; 32
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	9c 01       	movw	r18, r24
     8d4:	00 84       	ldd	r0, Z+8	; 0x08
     8d6:	02 c0       	rjmp	.+4      	; 0x8dc <__stack+0x7d>
     8d8:	22 0f       	add	r18, r18
     8da:	33 1f       	adc	r19, r19
     8dc:	0a 94       	dec	r0
     8de:	e2 f7       	brpl	.-8      	; 0x8d8 <__stack+0x79>
     8e0:	24 2b       	or	r18, r20
     8e2:	90 96       	adiw	r26, 0x20	; 32
     8e4:	2c 93       	st	X, r18
     8e6:	af ec       	ldi	r26, 0xCF	; 207
     8e8:	b7 e0       	ldi	r27, 0x07	; 7
     8ea:	11 97       	sbiw	r26, 0x01	; 1
     8ec:	f1 f7       	brne	.-4      	; 0x8ea <__stack+0x8b>
     8ee:	00 c0       	rjmp	.+0      	; 0x8f0 <__stack+0x91>
     8f0:	00 00       	nop
     8f2:	a6 81       	ldd	r26, Z+6	; 0x06
     8f4:	b0 e0       	ldi	r27, 0x00	; 0
     8f6:	90 96       	adiw	r26, 0x20	; 32
     8f8:	2c 91       	ld	r18, X
     8fa:	90 97       	sbiw	r26, 0x20	; 32
     8fc:	00 84       	ldd	r0, Z+8	; 0x08
     8fe:	02 c0       	rjmp	.+4      	; 0x904 <__stack+0xa5>
     900:	88 0f       	add	r24, r24
     902:	99 1f       	adc	r25, r25
     904:	0a 94       	dec	r0
     906:	e2 f7       	brpl	.-8      	; 0x900 <__stack+0xa1>
     908:	80 95       	com	r24
     90a:	82 23       	and	r24, r18
     90c:	90 96       	adiw	r26, 0x20	; 32
     90e:	8c 93       	st	X, r24
     910:	8f ec       	ldi	r24, 0xCF	; 207
     912:	97 e0       	ldi	r25, 0x07	; 7
     914:	01 97       	sbiw	r24, 0x01	; 1
     916:	f1 f7       	brne	.-4      	; 0x914 <__stack+0xb5>
     918:	00 c0       	rjmp	.+0      	; 0x91a <__stack+0xbb>
     91a:	00 00       	nop
     91c:	08 95       	ret

0000091e <_ZN13Character_LCD3ClrEv>:
     91e:	61 e0       	ldi	r22, 0x01	; 1
     920:	0e 94 15 03 	call	0x62a	; 0x62a <_ZN13Character_LCD11SendCommandEh>
     924:	8f ec       	ldi	r24, 0xCF	; 207
     926:	97 e0       	ldi	r25, 0x07	; 7
     928:	01 97       	sbiw	r24, 0x01	; 1
     92a:	f1 f7       	brne	.-4      	; 0x928 <_ZN13Character_LCD3ClrEv+0xa>
     92c:	00 c0       	rjmp	.+0      	; 0x92e <_ZN13Character_LCD3ClrEv+0x10>
     92e:	00 00       	nop
     930:	08 95       	ret

00000932 <_ZN13Character_LCD6GotoXYEhh>:
     932:	42 30       	cpi	r20, 0x02	; 2
     934:	31 f0       	breq	.+12     	; 0x942 <_ZN13Character_LCD6GotoXYEhh+0x10>
     936:	43 30       	cpi	r20, 0x03	; 3
     938:	31 f0       	breq	.+12     	; 0x946 <_ZN13Character_LCD6GotoXYEhh+0x14>
     93a:	41 30       	cpi	r20, 0x01	; 1
     93c:	29 f4       	brne	.+10     	; 0x948 <_ZN13Character_LCD6GotoXYEhh+0x16>
     93e:	60 5c       	subi	r22, 0xC0	; 192
     940:	03 c0       	rjmp	.+6      	; 0x948 <_ZN13Character_LCD6GotoXYEhh+0x16>
     942:	6c 5e       	subi	r22, 0xEC	; 236
     944:	01 c0       	rjmp	.+2      	; 0x948 <_ZN13Character_LCD6GotoXYEhh+0x16>
     946:	6c 5a       	subi	r22, 0xAC	; 172
     948:	60 68       	ori	r22, 0x80	; 128
     94a:	0e 94 15 03 	call	0x62a	; 0x62a <_ZN13Character_LCD11SendCommandEh>
     94e:	8f ec       	ldi	r24, 0xCF	; 207
     950:	97 e0       	ldi	r25, 0x07	; 7
     952:	01 97       	sbiw	r24, 0x01	; 1
     954:	f1 f7       	brne	.-4      	; 0x952 <_ZN13Character_LCD6GotoXYEhh+0x20>
     956:	00 c0       	rjmp	.+0      	; 0x958 <_ZN13Character_LCD6GotoXYEhh+0x26>
     958:	00 00       	nop
     95a:	08 95       	ret

0000095c <_ZN13Character_LCD4InitEhh>:
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
     960:	ec 01       	movw	r28, r24
     962:	8f e2       	ldi	r24, 0x2F	; 47
     964:	95 e7       	ldi	r25, 0x75	; 117
     966:	01 97       	sbiw	r24, 0x01	; 1
     968:	f1 f7       	brne	.-4      	; 0x966 <_ZN13Character_LCD4InitEhh+0xa>
     96a:	00 c0       	rjmp	.+0      	; 0x96c <_ZN13Character_LCD4InitEhh+0x10>
     96c:	00 00       	nop
     96e:	e9 85       	ldd	r30, Y+9	; 0x09
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	30 a1       	ldd	r19, Z+32	; 0x20
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	ac 01       	movw	r20, r24
     97a:	0b 84       	ldd	r0, Y+11	; 0x0b
     97c:	02 c0       	rjmp	.+4      	; 0x982 <_ZN13Character_LCD4InitEhh+0x26>
     97e:	44 0f       	add	r20, r20
     980:	55 1f       	adc	r21, r21
     982:	0a 94       	dec	r0
     984:	e2 f7       	brpl	.-8      	; 0x97e <_ZN13Character_LCD4InitEhh+0x22>
     986:	24 2f       	mov	r18, r20
     988:	20 95       	com	r18
     98a:	23 23       	and	r18, r19
     98c:	20 a3       	std	Z+32, r18	; 0x20
     98e:	ec 85       	ldd	r30, Y+12	; 0x0c
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	30 a1       	ldd	r19, Z+32	; 0x20
     994:	ac 01       	movw	r20, r24
     996:	0e 84       	ldd	r0, Y+14	; 0x0e
     998:	02 c0       	rjmp	.+4      	; 0x99e <_ZN13Character_LCD4InitEhh+0x42>
     99a:	44 0f       	add	r20, r20
     99c:	55 1f       	adc	r21, r21
     99e:	0a 94       	dec	r0
     9a0:	e2 f7       	brpl	.-8      	; 0x99a <_ZN13Character_LCD4InitEhh+0x3e>
     9a2:	24 2f       	mov	r18, r20
     9a4:	20 95       	com	r18
     9a6:	23 23       	and	r18, r19
     9a8:	20 a3       	std	Z+32, r18	; 0x20
     9aa:	ef 85       	ldd	r30, Y+15	; 0x0f
     9ac:	f0 e0       	ldi	r31, 0x00	; 0
     9ae:	30 a1       	ldd	r19, Z+32	; 0x20
     9b0:	ac 01       	movw	r20, r24
     9b2:	09 88       	ldd	r0, Y+17	; 0x11
     9b4:	02 c0       	rjmp	.+4      	; 0x9ba <_ZN13Character_LCD4InitEhh+0x5e>
     9b6:	44 0f       	add	r20, r20
     9b8:	55 1f       	adc	r21, r21
     9ba:	0a 94       	dec	r0
     9bc:	e2 f7       	brpl	.-8      	; 0x9b6 <_ZN13Character_LCD4InitEhh+0x5a>
     9be:	24 2f       	mov	r18, r20
     9c0:	20 95       	com	r18
     9c2:	23 23       	and	r18, r19
     9c4:	20 a3       	std	Z+32, r18	; 0x20
     9c6:	ea 89       	ldd	r30, Y+18	; 0x12
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
     9ca:	30 a1       	ldd	r19, Z+32	; 0x20
     9cc:	ac 01       	movw	r20, r24
     9ce:	0c 88       	ldd	r0, Y+20	; 0x14
     9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <_ZN13Character_LCD4InitEhh+0x7a>
     9d2:	44 0f       	add	r20, r20
     9d4:	55 1f       	adc	r21, r21
     9d6:	0a 94       	dec	r0
     9d8:	e2 f7       	brpl	.-8      	; 0x9d2 <_ZN13Character_LCD4InitEhh+0x76>
     9da:	24 2f       	mov	r18, r20
     9dc:	20 95       	com	r18
     9de:	23 23       	and	r18, r19
     9e0:	20 a3       	std	Z+32, r18	; 0x20
     9e2:	ee 81       	ldd	r30, Y+6	; 0x06
     9e4:	f0 e0       	ldi	r31, 0x00	; 0
     9e6:	30 a1       	ldd	r19, Z+32	; 0x20
     9e8:	ac 01       	movw	r20, r24
     9ea:	08 84       	ldd	r0, Y+8	; 0x08
     9ec:	02 c0       	rjmp	.+4      	; 0x9f2 <_ZN13Character_LCD4InitEhh+0x96>
     9ee:	44 0f       	add	r20, r20
     9f0:	55 1f       	adc	r21, r21
     9f2:	0a 94       	dec	r0
     9f4:	e2 f7       	brpl	.-8      	; 0x9ee <_ZN13Character_LCD4InitEhh+0x92>
     9f6:	24 2f       	mov	r18, r20
     9f8:	20 95       	com	r18
     9fa:	23 23       	and	r18, r19
     9fc:	20 a3       	std	Z+32, r18	; 0x20
     9fe:	ea 85       	ldd	r30, Y+10	; 0x0a
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	40 a1       	ldd	r20, Z+32	; 0x20
     a04:	9c 01       	movw	r18, r24
     a06:	0b 84       	ldd	r0, Y+11	; 0x0b
     a08:	02 c0       	rjmp	.+4      	; 0xa0e <_ZN13Character_LCD4InitEhh+0xb2>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	0a 94       	dec	r0
     a10:	e2 f7       	brpl	.-8      	; 0xa0a <_ZN13Character_LCD4InitEhh+0xae>
     a12:	24 2b       	or	r18, r20
     a14:	20 a3       	std	Z+32, r18	; 0x20
     a16:	ed 85       	ldd	r30, Y+13	; 0x0d
     a18:	f0 e0       	ldi	r31, 0x00	; 0
     a1a:	40 a1       	ldd	r20, Z+32	; 0x20
     a1c:	9c 01       	movw	r18, r24
     a1e:	0e 84       	ldd	r0, Y+14	; 0x0e
     a20:	02 c0       	rjmp	.+4      	; 0xa26 <_ZN13Character_LCD4InitEhh+0xca>
     a22:	22 0f       	add	r18, r18
     a24:	33 1f       	adc	r19, r19
     a26:	0a 94       	dec	r0
     a28:	e2 f7       	brpl	.-8      	; 0xa22 <_ZN13Character_LCD4InitEhh+0xc6>
     a2a:	24 2b       	or	r18, r20
     a2c:	20 a3       	std	Z+32, r18	; 0x20
     a2e:	e8 89       	ldd	r30, Y+16	; 0x10
     a30:	f0 e0       	ldi	r31, 0x00	; 0
     a32:	40 a1       	ldd	r20, Z+32	; 0x20
     a34:	9c 01       	movw	r18, r24
     a36:	09 88       	ldd	r0, Y+17	; 0x11
     a38:	02 c0       	rjmp	.+4      	; 0xa3e <_ZN13Character_LCD4InitEhh+0xe2>
     a3a:	22 0f       	add	r18, r18
     a3c:	33 1f       	adc	r19, r19
     a3e:	0a 94       	dec	r0
     a40:	e2 f7       	brpl	.-8      	; 0xa3a <_ZN13Character_LCD4InitEhh+0xde>
     a42:	24 2b       	or	r18, r20
     a44:	20 a3       	std	Z+32, r18	; 0x20
     a46:	eb 89       	ldd	r30, Y+19	; 0x13
     a48:	f0 e0       	ldi	r31, 0x00	; 0
     a4a:	40 a1       	ldd	r20, Z+32	; 0x20
     a4c:	9c 01       	movw	r18, r24
     a4e:	0c 88       	ldd	r0, Y+20	; 0x14
     a50:	02 c0       	rjmp	.+4      	; 0xa56 <_ZN13Character_LCD4InitEhh+0xfa>
     a52:	22 0f       	add	r18, r18
     a54:	33 1f       	adc	r19, r19
     a56:	0a 94       	dec	r0
     a58:	e2 f7       	brpl	.-8      	; 0xa52 <_ZN13Character_LCD4InitEhh+0xf6>
     a5a:	24 2b       	or	r18, r20
     a5c:	20 a3       	std	Z+32, r18	; 0x20
     a5e:	ef 81       	ldd	r30, Y+7	; 0x07
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	40 a1       	ldd	r20, Z+32	; 0x20
     a64:	9c 01       	movw	r18, r24
     a66:	08 84       	ldd	r0, Y+8	; 0x08
     a68:	02 c0       	rjmp	.+4      	; 0xa6e <_ZN13Character_LCD4InitEhh+0x112>
     a6a:	22 0f       	add	r18, r18
     a6c:	33 1f       	adc	r19, r19
     a6e:	0a 94       	dec	r0
     a70:	e2 f7       	brpl	.-8      	; 0xa6a <_ZN13Character_LCD4InitEhh+0x10e>
     a72:	24 2b       	or	r18, r20
     a74:	20 a3       	std	Z+32, r18	; 0x20
     a76:	e9 81       	ldd	r30, Y+1	; 0x01
     a78:	f0 e0       	ldi	r31, 0x00	; 0
     a7a:	40 a1       	ldd	r20, Z+32	; 0x20
     a7c:	9c 01       	movw	r18, r24
     a7e:	0a 80       	ldd	r0, Y+2	; 0x02
     a80:	02 c0       	rjmp	.+4      	; 0xa86 <_ZN13Character_LCD4InitEhh+0x12a>
     a82:	22 0f       	add	r18, r18
     a84:	33 1f       	adc	r19, r19
     a86:	0a 94       	dec	r0
     a88:	e2 f7       	brpl	.-8      	; 0xa82 <_ZN13Character_LCD4InitEhh+0x126>
     a8a:	24 2b       	or	r18, r20
     a8c:	20 a3       	std	Z+32, r18	; 0x20
     a8e:	ec 81       	ldd	r30, Y+4	; 0x04
     a90:	f0 e0       	ldi	r31, 0x00	; 0
     a92:	40 a1       	ldd	r20, Z+32	; 0x20
     a94:	9c 01       	movw	r18, r24
     a96:	0d 80       	ldd	r0, Y+5	; 0x05
     a98:	02 c0       	rjmp	.+4      	; 0xa9e <_ZN13Character_LCD4InitEhh+0x142>
     a9a:	22 0f       	add	r18, r18
     a9c:	33 1f       	adc	r19, r19
     a9e:	0a 94       	dec	r0
     aa0:	e2 f7       	brpl	.-8      	; 0xa9a <_ZN13Character_LCD4InitEhh+0x13e>
     aa2:	24 2b       	or	r18, r20
     aa4:	20 a3       	std	Z+32, r18	; 0x20
     aa6:	e9 85       	ldd	r30, Y+9	; 0x09
     aa8:	f0 e0       	ldi	r31, 0x00	; 0
     aaa:	40 a1       	ldd	r20, Z+32	; 0x20
     aac:	9c 01       	movw	r18, r24
     aae:	0b 84       	ldd	r0, Y+11	; 0x0b
     ab0:	02 c0       	rjmp	.+4      	; 0xab6 <_ZN13Character_LCD4InitEhh+0x15a>
     ab2:	22 0f       	add	r18, r18
     ab4:	33 1f       	adc	r19, r19
     ab6:	0a 94       	dec	r0
     ab8:	e2 f7       	brpl	.-8      	; 0xab2 <_ZN13Character_LCD4InitEhh+0x156>
     aba:	24 2b       	or	r18, r20
     abc:	20 a3       	std	Z+32, r18	; 0x20
     abe:	ec 85       	ldd	r30, Y+12	; 0x0c
     ac0:	f0 e0       	ldi	r31, 0x00	; 0
     ac2:	40 a1       	ldd	r20, Z+32	; 0x20
     ac4:	9c 01       	movw	r18, r24
     ac6:	0e 84       	ldd	r0, Y+14	; 0x0e
     ac8:	02 c0       	rjmp	.+4      	; 0xace <_ZN13Character_LCD4InitEhh+0x172>
     aca:	22 0f       	add	r18, r18
     acc:	33 1f       	adc	r19, r19
     ace:	0a 94       	dec	r0
     ad0:	e2 f7       	brpl	.-8      	; 0xaca <_ZN13Character_LCD4InitEhh+0x16e>
     ad2:	24 2b       	or	r18, r20
     ad4:	20 a3       	std	Z+32, r18	; 0x20
     ad6:	ef 85       	ldd	r30, Y+15	; 0x0f
     ad8:	f0 e0       	ldi	r31, 0x00	; 0
     ada:	30 a1       	ldd	r19, Z+32	; 0x20
     adc:	ac 01       	movw	r20, r24
     ade:	09 88       	ldd	r0, Y+17	; 0x11
     ae0:	02 c0       	rjmp	.+4      	; 0xae6 <_ZN13Character_LCD4InitEhh+0x18a>
     ae2:	44 0f       	add	r20, r20
     ae4:	55 1f       	adc	r21, r21
     ae6:	0a 94       	dec	r0
     ae8:	e2 f7       	brpl	.-8      	; 0xae2 <_ZN13Character_LCD4InitEhh+0x186>
     aea:	24 2f       	mov	r18, r20
     aec:	20 95       	com	r18
     aee:	23 23       	and	r18, r19
     af0:	20 a3       	std	Z+32, r18	; 0x20
     af2:	ea 89       	ldd	r30, Y+18	; 0x12
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	30 a1       	ldd	r19, Z+32	; 0x20
     af8:	ac 01       	movw	r20, r24
     afa:	0c 88       	ldd	r0, Y+20	; 0x14
     afc:	02 c0       	rjmp	.+4      	; 0xb02 <_ZN13Character_LCD4InitEhh+0x1a6>
     afe:	44 0f       	add	r20, r20
     b00:	55 1f       	adc	r21, r21
     b02:	0a 94       	dec	r0
     b04:	e2 f7       	brpl	.-8      	; 0xafe <_ZN13Character_LCD4InitEhh+0x1a2>
     b06:	24 2f       	mov	r18, r20
     b08:	20 95       	com	r18
     b0a:	23 23       	and	r18, r19
     b0c:	20 a3       	std	Z+32, r18	; 0x20
     b0e:	ee 81       	ldd	r30, Y+6	; 0x06
     b10:	f0 e0       	ldi	r31, 0x00	; 0
     b12:	40 a1       	ldd	r20, Z+32	; 0x20
     b14:	9c 01       	movw	r18, r24
     b16:	08 84       	ldd	r0, Y+8	; 0x08
     b18:	02 c0       	rjmp	.+4      	; 0xb1e <_ZN13Character_LCD4InitEhh+0x1c2>
     b1a:	22 0f       	add	r18, r18
     b1c:	33 1f       	adc	r19, r19
     b1e:	0a 94       	dec	r0
     b20:	e2 f7       	brpl	.-8      	; 0xb1a <_ZN13Character_LCD4InitEhh+0x1be>
     b22:	24 2b       	or	r18, r20
     b24:	20 a3       	std	Z+32, r18	; 0x20
     b26:	e8 81       	ld	r30, Y
     b28:	f0 e0       	ldi	r31, 0x00	; 0
     b2a:	30 a1       	ldd	r19, Z+32	; 0x20
     b2c:	ac 01       	movw	r20, r24
     b2e:	0a 80       	ldd	r0, Y+2	; 0x02
     b30:	02 c0       	rjmp	.+4      	; 0xb36 <_ZN13Character_LCD4InitEhh+0x1da>
     b32:	44 0f       	add	r20, r20
     b34:	55 1f       	adc	r21, r21
     b36:	0a 94       	dec	r0
     b38:	e2 f7       	brpl	.-8      	; 0xb32 <_ZN13Character_LCD4InitEhh+0x1d6>
     b3a:	24 2f       	mov	r18, r20
     b3c:	20 95       	com	r18
     b3e:	23 23       	and	r18, r19
     b40:	20 a3       	std	Z+32, r18	; 0x20
     b42:	eb 81       	ldd	r30, Y+3	; 0x03
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	30 a1       	ldd	r19, Z+32	; 0x20
     b48:	ac 01       	movw	r20, r24
     b4a:	0d 80       	ldd	r0, Y+5	; 0x05
     b4c:	02 c0       	rjmp	.+4      	; 0xb52 <_ZN13Character_LCD4InitEhh+0x1f6>
     b4e:	44 0f       	add	r20, r20
     b50:	55 1f       	adc	r21, r21
     b52:	0a 94       	dec	r0
     b54:	e2 f7       	brpl	.-8      	; 0xb4e <_ZN13Character_LCD4InitEhh+0x1f2>
     b56:	24 2f       	mov	r18, r20
     b58:	20 95       	com	r18
     b5a:	23 23       	and	r18, r19
     b5c:	20 a3       	std	Z+32, r18	; 0x20
     b5e:	ef ec       	ldi	r30, 0xCF	; 207
     b60:	f7 e0       	ldi	r31, 0x07	; 7
     b62:	31 97       	sbiw	r30, 0x01	; 1
     b64:	f1 f7       	brne	.-4      	; 0xb62 <_ZN13Character_LCD4InitEhh+0x206>
     b66:	00 c0       	rjmp	.+0      	; 0xb68 <_ZN13Character_LCD4InitEhh+0x20c>
     b68:	00 00       	nop
     b6a:	ee 81       	ldd	r30, Y+6	; 0x06
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	30 a1       	ldd	r19, Z+32	; 0x20
     b70:	ac 01       	movw	r20, r24
     b72:	08 84       	ldd	r0, Y+8	; 0x08
     b74:	02 c0       	rjmp	.+4      	; 0xb7a <_ZN13Character_LCD4InitEhh+0x21e>
     b76:	44 0f       	add	r20, r20
     b78:	55 1f       	adc	r21, r21
     b7a:	0a 94       	dec	r0
     b7c:	e2 f7       	brpl	.-8      	; 0xb76 <_ZN13Character_LCD4InitEhh+0x21a>
     b7e:	24 2f       	mov	r18, r20
     b80:	20 95       	com	r18
     b82:	23 23       	and	r18, r19
     b84:	20 a3       	std	Z+32, r18	; 0x20
     b86:	ef ec       	ldi	r30, 0xCF	; 207
     b88:	f7 e0       	ldi	r31, 0x07	; 7
     b8a:	31 97       	sbiw	r30, 0x01	; 1
     b8c:	f1 f7       	brne	.-4      	; 0xb8a <_ZN13Character_LCD4InitEhh+0x22e>
     b8e:	00 c0       	rjmp	.+0      	; 0xb90 <_ZN13Character_LCD4InitEhh+0x234>
     b90:	00 00       	nop
     b92:	e9 85       	ldd	r30, Y+9	; 0x09
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	40 a1       	ldd	r20, Z+32	; 0x20
     b98:	9c 01       	movw	r18, r24
     b9a:	0b 84       	ldd	r0, Y+11	; 0x0b
     b9c:	02 c0       	rjmp	.+4      	; 0xba2 <_ZN13Character_LCD4InitEhh+0x246>
     b9e:	22 0f       	add	r18, r18
     ba0:	33 1f       	adc	r19, r19
     ba2:	0a 94       	dec	r0
     ba4:	e2 f7       	brpl	.-8      	; 0xb9e <_ZN13Character_LCD4InitEhh+0x242>
     ba6:	24 2b       	or	r18, r20
     ba8:	20 a3       	std	Z+32, r18	; 0x20
     baa:	ec 85       	ldd	r30, Y+12	; 0x0c
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	40 a1       	ldd	r20, Z+32	; 0x20
     bb0:	9c 01       	movw	r18, r24
     bb2:	0e 84       	ldd	r0, Y+14	; 0x0e
     bb4:	02 c0       	rjmp	.+4      	; 0xbba <_ZN13Character_LCD4InitEhh+0x25e>
     bb6:	22 0f       	add	r18, r18
     bb8:	33 1f       	adc	r19, r19
     bba:	0a 94       	dec	r0
     bbc:	e2 f7       	brpl	.-8      	; 0xbb6 <_ZN13Character_LCD4InitEhh+0x25a>
     bbe:	24 2b       	or	r18, r20
     bc0:	20 a3       	std	Z+32, r18	; 0x20
     bc2:	ef 85       	ldd	r30, Y+15	; 0x0f
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	30 a1       	ldd	r19, Z+32	; 0x20
     bc8:	ac 01       	movw	r20, r24
     bca:	09 88       	ldd	r0, Y+17	; 0x11
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <_ZN13Character_LCD4InitEhh+0x276>
     bce:	44 0f       	add	r20, r20
     bd0:	55 1f       	adc	r21, r21
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <_ZN13Character_LCD4InitEhh+0x272>
     bd6:	24 2f       	mov	r18, r20
     bd8:	20 95       	com	r18
     bda:	23 23       	and	r18, r19
     bdc:	20 a3       	std	Z+32, r18	; 0x20
     bde:	ea 89       	ldd	r30, Y+18	; 0x12
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	30 a1       	ldd	r19, Z+32	; 0x20
     be4:	ac 01       	movw	r20, r24
     be6:	0c 88       	ldd	r0, Y+20	; 0x14
     be8:	02 c0       	rjmp	.+4      	; 0xbee <_ZN13Character_LCD4InitEhh+0x292>
     bea:	44 0f       	add	r20, r20
     bec:	55 1f       	adc	r21, r21
     bee:	0a 94       	dec	r0
     bf0:	e2 f7       	brpl	.-8      	; 0xbea <_ZN13Character_LCD4InitEhh+0x28e>
     bf2:	24 2f       	mov	r18, r20
     bf4:	20 95       	com	r18
     bf6:	23 23       	and	r18, r19
     bf8:	20 a3       	std	Z+32, r18	; 0x20
     bfa:	ee 81       	ldd	r30, Y+6	; 0x06
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	40 a1       	ldd	r20, Z+32	; 0x20
     c00:	9c 01       	movw	r18, r24
     c02:	08 84       	ldd	r0, Y+8	; 0x08
     c04:	02 c0       	rjmp	.+4      	; 0xc0a <_ZN13Character_LCD4InitEhh+0x2ae>
     c06:	22 0f       	add	r18, r18
     c08:	33 1f       	adc	r19, r19
     c0a:	0a 94       	dec	r0
     c0c:	e2 f7       	brpl	.-8      	; 0xc06 <_ZN13Character_LCD4InitEhh+0x2aa>
     c0e:	24 2b       	or	r18, r20
     c10:	20 a3       	std	Z+32, r18	; 0x20
     c12:	e8 81       	ld	r30, Y
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	30 a1       	ldd	r19, Z+32	; 0x20
     c18:	ac 01       	movw	r20, r24
     c1a:	0a 80       	ldd	r0, Y+2	; 0x02
     c1c:	02 c0       	rjmp	.+4      	; 0xc22 <_ZN13Character_LCD4InitEhh+0x2c6>
     c1e:	44 0f       	add	r20, r20
     c20:	55 1f       	adc	r21, r21
     c22:	0a 94       	dec	r0
     c24:	e2 f7       	brpl	.-8      	; 0xc1e <_ZN13Character_LCD4InitEhh+0x2c2>
     c26:	24 2f       	mov	r18, r20
     c28:	20 95       	com	r18
     c2a:	23 23       	and	r18, r19
     c2c:	20 a3       	std	Z+32, r18	; 0x20
     c2e:	eb 81       	ldd	r30, Y+3	; 0x03
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	30 a1       	ldd	r19, Z+32	; 0x20
     c34:	ac 01       	movw	r20, r24
     c36:	0d 80       	ldd	r0, Y+5	; 0x05
     c38:	02 c0       	rjmp	.+4      	; 0xc3e <_ZN13Character_LCD4InitEhh+0x2e2>
     c3a:	44 0f       	add	r20, r20
     c3c:	55 1f       	adc	r21, r21
     c3e:	0a 94       	dec	r0
     c40:	e2 f7       	brpl	.-8      	; 0xc3a <_ZN13Character_LCD4InitEhh+0x2de>
     c42:	24 2f       	mov	r18, r20
     c44:	20 95       	com	r18
     c46:	23 23       	and	r18, r19
     c48:	20 a3       	std	Z+32, r18	; 0x20
     c4a:	ef ec       	ldi	r30, 0xCF	; 207
     c4c:	f7 e0       	ldi	r31, 0x07	; 7
     c4e:	31 97       	sbiw	r30, 0x01	; 1
     c50:	f1 f7       	brne	.-4      	; 0xc4e <_ZN13Character_LCD4InitEhh+0x2f2>
     c52:	00 c0       	rjmp	.+0      	; 0xc54 <_ZN13Character_LCD4InitEhh+0x2f8>
     c54:	00 00       	nop
     c56:	ee 81       	ldd	r30, Y+6	; 0x06
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	30 a1       	ldd	r19, Z+32	; 0x20
     c5c:	ac 01       	movw	r20, r24
     c5e:	08 84       	ldd	r0, Y+8	; 0x08
     c60:	02 c0       	rjmp	.+4      	; 0xc66 <_ZN13Character_LCD4InitEhh+0x30a>
     c62:	44 0f       	add	r20, r20
     c64:	55 1f       	adc	r21, r21
     c66:	0a 94       	dec	r0
     c68:	e2 f7       	brpl	.-8      	; 0xc62 <_ZN13Character_LCD4InitEhh+0x306>
     c6a:	24 2f       	mov	r18, r20
     c6c:	20 95       	com	r18
     c6e:	23 23       	and	r18, r19
     c70:	20 a3       	std	Z+32, r18	; 0x20
     c72:	ef ec       	ldi	r30, 0xCF	; 207
     c74:	f7 e0       	ldi	r31, 0x07	; 7
     c76:	31 97       	sbiw	r30, 0x01	; 1
     c78:	f1 f7       	brne	.-4      	; 0xc76 <_ZN13Character_LCD4InitEhh+0x31a>
     c7a:	00 c0       	rjmp	.+0      	; 0xc7c <_ZN13Character_LCD4InitEhh+0x320>
     c7c:	00 00       	nop
     c7e:	e9 85       	ldd	r30, Y+9	; 0x09
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	30 a1       	ldd	r19, Z+32	; 0x20
     c84:	ac 01       	movw	r20, r24
     c86:	0b 84       	ldd	r0, Y+11	; 0x0b
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <_ZN13Character_LCD4InitEhh+0x332>
     c8a:	44 0f       	add	r20, r20
     c8c:	55 1f       	adc	r21, r21
     c8e:	0a 94       	dec	r0
     c90:	e2 f7       	brpl	.-8      	; 0xc8a <_ZN13Character_LCD4InitEhh+0x32e>
     c92:	24 2f       	mov	r18, r20
     c94:	20 95       	com	r18
     c96:	23 23       	and	r18, r19
     c98:	20 a3       	std	Z+32, r18	; 0x20
     c9a:	ec 85       	ldd	r30, Y+12	; 0x0c
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	40 a1       	ldd	r20, Z+32	; 0x20
     ca0:	9c 01       	movw	r18, r24
     ca2:	0e 84       	ldd	r0, Y+14	; 0x0e
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <_ZN13Character_LCD4InitEhh+0x34e>
     ca6:	22 0f       	add	r18, r18
     ca8:	33 1f       	adc	r19, r19
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <_ZN13Character_LCD4InitEhh+0x34a>
     cae:	24 2b       	or	r18, r20
     cb0:	20 a3       	std	Z+32, r18	; 0x20
     cb2:	ef 85       	ldd	r30, Y+15	; 0x0f
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	30 a1       	ldd	r19, Z+32	; 0x20
     cb8:	ac 01       	movw	r20, r24
     cba:	09 88       	ldd	r0, Y+17	; 0x11
     cbc:	02 c0       	rjmp	.+4      	; 0xcc2 <_ZN13Character_LCD4InitEhh+0x366>
     cbe:	44 0f       	add	r20, r20
     cc0:	55 1f       	adc	r21, r21
     cc2:	0a 94       	dec	r0
     cc4:	e2 f7       	brpl	.-8      	; 0xcbe <_ZN13Character_LCD4InitEhh+0x362>
     cc6:	24 2f       	mov	r18, r20
     cc8:	20 95       	com	r18
     cca:	23 23       	and	r18, r19
     ccc:	20 a3       	std	Z+32, r18	; 0x20
     cce:	ea 89       	ldd	r30, Y+18	; 0x12
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	30 a1       	ldd	r19, Z+32	; 0x20
     cd4:	ac 01       	movw	r20, r24
     cd6:	0c 88       	ldd	r0, Y+20	; 0x14
     cd8:	02 c0       	rjmp	.+4      	; 0xcde <_ZN13Character_LCD4InitEhh+0x382>
     cda:	44 0f       	add	r20, r20
     cdc:	55 1f       	adc	r21, r21
     cde:	0a 94       	dec	r0
     ce0:	e2 f7       	brpl	.-8      	; 0xcda <_ZN13Character_LCD4InitEhh+0x37e>
     ce2:	24 2f       	mov	r18, r20
     ce4:	20 95       	com	r18
     ce6:	23 23       	and	r18, r19
     ce8:	20 a3       	std	Z+32, r18	; 0x20
     cea:	ee 81       	ldd	r30, Y+6	; 0x06
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	40 a1       	ldd	r20, Z+32	; 0x20
     cf0:	9c 01       	movw	r18, r24
     cf2:	08 84       	ldd	r0, Y+8	; 0x08
     cf4:	02 c0       	rjmp	.+4      	; 0xcfa <_ZN13Character_LCD4InitEhh+0x39e>
     cf6:	22 0f       	add	r18, r18
     cf8:	33 1f       	adc	r19, r19
     cfa:	0a 94       	dec	r0
     cfc:	e2 f7       	brpl	.-8      	; 0xcf6 <_ZN13Character_LCD4InitEhh+0x39a>
     cfe:	24 2b       	or	r18, r20
     d00:	20 a3       	std	Z+32, r18	; 0x20
     d02:	e8 81       	ld	r30, Y
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	30 a1       	ldd	r19, Z+32	; 0x20
     d08:	ac 01       	movw	r20, r24
     d0a:	0a 80       	ldd	r0, Y+2	; 0x02
     d0c:	02 c0       	rjmp	.+4      	; 0xd12 <_ZN13Character_LCD4InitEhh+0x3b6>
     d0e:	44 0f       	add	r20, r20
     d10:	55 1f       	adc	r21, r21
     d12:	0a 94       	dec	r0
     d14:	e2 f7       	brpl	.-8      	; 0xd0e <_ZN13Character_LCD4InitEhh+0x3b2>
     d16:	24 2f       	mov	r18, r20
     d18:	20 95       	com	r18
     d1a:	23 23       	and	r18, r19
     d1c:	20 a3       	std	Z+32, r18	; 0x20
     d1e:	eb 81       	ldd	r30, Y+3	; 0x03
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	30 a1       	ldd	r19, Z+32	; 0x20
     d24:	ac 01       	movw	r20, r24
     d26:	0d 80       	ldd	r0, Y+5	; 0x05
     d28:	02 c0       	rjmp	.+4      	; 0xd2e <_ZN13Character_LCD4InitEhh+0x3d2>
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	0a 94       	dec	r0
     d30:	e2 f7       	brpl	.-8      	; 0xd2a <_ZN13Character_LCD4InitEhh+0x3ce>
     d32:	24 2f       	mov	r18, r20
     d34:	20 95       	com	r18
     d36:	23 23       	and	r18, r19
     d38:	20 a3       	std	Z+32, r18	; 0x20
     d3a:	ef ec       	ldi	r30, 0xCF	; 207
     d3c:	f7 e0       	ldi	r31, 0x07	; 7
     d3e:	31 97       	sbiw	r30, 0x01	; 1
     d40:	f1 f7       	brne	.-4      	; 0xd3e <_ZN13Character_LCD4InitEhh+0x3e2>
     d42:	00 c0       	rjmp	.+0      	; 0xd44 <_ZN13Character_LCD4InitEhh+0x3e8>
     d44:	00 00       	nop
     d46:	ee 81       	ldd	r30, Y+6	; 0x06
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	20 a1       	ldd	r18, Z+32	; 0x20
     d4c:	08 84       	ldd	r0, Y+8	; 0x08
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <_ZN13Character_LCD4InitEhh+0x3f8>
     d50:	88 0f       	add	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	0a 94       	dec	r0
     d56:	e2 f7       	brpl	.-8      	; 0xd50 <_ZN13Character_LCD4InitEhh+0x3f4>
     d58:	80 95       	com	r24
     d5a:	82 23       	and	r24, r18
     d5c:	80 a3       	std	Z+32, r24	; 0x20
     d5e:	8f ec       	ldi	r24, 0xCF	; 207
     d60:	97 e0       	ldi	r25, 0x07	; 7
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	f1 f7       	brne	.-4      	; 0xd62 <_ZN13Character_LCD4InitEhh+0x406>
     d66:	00 c0       	rjmp	.+0      	; 0xd68 <_ZN13Character_LCD4InitEhh+0x40c>
     d68:	00 00       	nop
     d6a:	68 e2       	ldi	r22, 0x28	; 40
     d6c:	ce 01       	movw	r24, r28
     d6e:	0e 94 15 03 	call	0x62a	; 0x62a <_ZN13Character_LCD11SendCommandEh>
     d72:	6c e0       	ldi	r22, 0x0C	; 12
     d74:	ce 01       	movw	r24, r28
     d76:	0e 94 15 03 	call	0x62a	; 0x62a <_ZN13Character_LCD11SendCommandEh>
     d7a:	ce 01       	movw	r24, r28
     d7c:	0e 94 8f 04 	call	0x91e	; 0x91e <_ZN13Character_LCD3ClrEv>
     d80:	df 91       	pop	r29
     d82:	cf 91       	pop	r28
     d84:	08 95       	ret

00000d86 <_ZN13Character_LCD6NumberEhmh>:

void Character_LCD :: Number(uint8_t v_numericSystem_u8, uint32_t v_number_u32, uint8_t v_numOfDigits)
{
     d86:	2f 92       	push	r2
     d88:	3f 92       	push	r3
     d8a:	4f 92       	push	r4
     d8c:	5f 92       	push	r5
     d8e:	6f 92       	push	r6
     d90:	7f 92       	push	r7
     d92:	8f 92       	push	r8
     d94:	9f 92       	push	r9
     d96:	af 92       	push	r10
     d98:	bf 92       	push	r11
     d9a:	cf 92       	push	r12
     d9c:	df 92       	push	r13
     d9e:	ef 92       	push	r14
     da0:	ff 92       	push	r15
     da2:	0f 93       	push	r16
     da4:	1f 93       	push	r17
     da6:	cf 93       	push	r28
     da8:	df 93       	push	r29
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
     dae:	2a 97       	sbiw	r28, 0x0a	; 10
     db0:	0f b6       	in	r0, 0x3f	; 63
     db2:	f8 94       	cli
     db4:	de bf       	out	0x3e, r29	; 62
     db6:	0f be       	out	0x3f, r0	; 63
     db8:	cd bf       	out	0x3d, r28	; 61
     dba:	5c 01       	movw	r10, r24
     dbc:	66 2e       	mov	r6, r22
     dbe:	69 01       	movw	r12, r18
     dc0:	7a 01       	movw	r14, r20
    uint8_t i=0,a[10];

    if(2u == v_numericSystem_u8)
     dc2:	22 e0       	ldi	r18, 0x02	; 2
     dc4:	62 13       	cpse	r22, r18
     dc6:	26 c0       	rjmp	.+76     	; 0xe14 <_ZN13Character_LCD6NumberEhmh+0x8e>
    {
        while(v_numOfDigits!=0)
     dc8:	00 23       	and	r16, r16
     dca:	09 f4       	brne	.+2      	; 0xdce <_ZN13Character_LCD6NumberEhmh+0x48>
     dcc:	76 c0       	rjmp	.+236    	; 0xeba <_ZN13Character_LCD6NumberEhmh+0x134>
        {
            /* Start Extracting the bits from the specified bit positions.
             Get the Acsii values of the bits and transmit */
            i = _AS_GetBitStatus(v_number_u32,(v_numOfDigits-1));
            SendChar(_AS_Dec2Ascii(i));
     dce:	88 24       	eor	r8, r8
     dd0:	83 94       	inc	r8
     dd2:	91 2c       	mov	r9, r1
     dd4:	11 e0       	ldi	r17, 0x01	; 1
     dd6:	71 2c       	mov	r7, r1
     dd8:	8f ef       	ldi	r24, 0xFF	; 255
     dda:	80 0f       	add	r24, r16
     ddc:	f4 01       	movw	r30, r8
     dde:	02 c0       	rjmp	.+4      	; 0xde4 <_ZN13Character_LCD6NumberEhmh+0x5e>
     de0:	ee 0f       	add	r30, r30
     de2:	ff 1f       	adc	r31, r31
     de4:	8a 95       	dec	r24
     de6:	e2 f7       	brpl	.-8      	; 0xde0 <_ZN13Character_LCD6NumberEhmh+0x5a>
     de8:	cf 01       	movw	r24, r30
     dea:	09 2e       	mov	r0, r25
     dec:	00 0c       	add	r0, r0
     dee:	aa 0b       	sbc	r26, r26
     df0:	bb 0b       	sbc	r27, r27
     df2:	8c 21       	and	r24, r12
     df4:	9d 21       	and	r25, r13
     df6:	ae 21       	and	r26, r14
     df8:	bf 21       	and	r27, r15
     dfa:	61 2f       	mov	r22, r17
     dfc:	89 2b       	or	r24, r25
     dfe:	8a 2b       	or	r24, r26
     e00:	8b 2b       	or	r24, r27
     e02:	09 f4       	brne	.+2      	; 0xe06 <_ZN13Character_LCD6NumberEhmh+0x80>
     e04:	67 2d       	mov	r22, r7
     e06:	60 5d       	subi	r22, 0xD0	; 208
     e08:	c5 01       	movw	r24, r10
     e0a:	0e 94 46 01 	call	0x28c	; 0x28c <_ZN13Character_LCD8SendCharEh>
            v_numOfDigits--;
     e0e:	01 50       	subi	r16, 0x01	; 1
{
    uint8_t i=0,a[10];

    if(2u == v_numericSystem_u8)
    {
        while(v_numOfDigits!=0)
     e10:	19 f7       	brne	.-58     	; 0xdd8 <_ZN13Character_LCD6NumberEhmh+0x52>
     e12:	53 c0       	rjmp	.+166    	; 0xeba <_ZN13Character_LCD6NumberEhmh+0x134>
            i = _AS_GetBitStatus(v_number_u32,(v_numOfDigits-1));
            SendChar(_AS_Dec2Ascii(i));
            v_numOfDigits--;
        }    
    }     
    else if(v_number_u32==0)
     e14:	c1 14       	cp	r12, r1
     e16:	d1 04       	cpc	r13, r1
     e18:	e1 04       	cpc	r14, r1
     e1a:	f1 04       	cpc	r15, r1
     e1c:	19 f0       	breq	.+6      	; 0xe24 <_ZN13Character_LCD6NumberEhmh+0x9e>
        for(i=0;((i<v_numOfDigits) && (i<10u)) ;i++)
            SendChar('0');
    }
    else
    {
        for(i=0;i<v_numOfDigits;i++)
     e1e:	01 11       	cpse	r16, r1
     e20:	11 c0       	rjmp	.+34     	; 0xe44 <_ZN13Character_LCD6NumberEhmh+0xbe>
     e22:	4b c0       	rjmp	.+150    	; 0xeba <_ZN13Character_LCD6NumberEhmh+0x134>
        }    
    }     
    else if(v_number_u32==0)
    {
        /* If the number is zero then update the array with the same for transmitting */
        for(i=0;((i<v_numOfDigits) && (i<10u)) ;i++)
     e24:	00 23       	and	r16, r16
     e26:	09 f4       	brne	.+2      	; 0xe2a <_ZN13Character_LCD6NumberEhmh+0xa4>
     e28:	48 c0       	rjmp	.+144    	; 0xeba <_ZN13Character_LCD6NumberEhmh+0x134>
     e2a:	10 e0       	ldi	r17, 0x00	; 0
     e2c:	03 c0       	rjmp	.+6      	; 0xe34 <_ZN13Character_LCD6NumberEhmh+0xae>
     e2e:	1a 30       	cpi	r17, 0x0A	; 10
     e30:	09 f4       	brne	.+2      	; 0xe34 <_ZN13Character_LCD6NumberEhmh+0xae>
     e32:	43 c0       	rjmp	.+134    	; 0xeba <_ZN13Character_LCD6NumberEhmh+0x134>
            SendChar('0');
     e34:	60 e3       	ldi	r22, 0x30	; 48
     e36:	c5 01       	movw	r24, r10
     e38:	0e 94 46 01 	call	0x28c	; 0x28c <_ZN13Character_LCD8SendCharEh>
        }    
    }     
    else if(v_number_u32==0)
    {
        /* If the number is zero then update the array with the same for transmitting */
        for(i=0;((i<v_numOfDigits) && (i<10u)) ;i++)
     e3c:	1f 5f       	subi	r17, 0xFF	; 255
     e3e:	01 13       	cpse	r16, r17
     e40:	f6 cf       	rjmp	.-20     	; 0xe2e <_ZN13Character_LCD6NumberEhmh+0xa8>
     e42:	3b c0       	rjmp	.+118    	; 0xeba <_ZN13Character_LCD6NumberEhmh+0x134>
     e44:	9e 01       	movw	r18, r28
     e46:	2f 5f       	subi	r18, 0xFF	; 255
     e48:	3f 4f       	sbci	r19, 0xFF	; 255
     e4a:	49 01       	movw	r8, r18
            SendChar('0');
    }
    else
    {
        for(i=0;i<v_numOfDigits;i++)
     e4c:	10 e0       	ldi	r17, 0x00	; 0
                First get the remainder and divide the number by 10 each time.

                example for Decimal number:
                If v_number_u32 = 123 then extracted remainder will be 3 and number will be 12.
                The process continues till it becomes zero or max digits reached*/
                a[i]=_AS_GetMod32(v_number_u32,v_numericSystem_u8);
     e4e:	26 2e       	mov	r2, r22
     e50:	31 2c       	mov	r3, r1
     e52:	41 2c       	mov	r4, r1
     e54:	51 2c       	mov	r5, r1
    {
        for(i=0;i<v_numOfDigits;i++)
        {
            /* Continue extracting the digits from right side
               till the Specified v_numOfDigitsToTransmit_u8 */
            if(v_number_u32!=0)
     e56:	c1 14       	cp	r12, r1
     e58:	d1 04       	cpc	r13, r1
     e5a:	e1 04       	cpc	r14, r1
     e5c:	f1 04       	cpc	r15, r1
     e5e:	89 f0       	breq	.+34     	; 0xe82 <_ZN13Character_LCD6NumberEhmh+0xfc>
                First get the remainder and divide the number by 10 each time.

                example for Decimal number:
                If v_number_u32 = 123 then extracted remainder will be 3 and number will be 12.
                The process continues till it becomes zero or max digits reached*/
                a[i]=_AS_GetMod32(v_number_u32,v_numericSystem_u8);
     e60:	7c 2c       	mov	r7, r12
     e62:	c7 01       	movw	r24, r14
     e64:	b6 01       	movw	r22, r12
     e66:	a2 01       	movw	r20, r4
     e68:	91 01       	movw	r18, r2
     e6a:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__udivmodsi4>
     e6e:	c2 2e       	mov	r12, r18
     e70:	d3 2e       	mov	r13, r19
     e72:	e4 2e       	mov	r14, r20
     e74:	f5 2e       	mov	r15, r21
     e76:	62 9e       	mul	r6, r18
     e78:	70 18       	sub	r7, r0
     e7a:	11 24       	eor	r1, r1
     e7c:	f4 01       	movw	r30, r8
     e7e:	70 82       	st	Z, r7
     e80:	08 c0       	rjmp	.+16     	; 0xe92 <_ZN13Character_LCD6NumberEhmh+0x10c>
                v_number_u32=v_number_u32/v_numericSystem_u8;
            }
            else if( (v_numOfDigits == 0xffu) ||
     e82:	0b 30       	cpi	r16, 0x0B	; 11
     e84:	20 f0       	brcs	.+8      	; 0xe8e <_ZN13Character_LCD6NumberEhmh+0x108>
                Ex: v_number_u32 is 123 and user wants five digits then 00123 has to be transmitted */
                a[i]=0;
            }
        }

        while(i)
     e86:	11 23       	and	r17, r17
     e88:	c1 f0       	breq	.+48     	; 0xeba <_ZN13Character_LCD6NumberEhmh+0x134>
     e8a:	01 2f       	mov	r16, r17
     e8c:	08 c0       	rjmp	.+16     	; 0xe9e <_ZN13Character_LCD6NumberEhmh+0x118>
            else
            {
                /*In case user expects more digits to be transmitted than the actual digits in number,
                  then update the remaining digits with zero.
                Ex: v_number_u32 is 123 and user wants five digits then 00123 has to be transmitted */
                a[i]=0;
     e8e:	f4 01       	movw	r30, r8
     e90:	10 82       	st	Z, r1
        for(i=0;((i<v_numOfDigits) && (i<10u)) ;i++)
            SendChar('0');
    }
    else
    {
        for(i=0;i<v_numOfDigits;i++)
     e92:	1f 5f       	subi	r17, 0xFF	; 255
     e94:	ff ef       	ldi	r31, 0xFF	; 255
     e96:	8f 1a       	sub	r8, r31
     e98:	9f 0a       	sbc	r9, r31
     e9a:	01 13       	cpse	r16, r17
     e9c:	dc cf       	rjmp	.-72     	; 0xe56 <_ZN13Character_LCD6NumberEhmh+0xd0>
        }

        while(i)
        { 
            /* Finally get the ascii values of the digits and transmit*/
            SendChar(_AS_Hex2Ascii(a[i-1]));
     e9e:	fe 01       	movw	r30, r28
     ea0:	e0 0f       	add	r30, r16
     ea2:	f1 1d       	adc	r31, r1
     ea4:	60 81       	ld	r22, Z
     ea6:	6a 30       	cpi	r22, 0x0A	; 10
     ea8:	10 f0       	brcs	.+4      	; 0xeae <_ZN13Character_LCD6NumberEhmh+0x128>
     eaa:	69 5c       	subi	r22, 0xC9	; 201
     eac:	01 c0       	rjmp	.+2      	; 0xeb0 <_ZN13Character_LCD6NumberEhmh+0x12a>
     eae:	60 5d       	subi	r22, 0xD0	; 208
     eb0:	c5 01       	movw	r24, r10
     eb2:	0e 94 46 01 	call	0x28c	; 0x28c <_ZN13Character_LCD8SendCharEh>
            i--;
     eb6:	01 50       	subi	r16, 0x01	; 1
                Ex: v_number_u32 is 123 and user wants five digits then 00123 has to be transmitted */
                a[i]=0;
            }
        }

        while(i)
     eb8:	91 f7       	brne	.-28     	; 0xe9e <_ZN13Character_LCD6NumberEhmh+0x118>
            i--;
        }
    }


}
     eba:	2a 96       	adiw	r28, 0x0a	; 10
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	f8 94       	cli
     ec0:	de bf       	out	0x3e, r29	; 62
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	cd bf       	out	0x3d, r28	; 61
     ec6:	df 91       	pop	r29
     ec8:	cf 91       	pop	r28
     eca:	1f 91       	pop	r17
     ecc:	0f 91       	pop	r16
     ece:	ff 90       	pop	r15
     ed0:	ef 90       	pop	r14
     ed2:	df 90       	pop	r13
     ed4:	cf 90       	pop	r12
     ed6:	bf 90       	pop	r11
     ed8:	af 90       	pop	r10
     eda:	9f 90       	pop	r9
     edc:	8f 90       	pop	r8
     ede:	7f 90       	pop	r7
     ee0:	6f 90       	pop	r6
     ee2:	5f 90       	pop	r5
     ee4:	4f 90       	pop	r4
     ee6:	3f 90       	pop	r3
     ee8:	2f 90       	pop	r2
     eea:	08 95       	ret

00000eec <_ZN13Character_LCD11FloatNumberEf>:

void Character_LCD :: FloatNumber(float v_floatNumber_f32)
{
     eec:	8f 92       	push	r8
     eee:	9f 92       	push	r9
     ef0:	af 92       	push	r10
     ef2:	bf 92       	push	r11
     ef4:	cf 92       	push	r12
     ef6:	df 92       	push	r13
     ef8:	ef 92       	push	r14
     efa:	ff 92       	push	r15
     efc:	0f 93       	push	r16
     efe:	cf 93       	push	r28
     f00:	df 93       	push	r29
     f02:	ec 01       	movw	r28, r24
     f04:	6a 01       	movw	r12, r20
     f06:	7b 01       	movw	r14, r22
      1.Type cast the number to int to get the integer part.
	  2.transmit the extracted integer part followed by a decimal point(.).
	  3.Later the integer part is made zero by subtracting with the extracted integer value.
	  4.Finally the fractional part is multiplied by 100000 to support 6-digit precision */

	v_tempNumber_u32 = (uint32_t) v_floatNumber_f32;
     f08:	cb 01       	movw	r24, r22
     f0a:	ba 01       	movw	r22, r20
     f0c:	0e 94 c7 09 	call	0x138e	; 0x138e <__fixunssfsi>
     f10:	4b 01       	movw	r8, r22
     f12:	5c 01       	movw	r10, r24
	Number(10u,v_tempNumber_u32,0xffu);
     f14:	0f ef       	ldi	r16, 0xFF	; 255
     f16:	9b 01       	movw	r18, r22
     f18:	ac 01       	movw	r20, r24
     f1a:	6a e0       	ldi	r22, 0x0A	; 10
     f1c:	ce 01       	movw	r24, r28
     f1e:	0e 94 c3 06 	call	0xd86	; 0xd86 <_ZN13Character_LCD6NumberEhmh>

	SendChar('.');
     f22:	6e e2       	ldi	r22, 0x2E	; 46
     f24:	ce 01       	movw	r24, r28
     f26:	0e 94 46 01 	call	0x28c	; 0x28c <_ZN13Character_LCD8SendCharEh>

	v_floatNumber_f32 = v_floatNumber_f32 - v_tempNumber_u32;
	v_tempNumber_u32 = v_floatNumber_f32 * 1000000;
     f2a:	c5 01       	movw	r24, r10
     f2c:	b4 01       	movw	r22, r8
     f2e:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__floatunsisf>
     f32:	9b 01       	movw	r18, r22
     f34:	ac 01       	movw	r20, r24
     f36:	c7 01       	movw	r24, r14
     f38:	b6 01       	movw	r22, r12
     f3a:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__subsf3>
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	34 e2       	ldi	r19, 0x24	; 36
     f42:	44 e7       	ldi	r20, 0x74	; 116
     f44:	59 e4       	ldi	r21, 0x49	; 73
     f46:	0e 94 84 0a 	call	0x1508	; 0x1508 <__mulsf3>
	Number(10u,v_tempNumber_u32,0xffu);
     f4a:	0e 94 c7 09 	call	0x138e	; 0x138e <__fixunssfsi>
     f4e:	9b 01       	movw	r18, r22
     f50:	ac 01       	movw	r20, r24
     f52:	6a e0       	ldi	r22, 0x0A	; 10
     f54:	ce 01       	movw	r24, r28
     f56:	0e 94 c3 06 	call	0xd86	; 0xd86 <_ZN13Character_LCD6NumberEhmh>
}
     f5a:	df 91       	pop	r29
     f5c:	cf 91       	pop	r28
     f5e:	0f 91       	pop	r16
     f60:	ff 90       	pop	r15
     f62:	ef 90       	pop	r14
     f64:	df 90       	pop	r13
     f66:	cf 90       	pop	r12
     f68:	bf 90       	pop	r11
     f6a:	af 90       	pop	r10
     f6c:	9f 90       	pop	r9
     f6e:	8f 90       	pop	r8
     f70:	08 95       	ret

00000f72 <_ZN13Character_LCD6PrintfEPKchhz>:
#####: In case of printing the variables(8-bit) its recommended to type cast and promote them to uint16_t.
        uint8_t v_Num_u8;
		LCD1.Printf("num1:%u",(uint16_t)v_Num_u8); 		 
***************************************************************************************************/
void Character_LCD :: Printf(const char *argList , uint8_t x, uint8_t y , ... )
{
     f72:	3f 92       	push	r3
     f74:	4f 92       	push	r4
     f76:	5f 92       	push	r5
     f78:	6f 92       	push	r6
     f7a:	7f 92       	push	r7
     f7c:	8f 92       	push	r8
     f7e:	9f 92       	push	r9
     f80:	af 92       	push	r10
     f82:	bf 92       	push	r11
     f84:	cf 92       	push	r12
     f86:	df 92       	push	r13
     f88:	ef 92       	push	r14
     f8a:	ff 92       	push	r15
     f8c:	0f 93       	push	r16
     f8e:	1f 93       	push	r17
     f90:	cf 93       	push	r28
     f92:	df 93       	push	r29
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
     f98:	ec 88       	ldd	r14, Y+20	; 0x14
     f9a:	fd 88       	ldd	r15, Y+21	; 0x15
     f9c:	0e 89       	ldd	r16, Y+22	; 0x16
     f9e:	1f 89       	ldd	r17, Y+23	; 0x17
	GotoXY(x,y);
     fa0:	49 8d       	ldd	r20, Y+25	; 0x19
     fa2:	68 8d       	ldd	r22, Y+24	; 0x18
     fa4:	c7 01       	movw	r24, r14
     fa6:	0e 94 99 04 	call	0x932	; 0x932 <_ZN13Character_LCD6GotoXYEhh>

	double v_floatNum_f32;
	


	va_start(argp, argList);
     faa:	5e 01       	movw	r10, r28
     fac:	8a e1       	ldi	r24, 0x1A	; 26
     fae:	a8 0e       	add	r10, r24
     fb0:	b1 1c       	adc	r11, r1

	// Loop through the list to extract all the input arguments 
	for(ptr = argList; *ptr != '\0'; ptr++)
     fb2:	d8 01       	movw	r26, r16
     fb4:	6c 91       	ld	r22, X
     fb6:	66 23       	and	r22, r22
     fb8:	09 f4       	brne	.+2      	; 0xfbc <_ZN13Character_LCD6PrintfEPKchhz+0x4a>
     fba:	09 c1       	rjmp	.+530    	; 0x11ce <_ZN13Character_LCD6PrintfEPKchhz+0x25c>
				   ch = *ptr;
				}
			}
			else
			{
			  v_numOfDigits = 0xffu;
     fbc:	88 24       	eor	r8, r8
     fbe:	8a 94       	dec	r8
			
			case 'b':  // Argument type is of binary,Read int and convert to binary 
				v_num_u16 = va_arg(argp, uint16_t);		
				
				if(v_numOfDigits >= 8)
				   v_numOfDigits = 8;
     fc0:	68 94       	set
     fc2:	33 24       	eor	r3, r3
     fc4:	33 f8       	bld	r3, 3
		ch= *ptr;
		if(ch == '%')         //Check for '%' as there will be format specifier after it 
		{
		    ptr++;
		    ch = *ptr;
		   if((ch>=0x30) && (ch<=0x39))
     fc6:	91 2c       	mov	r9, r1
	// Loop through the list to extract all the input arguments 
	for(ptr = argList; *ptr != '\0'; ptr++)
	{

		ch= *ptr;
		if(ch == '%')         //Check for '%' as there will be format specifier after it 
     fc8:	65 32       	cpi	r22, 0x25	; 37
     fca:	09 f0       	breq	.+2      	; 0xfce <_ZN13Character_LCD6PrintfEPKchhz+0x5c>
     fcc:	de c0       	rjmp	.+444    	; 0x118a <_ZN13Character_LCD6PrintfEPKchhz+0x218>
		{
		    ptr++;
     fce:	68 01       	movw	r12, r16
     fd0:	bf ef       	ldi	r27, 0xFF	; 255
     fd2:	cb 1a       	sub	r12, r27
     fd4:	db 0a       	sbc	r13, r27
		    ch = *ptr;
     fd6:	d8 01       	movw	r26, r16
     fd8:	11 96       	adiw	r26, 0x01	; 1
     fda:	ec 91       	ld	r30, X
     fdc:	11 97       	sbiw	r26, 0x01	; 1
		   if((ch>=0x30) && (ch<=0x39))
     fde:	80 ed       	ldi	r24, 0xD0	; 208
     fe0:	8e 0f       	add	r24, r30
     fe2:	8a 30       	cpi	r24, 0x0A	; 10
     fe4:	08 f0       	brcs	.+2      	; 0xfe8 <_ZN13Character_LCD6PrintfEPKchhz+0x76>
     fe6:	e8 c0       	rjmp	.+464    	; 0x11b8 <_ZN13Character_LCD6PrintfEPKchhz+0x246>
     fe8:	12 96       	adiw	r26, 0x02	; 2
     fea:	09 2d       	mov	r16, r9
     fec:	00 0f       	add	r16, r16
     fee:	80 2f       	mov	r24, r16
     ff0:	88 0f       	add	r24, r24
     ff2:	88 0f       	add	r24, r24
     ff4:	08 0f       	add	r16, r24
     ff6:	00 53       	subi	r16, 0x30	; 48
			{
			   v_numOfDigits = 0;
			   while((ch>=0x30) && (ch<=0x39))
			    {
				   v_numOfDigits = (v_numOfDigits * 10) + (ch-0x30);
     ff8:	0e 0f       	add	r16, r30
				   ptr++;
     ffa:	6d 01       	movw	r12, r26
				   ch = *ptr;
     ffc:	ed 91       	ld	r30, X+
		    ptr++;
		    ch = *ptr;
		   if((ch>=0x30) && (ch<=0x39))
			{
			   v_numOfDigits = 0;
			   while((ch>=0x30) && (ch<=0x39))
     ffe:	80 ed       	ldi	r24, 0xD0	; 208
    1000:	8e 0f       	add	r24, r30
    1002:	8a 30       	cpi	r24, 0x0A	; 10
    1004:	98 f3       	brcs	.-26     	; 0xfec <_ZN13Character_LCD6PrintfEPKchhz+0x7a>
			{
			  v_numOfDigits = 0xffu;
			}				


			switch(ch)       // Decode the type of the argument 
    1006:	8e 2f       	mov	r24, r30
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	fc 01       	movw	r30, r24
    100c:	b5 97       	sbiw	r30, 0x25	; 37
    100e:	e4 35       	cpi	r30, 0x54	; 84
    1010:	f1 05       	cpc	r31, r1
    1012:	08 f0       	brcs	.+2      	; 0x1016 <_ZN13Character_LCD6PrintfEPKchhz+0xa4>
    1014:	be c0       	rjmp	.+380    	; 0x1192 <_ZN13Character_LCD6PrintfEPKchhz+0x220>
    1016:	e6 5d       	subi	r30, 0xD6	; 214
    1018:	ff 4f       	sbci	r31, 0xFF	; 255
    101a:	0c 94 13 0b 	jmp	0x1626	; 0x1626 <__tablejump2__>
			{
			case 'C':
			case 'c':     // Argument type is of char, hence read char data from the argp 
				ch = va_arg(argp, int);
    101e:	85 01       	movw	r16, r10
    1020:	0e 5f       	subi	r16, 0xFE	; 254
    1022:	1f 4f       	sbci	r17, 0xFF	; 255
				SendChar(ch);
    1024:	f5 01       	movw	r30, r10
    1026:	60 81       	ld	r22, Z
    1028:	c7 01       	movw	r24, r14
    102a:	0e 94 46 01 	call	0x28c	; 0x28c <_ZN13Character_LCD8SendCharEh>

			switch(ch)       // Decode the type of the argument 
			{
			case 'C':
			case 'c':     // Argument type is of char, hence read char data from the argp 
				ch = va_arg(argp, int);
    102e:	58 01       	movw	r10, r16
				SendChar(ch);
				break;
    1030:	b0 c0       	rjmp	.+352    	; 0x1192 <_ZN13Character_LCD6PrintfEPKchhz+0x220>
				   ch = *ptr;
				}
			}
			else
			{
			  v_numOfDigits = 0xffu;
    1032:	08 2d       	mov	r16, r8
				ch = va_arg(argp, int);
				SendChar(ch);
				break;

			case 'd':    // Argument type is of signed integer, hence read 16bit data from the argp 
				v_num_s16 = va_arg(argp, signed int);
    1034:	f5 01       	movw	r30, r10
    1036:	60 80       	ld	r6, Z
    1038:	71 80       	ldd	r7, Z+1	; 0x01
    103a:	f2 e0       	ldi	r31, 0x02	; 2
    103c:	af 0e       	add	r10, r31
    103e:	b1 1c       	adc	r11, r1
				if(v_num_s16<0)
    1040:	77 20       	and	r7, r7
    1042:	3c f4       	brge	.+14     	; 0x1052 <_ZN13Character_LCD6PrintfEPKchhz+0xe0>
				 { // If the number is -ve then display the 2's complement along with '-' sign  
				   v_num_s16 = -v_num_s16;
    1044:	71 94       	neg	r7
    1046:	61 94       	neg	r6
    1048:	71 08       	sbc	r7, r1
				   SendChar('-');
    104a:	6d e2       	ldi	r22, 0x2D	; 45
    104c:	c7 01       	movw	r24, r14
    104e:	0e 94 46 01 	call	0x28c	; 0x28c <_ZN13Character_LCD8SendCharEh>
				 }
				Number(10u,v_num_s16,v_numOfDigits);
    1052:	93 01       	movw	r18, r6
    1054:	77 0c       	add	r7, r7
    1056:	44 0b       	sbc	r20, r20
    1058:	55 0b       	sbc	r21, r21
    105a:	6a e0       	ldi	r22, 0x0A	; 10
    105c:	c7 01       	movw	r24, r14
    105e:	0e 94 c3 06 	call	0xd86	; 0xd86 <_ZN13Character_LCD6NumberEhmh>
				break;
    1062:	97 c0       	rjmp	.+302    	; 0x1192 <_ZN13Character_LCD6PrintfEPKchhz+0x220>
				   ch = *ptr;
				}
			}
			else
			{
			  v_numOfDigits = 0xffu;
    1064:	08 2d       	mov	r16, r8
				 }
				Number(10u,v_num_s16,v_numOfDigits);
				break;
				
			case 'D':    // Argument type is of integer, hence read 16bit data from the argp 
				v_num_s32 = va_arg(argp, signed long int);				
    1066:	f5 01       	movw	r30, r10
    1068:	40 80       	ld	r4, Z
    106a:	51 80       	ldd	r5, Z+1	; 0x01
    106c:	62 80       	ldd	r6, Z+2	; 0x02
    106e:	73 80       	ldd	r7, Z+3	; 0x03
    1070:	84 e0       	ldi	r24, 0x04	; 4
    1072:	a8 0e       	add	r10, r24
    1074:	b1 1c       	adc	r11, r1
				if(v_num_s32<0)
    1076:	77 20       	and	r7, r7
    1078:	64 f4       	brge	.+24     	; 0x1092 <_ZN13Character_LCD6PrintfEPKchhz+0x120>
				 { // If the number is -ve then display the 2's complement along with '-' sign 
				   v_num_s32 = -v_num_s32;
    107a:	70 94       	com	r7
    107c:	60 94       	com	r6
    107e:	50 94       	com	r5
    1080:	40 94       	com	r4
    1082:	41 1c       	adc	r4, r1
    1084:	51 1c       	adc	r5, r1
    1086:	61 1c       	adc	r6, r1
    1088:	71 1c       	adc	r7, r1
				   SendChar('-');
    108a:	6d e2       	ldi	r22, 0x2D	; 45
    108c:	c7 01       	movw	r24, r14
    108e:	0e 94 46 01 	call	0x28c	; 0x28c <_ZN13Character_LCD8SendCharEh>
				 }
				Number(10u,v_num_s32,v_numOfDigits);			
    1092:	a3 01       	movw	r20, r6
    1094:	92 01       	movw	r18, r4
    1096:	6a e0       	ldi	r22, 0x0A	; 10
    1098:	c7 01       	movw	r24, r14
    109a:	0e 94 c3 06 	call	0xd86	; 0xd86 <_ZN13Character_LCD6NumberEhmh>
				break;	
    109e:	79 c0       	rjmp	.+242    	; 0x1192 <_ZN13Character_LCD6PrintfEPKchhz+0x220>
				   ch = *ptr;
				}
			}
			else
			{
			  v_numOfDigits = 0xffu;
    10a0:	08 2d       	mov	r16, r8
				 }
				Number(10u,v_num_s32,v_numOfDigits);			
				break;	

			case 'u':    // Argument type is of unsigned integer, hence read 16bit unsigned data 
				v_num_u16 = va_arg(argp, uint16_t);			
    10a2:	f5 01       	movw	r30, r10
				Number(10u,v_num_u16,v_numOfDigits);				
    10a4:	20 81       	ld	r18, Z
    10a6:	31 81       	ldd	r19, Z+1	; 0x01
    10a8:	a2 e0       	ldi	r26, 0x02	; 2
    10aa:	aa 0e       	add	r10, r26
    10ac:	b1 1c       	adc	r11, r1
    10ae:	40 e0       	ldi	r20, 0x00	; 0
    10b0:	50 e0       	ldi	r21, 0x00	; 0
    10b2:	6a e0       	ldi	r22, 0x0A	; 10
    10b4:	c7 01       	movw	r24, r14
    10b6:	0e 94 c3 06 	call	0xd86	; 0xd86 <_ZN13Character_LCD6NumberEhmh>
				break;
    10ba:	6b c0       	rjmp	.+214    	; 0x1192 <_ZN13Character_LCD6PrintfEPKchhz+0x220>
				   ch = *ptr;
				}
			}
			else
			{
			  v_numOfDigits = 0xffu;
    10bc:	08 2d       	mov	r16, r8
				v_num_u16 = va_arg(argp, uint16_t);			
				Number(10u,v_num_u16,v_numOfDigits);				
				break;
			
			case 'U':    // Argument type is of integer, hence read 32bit unsigend data 
				v_num_u32 = va_arg(argp, uint32_t);			
    10be:	f5 01       	movw	r30, r10
				Number(10u,v_num_u32,v_numOfDigits);				
    10c0:	20 81       	ld	r18, Z
    10c2:	31 81       	ldd	r19, Z+1	; 0x01
    10c4:	42 81       	ldd	r20, Z+2	; 0x02
    10c6:	53 81       	ldd	r21, Z+3	; 0x03
    10c8:	b4 e0       	ldi	r27, 0x04	; 4
    10ca:	ab 0e       	add	r10, r27
    10cc:	b1 1c       	adc	r11, r1
    10ce:	6a e0       	ldi	r22, 0x0A	; 10
    10d0:	c7 01       	movw	r24, r14
    10d2:	0e 94 c3 06 	call	0xd86	; 0xd86 <_ZN13Character_LCD6NumberEhmh>
				break;			
    10d6:	5d c0       	rjmp	.+186    	; 0x1192 <_ZN13Character_LCD6PrintfEPKchhz+0x220>
				   ch = *ptr;
				}
			}
			else
			{
			  v_numOfDigits = 0xffu;
    10d8:	08 2d       	mov	r16, r8
				v_num_u32 = va_arg(argp, uint32_t);			
				Number(10u,v_num_u32,v_numOfDigits);				
				break;			

			case 'x':  // Argument type is of hex, hence hexadecimal data from the argp 
				v_num_u16 = va_arg(argp, uint16_t);				
    10da:	f5 01       	movw	r30, r10
				Number(16u,v_num_u16,v_numOfDigits);			
    10dc:	20 81       	ld	r18, Z
    10de:	31 81       	ldd	r19, Z+1	; 0x01
    10e0:	e2 e0       	ldi	r30, 0x02	; 2
    10e2:	ae 0e       	add	r10, r30
    10e4:	b1 1c       	adc	r11, r1
    10e6:	40 e0       	ldi	r20, 0x00	; 0
    10e8:	50 e0       	ldi	r21, 0x00	; 0
    10ea:	60 e1       	ldi	r22, 0x10	; 16
    10ec:	c7 01       	movw	r24, r14
    10ee:	0e 94 c3 06 	call	0xd86	; 0xd86 <_ZN13Character_LCD6NumberEhmh>
				break;
    10f2:	4f c0       	rjmp	.+158    	; 0x1192 <_ZN13Character_LCD6PrintfEPKchhz+0x220>
				   ch = *ptr;
				}
			}
			else
			{
			  v_numOfDigits = 0xffu;
    10f4:	08 2d       	mov	r16, r8
				v_num_u16 = va_arg(argp, uint16_t);				
				Number(16u,v_num_u16,v_numOfDigits);			
				break;

			case 'X':  // Argument type is of hex, hence hexadecimal data from the argp 
				v_num_u32 = va_arg(argp, uint32_t);						
    10f6:	f5 01       	movw	r30, r10
				Number(16u,v_num_u32,v_numOfDigits);				
    10f8:	20 81       	ld	r18, Z
    10fa:	31 81       	ldd	r19, Z+1	; 0x01
    10fc:	42 81       	ldd	r20, Z+2	; 0x02
    10fe:	53 81       	ldd	r21, Z+3	; 0x03
    1100:	f4 e0       	ldi	r31, 0x04	; 4
    1102:	af 0e       	add	r10, r31
    1104:	b1 1c       	adc	r11, r1
    1106:	60 e1       	ldi	r22, 0x10	; 16
    1108:	c7 01       	movw	r24, r14
    110a:	0e 94 c3 06 	call	0xd86	; 0xd86 <_ZN13Character_LCD6NumberEhmh>
				break;
    110e:	41 c0       	rjmp	.+130    	; 0x1192 <_ZN13Character_LCD6PrintfEPKchhz+0x220>
				   ch = *ptr;
				}
			}
			else
			{
			  v_numOfDigits = 0xffu;
    1110:	08 2d       	mov	r16, r8
				Number(16u,v_num_u32,v_numOfDigits);				
				break;

			
			case 'b':  // Argument type is of binary,Read int and convert to binary 
				v_num_u16 = va_arg(argp, uint16_t);		
    1112:	f5 01       	movw	r30, r10
    1114:	20 81       	ld	r18, Z
    1116:	31 81       	ldd	r19, Z+1	; 0x01
    1118:	82 e0       	ldi	r24, 0x02	; 2
    111a:	a8 0e       	add	r10, r24
    111c:	b1 1c       	adc	r11, r1
				
				if(v_numOfDigits >= 8)
    111e:	08 30       	cpi	r16, 0x08	; 8
    1120:	08 f0       	brcs	.+2      	; 0x1124 <_ZN13Character_LCD6PrintfEPKchhz+0x1b2>
				   v_numOfDigits = 8;
    1122:	03 2d       	mov	r16, r3
               
				Number(2u,v_num_u16,v_numOfDigits);			
    1124:	40 e0       	ldi	r20, 0x00	; 0
    1126:	50 e0       	ldi	r21, 0x00	; 0
    1128:	62 e0       	ldi	r22, 0x02	; 2
    112a:	c7 01       	movw	r24, r14
    112c:	0e 94 c3 06 	call	0xd86	; 0xd86 <_ZN13Character_LCD6NumberEhmh>
				break;
    1130:	30 c0       	rjmp	.+96     	; 0x1192 <_ZN13Character_LCD6PrintfEPKchhz+0x220>

			case 'B':  // Argument type is of binary,Read int and convert to binary 
				v_num_u32 = va_arg(argp, uint32_t);			
    1132:	f5 01       	movw	r30, r10
    1134:	20 81       	ld	r18, Z
    1136:	31 81       	ldd	r19, Z+1	; 0x01
    1138:	42 81       	ldd	r20, Z+2	; 0x02
    113a:	53 81       	ldd	r21, Z+3	; 0x03
    113c:	a4 e0       	ldi	r26, 0x04	; 4
    113e:	aa 0e       	add	r10, r26
    1140:	b1 1c       	adc	r11, r1
                
				if(v_numOfDigits == 0xffu)
    1142:	0f 3f       	cpi	r16, 0xFF	; 255
    1144:	09 f4       	brne	.+2      	; 0x1148 <_ZN13Character_LCD6PrintfEPKchhz+0x1d6>
				   v_numOfDigits = 32;		
    1146:	00 e2       	ldi	r16, 0x20	; 32
               
				Number(2u,v_num_u32,v_numOfDigits);				
    1148:	62 e0       	ldi	r22, 0x02	; 2
    114a:	c7 01       	movw	r24, r14
    114c:	0e 94 c3 06 	call	0xd86	; 0xd86 <_ZN13Character_LCD6NumberEhmh>
				break;
    1150:	20 c0       	rjmp	.+64     	; 0x1192 <_ZN13Character_LCD6PrintfEPKchhz+0x220>


			case 'F':
			case 'f': // Argument type is of float, hence read double data from the argp 
			
				v_floatNum_f32 = va_arg(argp, double);				
    1152:	f5 01       	movw	r30, r10
				FloatNumber(v_floatNum_f32);
    1154:	40 81       	ld	r20, Z
    1156:	51 81       	ldd	r21, Z+1	; 0x01
    1158:	62 81       	ldd	r22, Z+2	; 0x02
    115a:	73 81       	ldd	r23, Z+3	; 0x03
    115c:	b4 e0       	ldi	r27, 0x04	; 4
    115e:	ab 0e       	add	r10, r27
    1160:	b1 1c       	adc	r11, r1
    1162:	c7 01       	movw	r24, r14
    1164:	0e 94 76 07 	call	0xeec	; 0xeec <_ZN13Character_LCD11FloatNumberEf>
            
				break;                
    1168:	14 c0       	rjmp	.+40     	; 0x1192 <_ZN13Character_LCD6PrintfEPKchhz+0x220>


			case 'S':
			case 's': // Argument type is of string, hence get the pointer to sting passed 
				str = va_arg(argp, char *);
    116a:	85 01       	movw	r16, r10
    116c:	0e 5f       	subi	r16, 0xFE	; 254
    116e:	1f 4f       	sbci	r17, 0xFF	; 255
				SendString(str);			
    1170:	f5 01       	movw	r30, r10
    1172:	60 81       	ld	r22, Z
    1174:	71 81       	ldd	r23, Z+1	; 0x01
    1176:	c7 01       	movw	r24, r14
    1178:	0e 94 00 03 	call	0x600	; 0x600 <_ZN13Character_LCD10SendStringEPc>
				break;                


			case 'S':
			case 's': // Argument type is of string, hence get the pointer to sting passed 
				str = va_arg(argp, char *);
    117c:	58 01       	movw	r10, r16
				SendString(str);			
				break;
    117e:	09 c0       	rjmp	.+18     	; 0x1192 <_ZN13Character_LCD6PrintfEPKchhz+0x220>

			case '%':
				SendChar('%');
    1180:	65 e2       	ldi	r22, 0x25	; 37
    1182:	c7 01       	movw	r24, r14
    1184:	0e 94 46 01 	call	0x28c	; 0x28c <_ZN13Character_LCD8SendCharEh>
				break;
    1188:	04 c0       	rjmp	.+8      	; 0x1192 <_ZN13Character_LCD6PrintfEPKchhz+0x220>
			}
		}
		else
		{
			// As '%' is not detected transmit the char passed 
			SendChar(ch);
    118a:	c7 01       	movw	r24, r14
    118c:	0e 94 46 01 	call	0x28c	; 0x28c <_ZN13Character_LCD8SendCharEh>
    1190:	68 01       	movw	r12, r16


	va_start(argp, argList);

	// Loop through the list to extract all the input arguments 
	for(ptr = argList; *ptr != '\0'; ptr++)
    1192:	86 01       	movw	r16, r12
    1194:	0f 5f       	subi	r16, 0xFF	; 255
    1196:	1f 4f       	sbci	r17, 0xFF	; 255
    1198:	d6 01       	movw	r26, r12
    119a:	11 96       	adiw	r26, 0x01	; 1
    119c:	6c 91       	ld	r22, X
    119e:	61 11       	cpse	r22, r1
    11a0:	13 cf       	rjmp	.-474    	; 0xfc8 <_ZN13Character_LCD6PrintfEPKchhz+0x56>
    11a2:	15 c0       	rjmp	.+42     	; 0x11ce <_ZN13Character_LCD6PrintfEPKchhz+0x25c>
               
				Number(2u,v_num_u16,v_numOfDigits);			
				break;

			case 'B':  // Argument type is of binary,Read int and convert to binary 
				v_num_u32 = va_arg(argp, uint32_t);			
    11a4:	f5 01       	movw	r30, r10
    11a6:	20 81       	ld	r18, Z
    11a8:	31 81       	ldd	r19, Z+1	; 0x01
    11aa:	42 81       	ldd	r20, Z+2	; 0x02
    11ac:	53 81       	ldd	r21, Z+3	; 0x03
    11ae:	b4 e0       	ldi	r27, 0x04	; 4
    11b0:	ab 0e       	add	r10, r27
    11b2:	b1 1c       	adc	r11, r1
                
				if(v_numOfDigits == 0xffu)
				   v_numOfDigits = 32;		
    11b4:	00 e2       	ldi	r16, 0x20	; 32
    11b6:	c8 cf       	rjmp	.-112    	; 0x1148 <_ZN13Character_LCD6PrintfEPKchhz+0x1d6>
			{
			  v_numOfDigits = 0xffu;
			}				


			switch(ch)       // Decode the type of the argument 
    11b8:	8e 2f       	mov	r24, r30
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	fc 01       	movw	r30, r24
    11be:	b5 97       	sbiw	r30, 0x25	; 37
    11c0:	e4 35       	cpi	r30, 0x54	; 84
    11c2:	f1 05       	cpc	r31, r1
    11c4:	30 f7       	brcc	.-52     	; 0x1192 <_ZN13Character_LCD6PrintfEPKchhz+0x220>
    11c6:	e2 58       	subi	r30, 0x82	; 130
    11c8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ca:	0c 94 13 0b 	jmp	0x1626	; 0x1626 <__tablejump2__>
			SendChar(ch);
		}
	}

	va_end(argp);
}
    11ce:	df 91       	pop	r29
    11d0:	cf 91       	pop	r28
    11d2:	1f 91       	pop	r17
    11d4:	0f 91       	pop	r16
    11d6:	ff 90       	pop	r15
    11d8:	ef 90       	pop	r14
    11da:	df 90       	pop	r13
    11dc:	cf 90       	pop	r12
    11de:	bf 90       	pop	r11
    11e0:	af 90       	pop	r10
    11e2:	9f 90       	pop	r9
    11e4:	8f 90       	pop	r8
    11e6:	7f 90       	pop	r7
    11e8:	6f 90       	pop	r6
    11ea:	5f 90       	pop	r5
    11ec:	4f 90       	pop	r4
    11ee:	3f 90       	pop	r3
    11f0:	08 95       	ret

000011f2 <main>:
#define Prescaler 1
#define TWBR_val ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)

void i2c_init(void)
{
	TWBR = (uint8_t)TWBR_val;
    11f2:	80 e2       	ldi	r24, 0x20	; 32
    11f4:	80 b9       	out	0x00, r24	; 0
#define SLAVE_3_ADRR 0x30
#define SLAVE_4_ADRR 0x40
int main(void)
{
	i2c_init();
	DDRA = 0;
    11f6:	1a ba       	out	0x1a, r1	; 26
	DDRB = 0;
    11f8:	17 ba       	out	0x17, r1	; 23


	public:
	Character_LCD ();
	
	void SetRSPin(uint8_t ADD_PORT , uint8_t ADD_DDR , uint8_t Bit) { RS_PORT = ADD_PORT ; RS_DDR = ADD_DDR ; RS_Bit = Bit ; }
    11fa:	e6 e6       	ldi	r30, 0x66	; 102
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	92 e1       	ldi	r25, 0x12	; 18
    1200:	90 83       	st	Z, r25
    1202:	81 e1       	ldi	r24, 0x11	; 17
    1204:	81 83       	std	Z+1, r24	; 0x01
    1206:	12 82       	std	Z+2, r1	; 0x02
	void SetRWPin(uint8_t ADD_PORT , uint8_t ADD_DDR , uint8_t Bit) { RW_PORT = ADD_PORT ; RW_DDR = ADD_DDR ; RW_Bit = Bit ; }
    1208:	93 83       	std	Z+3, r25	; 0x03
    120a:	84 83       	std	Z+4, r24	; 0x04
    120c:	21 e0       	ldi	r18, 0x01	; 1
    120e:	25 83       	std	Z+5, r18	; 0x05
	void SetEPin(uint8_t ADD_PORT , uint8_t ADD_DDR , uint8_t Bit) { E_PORT = ADD_PORT ; E_DDR = ADD_DDR ; E_Bit = Bit ; }
    1210:	96 83       	std	Z+6, r25	; 0x06
    1212:	87 83       	std	Z+7, r24	; 0x07
    1214:	22 e0       	ldi	r18, 0x02	; 2
    1216:	20 87       	std	Z+8, r18	; 0x08
	void SetD4Pin(uint8_t ADD_PORT , uint8_t ADD_DDR , uint8_t Bit) { D4_PORT = ADD_PORT ; D4_DDR = ADD_DDR ; D4_Bit = Bit ; }
    1218:	91 87       	std	Z+9, r25	; 0x09
    121a:	82 87       	std	Z+10, r24	; 0x0a
    121c:	23 e0       	ldi	r18, 0x03	; 3
    121e:	23 87       	std	Z+11, r18	; 0x0b
	void SetD5Pin(uint8_t ADD_PORT , uint8_t ADD_DDR , uint8_t Bit) { D5_PORT = ADD_PORT ; D5_DDR = ADD_DDR ; D5_Bit = Bit ; }
    1220:	94 87       	std	Z+12, r25	; 0x0c
    1222:	85 87       	std	Z+13, r24	; 0x0d
    1224:	24 e0       	ldi	r18, 0x04	; 4
    1226:	26 87       	std	Z+14, r18	; 0x0e
	void SetD6Pin(uint8_t ADD_PORT , uint8_t ADD_DDR , uint8_t Bit) { D6_PORT = ADD_PORT ; D6_DDR = ADD_DDR ; D6_Bit = Bit ; }
    1228:	97 87       	std	Z+15, r25	; 0x0f
    122a:	80 8b       	std	Z+16, r24	; 0x10
    122c:	25 e0       	ldi	r18, 0x05	; 5
    122e:	21 8b       	std	Z+17, r18	; 0x11
	void SetD7Pin(uint8_t ADD_PORT , uint8_t ADD_DDR , uint8_t Bit) { D7_PORT = ADD_PORT ; D7_DDR = ADD_DDR ; D7_Bit = Bit ; }
    1230:	92 8b       	std	Z+18, r25	; 0x12
    1232:	83 8b       	std	Z+19, r24	; 0x13
    1234:	86 e0       	ldi	r24, 0x06	; 6
    1236:	84 8b       	std	Z+20, r24	; 0x14
			LCD1.SetEPin  (ADD(PORTD),ADD(DDRD),2);
			LCD1.SetD4Pin (ADD(PORTD),ADD(DDRD),3);
			LCD1.SetD5Pin (ADD(PORTD),ADD(DDRD),4);
			LCD1.SetD6Pin (ADD(PORTD),ADD(DDRD),5);
			LCD1.SetD7Pin (ADD(PORTD),ADD(DDRD),6);
			LCD1.Init(16,2);
    1238:	42 e0       	ldi	r20, 0x02	; 2
    123a:	60 e1       	ldi	r22, 0x10	; 16
    123c:	cf 01       	movw	r24, r30
    123e:	0e 94 ae 04 	call	0x95c	; 0x95c <_ZN13Character_LCD4InitEhh>
    /* Replace with your application code */
    while (1) 
    {
		
		LCD1.Clr();
		LCD1.Printf("test",0,0);
    1242:	00 e6       	ldi	r16, 0x60	; 96
    1244:	10 e0       	ldi	r17, 0x00	; 0
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1246:	c4 e9       	ldi	r28, 0x94	; 148
	
    /* Replace with your application code */
    while (1) 
    {
		
		LCD1.Clr();
    1248:	86 e6       	ldi	r24, 0x66	; 102
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	0e 94 8f 04 	call	0x91e	; 0x91e <_ZN13Character_LCD3ClrEv>
		LCD1.Printf("test",0,0);
    1250:	1f 92       	push	r1
    1252:	1f 92       	push	r1
    1254:	1f 93       	push	r17
    1256:	0f 93       	push	r16
    1258:	86 e6       	ldi	r24, 0x66	; 102
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	9f 93       	push	r25
    125e:	8f 93       	push	r24
    1260:	0e 94 b9 07 	call	0xf72	; 0xf72 <_ZN13Character_LCD6PrintfEPKchhz>
		while((PINB & 0x01) ==1){
    1264:	0f 90       	pop	r0
    1266:	0f 90       	pop	r0
    1268:	0f 90       	pop	r0
    126a:	0f 90       	pop	r0
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	b0 9b       	sbis	0x16, 0	; 22
    1272:	ea cf       	rjmp	.-44     	; 0x1248 <main+0x56>
		//char key = 0x2f;
		if ((PINB & 0b00000010) == 0b00000000)
    1274:	b1 99       	sbic	0x16, 1	; 22
    1276:	04 c0       	rjmp	.+8      	; 0x1280 <main+0x8e>
		{
		i2c_start(SLAVE_1_ADRR <<1 | I2C_WRITE);
    1278:	80 e2       	ldi	r24, 0x20	; 32
    127a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_Z9i2c_starth>
    127e:	05 c0       	rjmp	.+10     	; 0x128a <main+0x98>
		}
		else if ((PINB & 0b00000010) == 0b00000010)
    1280:	b1 9b       	sbis	0x16, 1	; 22
    1282:	03 c0       	rjmp	.+6      	; 0x128a <main+0x98>
		{
		i2c_start(SLAVE_2_ADRR <<1 | I2C_WRITE);
    1284:	80 e4       	ldi	r24, 0x40	; 64
    1286:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_Z9i2c_starth>
		}

		//i2c_start(0x10);
		i2c_write(PINA);
    128a:	89 b3       	in	r24, 0x19	; 25
    128c:	0e 94 1a 01 	call	0x234	; 0x234 <_Z9i2c_writeh>
    1290:	c6 bf       	out	0x36, r28	; 54
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1292:	2f ef       	ldi	r18, 0xFF	; 255
    1294:	89 e6       	ldi	r24, 0x69	; 105
    1296:	98 e1       	ldi	r25, 0x18	; 24
    1298:	21 50       	subi	r18, 0x01	; 1
    129a:	80 40       	sbci	r24, 0x00	; 0
    129c:	90 40       	sbci	r25, 0x00	; 0
    129e:	e1 f7       	brne	.-8      	; 0x1298 <main+0xa6>
    12a0:	00 c0       	rjmp	.+0      	; 0x12a2 <main+0xb0>
    12a2:	00 00       	nop
    while (1) 
    {
		
		LCD1.Clr();
		LCD1.Printf("test",0,0);
		while((PINB & 0x01) ==1){
    12a4:	b0 99       	sbic	0x16, 0	; 22
    12a6:	e6 cf       	rjmp	.-52     	; 0x1274 <main+0x82>
    12a8:	cf cf       	rjmp	.-98     	; 0x1248 <main+0x56>

000012aa <_GLOBAL__sub_I__Z8i2c_initv>:
#include <D:\GitHub\LED-I2C\LED-I2C Lib\i2c_master.c>
#include <D:\GitHub\LCD-Lib-Cplusplus\LIB\CharacterLCD.h>
#include <D:\GitHub\LCD-Lib-Cplusplus\LIB\CharacterLCD.cpp>
char data_received;

Character_LCD LCD1;
    12aa:	86 e6       	ldi	r24, 0x66	; 102
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	0e 94 27 01 	call	0x24e	; 0x24e <_ZN13Character_LCDC1Ev>
    12b2:	08 95       	ret

000012b4 <__subsf3>:
    12b4:	50 58       	subi	r21, 0x80	; 128

000012b6 <__addsf3>:
    12b6:	bb 27       	eor	r27, r27
    12b8:	aa 27       	eor	r26, r26
    12ba:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__addsf3x>
    12be:	0c 94 4a 0a 	jmp	0x1494	; 0x1494 <__fp_round>
    12c2:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__fp_pscA>
    12c6:	38 f0       	brcs	.+14     	; 0x12d6 <__addsf3+0x20>
    12c8:	0e 94 43 0a 	call	0x1486	; 0x1486 <__fp_pscB>
    12cc:	20 f0       	brcs	.+8      	; 0x12d6 <__addsf3+0x20>
    12ce:	39 f4       	brne	.+14     	; 0x12de <__addsf3+0x28>
    12d0:	9f 3f       	cpi	r25, 0xFF	; 255
    12d2:	19 f4       	brne	.+6      	; 0x12da <__addsf3+0x24>
    12d4:	26 f4       	brtc	.+8      	; 0x12de <__addsf3+0x28>
    12d6:	0c 94 39 0a 	jmp	0x1472	; 0x1472 <__fp_nan>
    12da:	0e f4       	brtc	.+2      	; 0x12de <__addsf3+0x28>
    12dc:	e0 95       	com	r30
    12de:	e7 fb       	bst	r30, 7
    12e0:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__fp_inf>

000012e4 <__addsf3x>:
    12e4:	e9 2f       	mov	r30, r25
    12e6:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__fp_split3>
    12ea:	58 f3       	brcs	.-42     	; 0x12c2 <__addsf3+0xc>
    12ec:	ba 17       	cp	r27, r26
    12ee:	62 07       	cpc	r22, r18
    12f0:	73 07       	cpc	r23, r19
    12f2:	84 07       	cpc	r24, r20
    12f4:	95 07       	cpc	r25, r21
    12f6:	20 f0       	brcs	.+8      	; 0x1300 <__addsf3x+0x1c>
    12f8:	79 f4       	brne	.+30     	; 0x1318 <__addsf3x+0x34>
    12fa:	a6 f5       	brtc	.+104    	; 0x1364 <__addsf3x+0x80>
    12fc:	0c 94 7d 0a 	jmp	0x14fa	; 0x14fa <__fp_zero>
    1300:	0e f4       	brtc	.+2      	; 0x1304 <__addsf3x+0x20>
    1302:	e0 95       	com	r30
    1304:	0b 2e       	mov	r0, r27
    1306:	ba 2f       	mov	r27, r26
    1308:	a0 2d       	mov	r26, r0
    130a:	0b 01       	movw	r0, r22
    130c:	b9 01       	movw	r22, r18
    130e:	90 01       	movw	r18, r0
    1310:	0c 01       	movw	r0, r24
    1312:	ca 01       	movw	r24, r20
    1314:	a0 01       	movw	r20, r0
    1316:	11 24       	eor	r1, r1
    1318:	ff 27       	eor	r31, r31
    131a:	59 1b       	sub	r21, r25
    131c:	99 f0       	breq	.+38     	; 0x1344 <__addsf3x+0x60>
    131e:	59 3f       	cpi	r21, 0xF9	; 249
    1320:	50 f4       	brcc	.+20     	; 0x1336 <__addsf3x+0x52>
    1322:	50 3e       	cpi	r21, 0xE0	; 224
    1324:	68 f1       	brcs	.+90     	; 0x1380 <__addsf3x+0x9c>
    1326:	1a 16       	cp	r1, r26
    1328:	f0 40       	sbci	r31, 0x00	; 0
    132a:	a2 2f       	mov	r26, r18
    132c:	23 2f       	mov	r18, r19
    132e:	34 2f       	mov	r19, r20
    1330:	44 27       	eor	r20, r20
    1332:	58 5f       	subi	r21, 0xF8	; 248
    1334:	f3 cf       	rjmp	.-26     	; 0x131c <__addsf3x+0x38>
    1336:	46 95       	lsr	r20
    1338:	37 95       	ror	r19
    133a:	27 95       	ror	r18
    133c:	a7 95       	ror	r26
    133e:	f0 40       	sbci	r31, 0x00	; 0
    1340:	53 95       	inc	r21
    1342:	c9 f7       	brne	.-14     	; 0x1336 <__addsf3x+0x52>
    1344:	7e f4       	brtc	.+30     	; 0x1364 <__addsf3x+0x80>
    1346:	1f 16       	cp	r1, r31
    1348:	ba 0b       	sbc	r27, r26
    134a:	62 0b       	sbc	r22, r18
    134c:	73 0b       	sbc	r23, r19
    134e:	84 0b       	sbc	r24, r20
    1350:	ba f0       	brmi	.+46     	; 0x1380 <__addsf3x+0x9c>
    1352:	91 50       	subi	r25, 0x01	; 1
    1354:	a1 f0       	breq	.+40     	; 0x137e <__addsf3x+0x9a>
    1356:	ff 0f       	add	r31, r31
    1358:	bb 1f       	adc	r27, r27
    135a:	66 1f       	adc	r22, r22
    135c:	77 1f       	adc	r23, r23
    135e:	88 1f       	adc	r24, r24
    1360:	c2 f7       	brpl	.-16     	; 0x1352 <__addsf3x+0x6e>
    1362:	0e c0       	rjmp	.+28     	; 0x1380 <__addsf3x+0x9c>
    1364:	ba 0f       	add	r27, r26
    1366:	62 1f       	adc	r22, r18
    1368:	73 1f       	adc	r23, r19
    136a:	84 1f       	adc	r24, r20
    136c:	48 f4       	brcc	.+18     	; 0x1380 <__addsf3x+0x9c>
    136e:	87 95       	ror	r24
    1370:	77 95       	ror	r23
    1372:	67 95       	ror	r22
    1374:	b7 95       	ror	r27
    1376:	f7 95       	ror	r31
    1378:	9e 3f       	cpi	r25, 0xFE	; 254
    137a:	08 f0       	brcs	.+2      	; 0x137e <__addsf3x+0x9a>
    137c:	b0 cf       	rjmp	.-160    	; 0x12de <__addsf3+0x28>
    137e:	93 95       	inc	r25
    1380:	88 0f       	add	r24, r24
    1382:	08 f0       	brcs	.+2      	; 0x1386 <__addsf3x+0xa2>
    1384:	99 27       	eor	r25, r25
    1386:	ee 0f       	add	r30, r30
    1388:	97 95       	ror	r25
    138a:	87 95       	ror	r24
    138c:	08 95       	ret

0000138e <__fixunssfsi>:
    138e:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__fp_splitA>
    1392:	88 f0       	brcs	.+34     	; 0x13b6 <__fixunssfsi+0x28>
    1394:	9f 57       	subi	r25, 0x7F	; 127
    1396:	98 f0       	brcs	.+38     	; 0x13be <__fixunssfsi+0x30>
    1398:	b9 2f       	mov	r27, r25
    139a:	99 27       	eor	r25, r25
    139c:	b7 51       	subi	r27, 0x17	; 23
    139e:	b0 f0       	brcs	.+44     	; 0x13cc <__fixunssfsi+0x3e>
    13a0:	e1 f0       	breq	.+56     	; 0x13da <__fixunssfsi+0x4c>
    13a2:	66 0f       	add	r22, r22
    13a4:	77 1f       	adc	r23, r23
    13a6:	88 1f       	adc	r24, r24
    13a8:	99 1f       	adc	r25, r25
    13aa:	1a f0       	brmi	.+6      	; 0x13b2 <__fixunssfsi+0x24>
    13ac:	ba 95       	dec	r27
    13ae:	c9 f7       	brne	.-14     	; 0x13a2 <__fixunssfsi+0x14>
    13b0:	14 c0       	rjmp	.+40     	; 0x13da <__fixunssfsi+0x4c>
    13b2:	b1 30       	cpi	r27, 0x01	; 1
    13b4:	91 f0       	breq	.+36     	; 0x13da <__fixunssfsi+0x4c>
    13b6:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__fp_zero>
    13ba:	b1 e0       	ldi	r27, 0x01	; 1
    13bc:	08 95       	ret
    13be:	0c 94 7d 0a 	jmp	0x14fa	; 0x14fa <__fp_zero>
    13c2:	67 2f       	mov	r22, r23
    13c4:	78 2f       	mov	r23, r24
    13c6:	88 27       	eor	r24, r24
    13c8:	b8 5f       	subi	r27, 0xF8	; 248
    13ca:	39 f0       	breq	.+14     	; 0x13da <__fixunssfsi+0x4c>
    13cc:	b9 3f       	cpi	r27, 0xF9	; 249
    13ce:	cc f3       	brlt	.-14     	; 0x13c2 <__fixunssfsi+0x34>
    13d0:	86 95       	lsr	r24
    13d2:	77 95       	ror	r23
    13d4:	67 95       	ror	r22
    13d6:	b3 95       	inc	r27
    13d8:	d9 f7       	brne	.-10     	; 0x13d0 <__fixunssfsi+0x42>
    13da:	3e f4       	brtc	.+14     	; 0x13ea <__fixunssfsi+0x5c>
    13dc:	90 95       	com	r25
    13de:	80 95       	com	r24
    13e0:	70 95       	com	r23
    13e2:	61 95       	neg	r22
    13e4:	7f 4f       	sbci	r23, 0xFF	; 255
    13e6:	8f 4f       	sbci	r24, 0xFF	; 255
    13e8:	9f 4f       	sbci	r25, 0xFF	; 255
    13ea:	08 95       	ret

000013ec <__floatunsisf>:
    13ec:	e8 94       	clt
    13ee:	09 c0       	rjmp	.+18     	; 0x1402 <__floatsisf+0x12>

000013f0 <__floatsisf>:
    13f0:	97 fb       	bst	r25, 7
    13f2:	3e f4       	brtc	.+14     	; 0x1402 <__floatsisf+0x12>
    13f4:	90 95       	com	r25
    13f6:	80 95       	com	r24
    13f8:	70 95       	com	r23
    13fa:	61 95       	neg	r22
    13fc:	7f 4f       	sbci	r23, 0xFF	; 255
    13fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1400:	9f 4f       	sbci	r25, 0xFF	; 255
    1402:	99 23       	and	r25, r25
    1404:	a9 f0       	breq	.+42     	; 0x1430 <__floatsisf+0x40>
    1406:	f9 2f       	mov	r31, r25
    1408:	96 e9       	ldi	r25, 0x96	; 150
    140a:	bb 27       	eor	r27, r27
    140c:	93 95       	inc	r25
    140e:	f6 95       	lsr	r31
    1410:	87 95       	ror	r24
    1412:	77 95       	ror	r23
    1414:	67 95       	ror	r22
    1416:	b7 95       	ror	r27
    1418:	f1 11       	cpse	r31, r1
    141a:	f8 cf       	rjmp	.-16     	; 0x140c <__floatsisf+0x1c>
    141c:	fa f4       	brpl	.+62     	; 0x145c <__floatsisf+0x6c>
    141e:	bb 0f       	add	r27, r27
    1420:	11 f4       	brne	.+4      	; 0x1426 <__floatsisf+0x36>
    1422:	60 ff       	sbrs	r22, 0
    1424:	1b c0       	rjmp	.+54     	; 0x145c <__floatsisf+0x6c>
    1426:	6f 5f       	subi	r22, 0xFF	; 255
    1428:	7f 4f       	sbci	r23, 0xFF	; 255
    142a:	8f 4f       	sbci	r24, 0xFF	; 255
    142c:	9f 4f       	sbci	r25, 0xFF	; 255
    142e:	16 c0       	rjmp	.+44     	; 0x145c <__floatsisf+0x6c>
    1430:	88 23       	and	r24, r24
    1432:	11 f0       	breq	.+4      	; 0x1438 <__floatsisf+0x48>
    1434:	96 e9       	ldi	r25, 0x96	; 150
    1436:	11 c0       	rjmp	.+34     	; 0x145a <__floatsisf+0x6a>
    1438:	77 23       	and	r23, r23
    143a:	21 f0       	breq	.+8      	; 0x1444 <__floatsisf+0x54>
    143c:	9e e8       	ldi	r25, 0x8E	; 142
    143e:	87 2f       	mov	r24, r23
    1440:	76 2f       	mov	r23, r22
    1442:	05 c0       	rjmp	.+10     	; 0x144e <__floatsisf+0x5e>
    1444:	66 23       	and	r22, r22
    1446:	71 f0       	breq	.+28     	; 0x1464 <__floatsisf+0x74>
    1448:	96 e8       	ldi	r25, 0x86	; 134
    144a:	86 2f       	mov	r24, r22
    144c:	70 e0       	ldi	r23, 0x00	; 0
    144e:	60 e0       	ldi	r22, 0x00	; 0
    1450:	2a f0       	brmi	.+10     	; 0x145c <__floatsisf+0x6c>
    1452:	9a 95       	dec	r25
    1454:	66 0f       	add	r22, r22
    1456:	77 1f       	adc	r23, r23
    1458:	88 1f       	adc	r24, r24
    145a:	da f7       	brpl	.-10     	; 0x1452 <__floatsisf+0x62>
    145c:	88 0f       	add	r24, r24
    145e:	96 95       	lsr	r25
    1460:	87 95       	ror	r24
    1462:	97 f9       	bld	r25, 7
    1464:	08 95       	ret

00001466 <__fp_inf>:
    1466:	97 f9       	bld	r25, 7
    1468:	9f 67       	ori	r25, 0x7F	; 127
    146a:	80 e8       	ldi	r24, 0x80	; 128
    146c:	70 e0       	ldi	r23, 0x00	; 0
    146e:	60 e0       	ldi	r22, 0x00	; 0
    1470:	08 95       	ret

00001472 <__fp_nan>:
    1472:	9f ef       	ldi	r25, 0xFF	; 255
    1474:	80 ec       	ldi	r24, 0xC0	; 192
    1476:	08 95       	ret

00001478 <__fp_pscA>:
    1478:	00 24       	eor	r0, r0
    147a:	0a 94       	dec	r0
    147c:	16 16       	cp	r1, r22
    147e:	17 06       	cpc	r1, r23
    1480:	18 06       	cpc	r1, r24
    1482:	09 06       	cpc	r0, r25
    1484:	08 95       	ret

00001486 <__fp_pscB>:
    1486:	00 24       	eor	r0, r0
    1488:	0a 94       	dec	r0
    148a:	12 16       	cp	r1, r18
    148c:	13 06       	cpc	r1, r19
    148e:	14 06       	cpc	r1, r20
    1490:	05 06       	cpc	r0, r21
    1492:	08 95       	ret

00001494 <__fp_round>:
    1494:	09 2e       	mov	r0, r25
    1496:	03 94       	inc	r0
    1498:	00 0c       	add	r0, r0
    149a:	11 f4       	brne	.+4      	; 0x14a0 <__fp_round+0xc>
    149c:	88 23       	and	r24, r24
    149e:	52 f0       	brmi	.+20     	; 0x14b4 <__fp_round+0x20>
    14a0:	bb 0f       	add	r27, r27
    14a2:	40 f4       	brcc	.+16     	; 0x14b4 <__fp_round+0x20>
    14a4:	bf 2b       	or	r27, r31
    14a6:	11 f4       	brne	.+4      	; 0x14ac <__fp_round+0x18>
    14a8:	60 ff       	sbrs	r22, 0
    14aa:	04 c0       	rjmp	.+8      	; 0x14b4 <__fp_round+0x20>
    14ac:	6f 5f       	subi	r22, 0xFF	; 255
    14ae:	7f 4f       	sbci	r23, 0xFF	; 255
    14b0:	8f 4f       	sbci	r24, 0xFF	; 255
    14b2:	9f 4f       	sbci	r25, 0xFF	; 255
    14b4:	08 95       	ret

000014b6 <__fp_split3>:
    14b6:	57 fd       	sbrc	r21, 7
    14b8:	90 58       	subi	r25, 0x80	; 128
    14ba:	44 0f       	add	r20, r20
    14bc:	55 1f       	adc	r21, r21
    14be:	59 f0       	breq	.+22     	; 0x14d6 <__fp_splitA+0x10>
    14c0:	5f 3f       	cpi	r21, 0xFF	; 255
    14c2:	71 f0       	breq	.+28     	; 0x14e0 <__fp_splitA+0x1a>
    14c4:	47 95       	ror	r20

000014c6 <__fp_splitA>:
    14c6:	88 0f       	add	r24, r24
    14c8:	97 fb       	bst	r25, 7
    14ca:	99 1f       	adc	r25, r25
    14cc:	61 f0       	breq	.+24     	; 0x14e6 <__fp_splitA+0x20>
    14ce:	9f 3f       	cpi	r25, 0xFF	; 255
    14d0:	79 f0       	breq	.+30     	; 0x14f0 <__fp_splitA+0x2a>
    14d2:	87 95       	ror	r24
    14d4:	08 95       	ret
    14d6:	12 16       	cp	r1, r18
    14d8:	13 06       	cpc	r1, r19
    14da:	14 06       	cpc	r1, r20
    14dc:	55 1f       	adc	r21, r21
    14de:	f2 cf       	rjmp	.-28     	; 0x14c4 <__fp_split3+0xe>
    14e0:	46 95       	lsr	r20
    14e2:	f1 df       	rcall	.-30     	; 0x14c6 <__fp_splitA>
    14e4:	08 c0       	rjmp	.+16     	; 0x14f6 <__fp_splitA+0x30>
    14e6:	16 16       	cp	r1, r22
    14e8:	17 06       	cpc	r1, r23
    14ea:	18 06       	cpc	r1, r24
    14ec:	99 1f       	adc	r25, r25
    14ee:	f1 cf       	rjmp	.-30     	; 0x14d2 <__fp_splitA+0xc>
    14f0:	86 95       	lsr	r24
    14f2:	71 05       	cpc	r23, r1
    14f4:	61 05       	cpc	r22, r1
    14f6:	08 94       	sec
    14f8:	08 95       	ret

000014fa <__fp_zero>:
    14fa:	e8 94       	clt

000014fc <__fp_szero>:
    14fc:	bb 27       	eor	r27, r27
    14fe:	66 27       	eor	r22, r22
    1500:	77 27       	eor	r23, r23
    1502:	cb 01       	movw	r24, r22
    1504:	97 f9       	bld	r25, 7
    1506:	08 95       	ret

00001508 <__mulsf3>:
    1508:	0e 94 97 0a 	call	0x152e	; 0x152e <__mulsf3x>
    150c:	0c 94 4a 0a 	jmp	0x1494	; 0x1494 <__fp_round>
    1510:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__fp_pscA>
    1514:	38 f0       	brcs	.+14     	; 0x1524 <__mulsf3+0x1c>
    1516:	0e 94 43 0a 	call	0x1486	; 0x1486 <__fp_pscB>
    151a:	20 f0       	brcs	.+8      	; 0x1524 <__mulsf3+0x1c>
    151c:	95 23       	and	r25, r21
    151e:	11 f0       	breq	.+4      	; 0x1524 <__mulsf3+0x1c>
    1520:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__fp_inf>
    1524:	0c 94 39 0a 	jmp	0x1472	; 0x1472 <__fp_nan>
    1528:	11 24       	eor	r1, r1
    152a:	0c 94 7e 0a 	jmp	0x14fc	; 0x14fc <__fp_szero>

0000152e <__mulsf3x>:
    152e:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__fp_split3>
    1532:	70 f3       	brcs	.-36     	; 0x1510 <__mulsf3+0x8>

00001534 <__mulsf3_pse>:
    1534:	95 9f       	mul	r25, r21
    1536:	c1 f3       	breq	.-16     	; 0x1528 <__mulsf3+0x20>
    1538:	95 0f       	add	r25, r21
    153a:	50 e0       	ldi	r21, 0x00	; 0
    153c:	55 1f       	adc	r21, r21
    153e:	62 9f       	mul	r22, r18
    1540:	f0 01       	movw	r30, r0
    1542:	72 9f       	mul	r23, r18
    1544:	bb 27       	eor	r27, r27
    1546:	f0 0d       	add	r31, r0
    1548:	b1 1d       	adc	r27, r1
    154a:	63 9f       	mul	r22, r19
    154c:	aa 27       	eor	r26, r26
    154e:	f0 0d       	add	r31, r0
    1550:	b1 1d       	adc	r27, r1
    1552:	aa 1f       	adc	r26, r26
    1554:	64 9f       	mul	r22, r20
    1556:	66 27       	eor	r22, r22
    1558:	b0 0d       	add	r27, r0
    155a:	a1 1d       	adc	r26, r1
    155c:	66 1f       	adc	r22, r22
    155e:	82 9f       	mul	r24, r18
    1560:	22 27       	eor	r18, r18
    1562:	b0 0d       	add	r27, r0
    1564:	a1 1d       	adc	r26, r1
    1566:	62 1f       	adc	r22, r18
    1568:	73 9f       	mul	r23, r19
    156a:	b0 0d       	add	r27, r0
    156c:	a1 1d       	adc	r26, r1
    156e:	62 1f       	adc	r22, r18
    1570:	83 9f       	mul	r24, r19
    1572:	a0 0d       	add	r26, r0
    1574:	61 1d       	adc	r22, r1
    1576:	22 1f       	adc	r18, r18
    1578:	74 9f       	mul	r23, r20
    157a:	33 27       	eor	r19, r19
    157c:	a0 0d       	add	r26, r0
    157e:	61 1d       	adc	r22, r1
    1580:	23 1f       	adc	r18, r19
    1582:	84 9f       	mul	r24, r20
    1584:	60 0d       	add	r22, r0
    1586:	21 1d       	adc	r18, r1
    1588:	82 2f       	mov	r24, r18
    158a:	76 2f       	mov	r23, r22
    158c:	6a 2f       	mov	r22, r26
    158e:	11 24       	eor	r1, r1
    1590:	9f 57       	subi	r25, 0x7F	; 127
    1592:	50 40       	sbci	r21, 0x00	; 0
    1594:	9a f0       	brmi	.+38     	; 0x15bc <__mulsf3_pse+0x88>
    1596:	f1 f0       	breq	.+60     	; 0x15d4 <__mulsf3_pse+0xa0>
    1598:	88 23       	and	r24, r24
    159a:	4a f0       	brmi	.+18     	; 0x15ae <__mulsf3_pse+0x7a>
    159c:	ee 0f       	add	r30, r30
    159e:	ff 1f       	adc	r31, r31
    15a0:	bb 1f       	adc	r27, r27
    15a2:	66 1f       	adc	r22, r22
    15a4:	77 1f       	adc	r23, r23
    15a6:	88 1f       	adc	r24, r24
    15a8:	91 50       	subi	r25, 0x01	; 1
    15aa:	50 40       	sbci	r21, 0x00	; 0
    15ac:	a9 f7       	brne	.-22     	; 0x1598 <__mulsf3_pse+0x64>
    15ae:	9e 3f       	cpi	r25, 0xFE	; 254
    15b0:	51 05       	cpc	r21, r1
    15b2:	80 f0       	brcs	.+32     	; 0x15d4 <__mulsf3_pse+0xa0>
    15b4:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__fp_inf>
    15b8:	0c 94 7e 0a 	jmp	0x14fc	; 0x14fc <__fp_szero>
    15bc:	5f 3f       	cpi	r21, 0xFF	; 255
    15be:	e4 f3       	brlt	.-8      	; 0x15b8 <__mulsf3_pse+0x84>
    15c0:	98 3e       	cpi	r25, 0xE8	; 232
    15c2:	d4 f3       	brlt	.-12     	; 0x15b8 <__mulsf3_pse+0x84>
    15c4:	86 95       	lsr	r24
    15c6:	77 95       	ror	r23
    15c8:	67 95       	ror	r22
    15ca:	b7 95       	ror	r27
    15cc:	f7 95       	ror	r31
    15ce:	e7 95       	ror	r30
    15d0:	9f 5f       	subi	r25, 0xFF	; 255
    15d2:	c1 f7       	brne	.-16     	; 0x15c4 <__mulsf3_pse+0x90>
    15d4:	fe 2b       	or	r31, r30
    15d6:	88 0f       	add	r24, r24
    15d8:	91 1d       	adc	r25, r1
    15da:	96 95       	lsr	r25
    15dc:	87 95       	ror	r24
    15de:	97 f9       	bld	r25, 7
    15e0:	08 95       	ret

000015e2 <__udivmodsi4>:
    15e2:	a1 e2       	ldi	r26, 0x21	; 33
    15e4:	1a 2e       	mov	r1, r26
    15e6:	aa 1b       	sub	r26, r26
    15e8:	bb 1b       	sub	r27, r27
    15ea:	fd 01       	movw	r30, r26
    15ec:	0d c0       	rjmp	.+26     	; 0x1608 <__udivmodsi4_ep>

000015ee <__udivmodsi4_loop>:
    15ee:	aa 1f       	adc	r26, r26
    15f0:	bb 1f       	adc	r27, r27
    15f2:	ee 1f       	adc	r30, r30
    15f4:	ff 1f       	adc	r31, r31
    15f6:	a2 17       	cp	r26, r18
    15f8:	b3 07       	cpc	r27, r19
    15fa:	e4 07       	cpc	r30, r20
    15fc:	f5 07       	cpc	r31, r21
    15fe:	20 f0       	brcs	.+8      	; 0x1608 <__udivmodsi4_ep>
    1600:	a2 1b       	sub	r26, r18
    1602:	b3 0b       	sbc	r27, r19
    1604:	e4 0b       	sbc	r30, r20
    1606:	f5 0b       	sbc	r31, r21

00001608 <__udivmodsi4_ep>:
    1608:	66 1f       	adc	r22, r22
    160a:	77 1f       	adc	r23, r23
    160c:	88 1f       	adc	r24, r24
    160e:	99 1f       	adc	r25, r25
    1610:	1a 94       	dec	r1
    1612:	69 f7       	brne	.-38     	; 0x15ee <__udivmodsi4_loop>
    1614:	60 95       	com	r22
    1616:	70 95       	com	r23
    1618:	80 95       	com	r24
    161a:	90 95       	com	r25
    161c:	9b 01       	movw	r18, r22
    161e:	ac 01       	movw	r20, r24
    1620:	bd 01       	movw	r22, r26
    1622:	cf 01       	movw	r24, r30
    1624:	08 95       	ret

00001626 <__tablejump2__>:
    1626:	ee 0f       	add	r30, r30
    1628:	ff 1f       	adc	r31, r31
    162a:	05 90       	lpm	r0, Z+
    162c:	f4 91       	lpm	r31, Z
    162e:	e0 2d       	mov	r30, r0
    1630:	09 94       	ijmp

00001632 <_exit>:
    1632:	f8 94       	cli

00001634 <__stop_program>:
    1634:	ff cf       	rjmp	.-2      	; 0x1634 <__stop_program>
