
LED-I2C-Slave 2 C++.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  000001f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000852  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000067b  00000000  00000000  00000b06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003b6  00000000  00000000  00001181  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00001538  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000494  00000000  00000000  00001614  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000177  00000000  00000000  00001aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001c1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__vector_19>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 36       	cpi	r26, 0x65	; 101
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 ad 00 	call	0x15a	; 0x15a <main>
  74:	0c 94 bc 00 	jmp	0x178	; 0x178 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <_Z12I2C_receivedh>:
{
  // clear acknowledge and enable bits
  cli();
  TWCR = 0;
  TWAR = 0;
  sei();
  7c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
  80:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  84:	8b bb       	out	0x1b, r24	; 27
  86:	08 95       	ret

00000088 <_Z13I2C_requestedv>:
  88:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  8c:	83 b9       	out	0x03, r24	; 3
  8e:	08 95       	ret

00000090 <_Z8I2C_inith>:
  90:	f8 94       	cli
  92:	88 0f       	add	r24, r24
  94:	82 b9       	out	0x02, r24	; 2
  96:	85 ec       	ldi	r24, 0xC5	; 197
  98:	86 bf       	out	0x36, r24	; 54
  9a:	78 94       	sei
  9c:	08 95       	ret

0000009e <__vector_19>:
}

ISR(TWI_vect)
{
  9e:	1f 92       	push	r1
  a0:	0f 92       	push	r0
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	0f 92       	push	r0
  a6:	11 24       	eor	r1, r1
  a8:	2f 93       	push	r18
  aa:	3f 93       	push	r19
  ac:	4f 93       	push	r20
  ae:	5f 93       	push	r21
  b0:	6f 93       	push	r22
  b2:	7f 93       	push	r23
  b4:	8f 93       	push	r24
  b6:	9f 93       	push	r25
  b8:	af 93       	push	r26
  ba:	bf 93       	push	r27
  bc:	ef 93       	push	r30
  be:	ff 93       	push	r31
  switch(TW_STATUS)
  c0:	81 b1       	in	r24, 0x01	; 1
  c2:	88 7f       	andi	r24, 0xF8	; 248
  c4:	80 38       	cpi	r24, 0x80	; 128
  c6:	49 f0       	breq	.+18     	; 0xda <__vector_19+0x3c>
  c8:	18 f4       	brcc	.+6      	; 0xd0 <__vector_19+0x32>
  ca:	88 23       	and	r24, r24
  cc:	f9 f0       	breq	.+62     	; 0x10c <__vector_19+0x6e>
  ce:	22 c0       	rjmp	.+68     	; 0x114 <__vector_19+0x76>
  d0:	88 3a       	cpi	r24, 0xA8	; 168
  d2:	61 f0       	breq	.+24     	; 0xec <__vector_19+0x4e>
  d4:	88 3b       	cpi	r24, 0xB8	; 184
  d6:	91 f0       	breq	.+36     	; 0xfc <__vector_19+0x5e>
  d8:	1d c0       	rjmp	.+58     	; 0x114 <__vector_19+0x76>
  {
    case TW_SR_DATA_ACK:
      // received data from master, call the receive callback
      I2C_recv(TWDR); 
  da:	83 b1       	in	r24, 0x03	; 3
  dc:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <_ZL8I2C_recv>
  e0:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <_ZL8I2C_recv+0x1>
  e4:	09 95       	icall
      TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
  e6:	85 ec       	ldi	r24, 0xC5	; 197
  e8:	86 bf       	out	0x36, r24	; 54
      break;
  ea:	16 c0       	rjmp	.+44     	; 0x118 <__vector_19+0x7a>
    case TW_ST_SLA_ACK:
      // master is requesting data, call the request callback
      I2C_req();
  ec:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <_ZL7I2C_req>
  f0:	f0 91 62 00 	lds	r31, 0x0062	; 0x800062 <_ZL7I2C_req+0x1>
  f4:	09 95       	icall
      TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
  f6:	85 ec       	ldi	r24, 0xC5	; 197
  f8:	86 bf       	out	0x36, r24	; 54
      break;
  fa:	0e c0       	rjmp	.+28     	; 0x118 <__vector_19+0x7a>
    case TW_ST_DATA_ACK:
      // master is requesting data, call the request callback
      I2C_req();
  fc:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <_ZL7I2C_req>
 100:	f0 91 62 00 	lds	r31, 0x0062	; 0x800062 <_ZL7I2C_req+0x1>
 104:	09 95       	icall
      TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 106:	85 ec       	ldi	r24, 0xC5	; 197
 108:	86 bf       	out	0x36, r24	; 54
      break;
 10a:	06 c0       	rjmp	.+12     	; 0x118 <__vector_19+0x7a>
    case TW_BUS_ERROR:
      // some sort of erroneous state, prepare TWI to be readdressed
      TWCR = 0;
 10c:	16 be       	out	0x36, r1	; 54
      TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN); 
 10e:	85 ec       	ldi	r24, 0xC5	; 197
 110:	86 bf       	out	0x36, r24	; 54
      break;
 112:	02 c0       	rjmp	.+4      	; 0x118 <__vector_19+0x7a>
    default:
      TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 114:	85 ec       	ldi	r24, 0xC5	; 197
 116:	86 bf       	out	0x36, r24	; 54
      break;
  }
} 
 118:	ff 91       	pop	r31
 11a:	ef 91       	pop	r30
 11c:	bf 91       	pop	r27
 11e:	af 91       	pop	r26
 120:	9f 91       	pop	r25
 122:	8f 91       	pop	r24
 124:	7f 91       	pop	r23
 126:	6f 91       	pop	r22
 128:	5f 91       	pop	r21
 12a:	4f 91       	pop	r20
 12c:	3f 91       	pop	r19
 12e:	2f 91       	pop	r18
 130:	0f 90       	pop	r0
 132:	0f be       	out	0x3f, r0	; 63
 134:	0f 90       	pop	r0
 136:	1f 90       	pop	r1
 138:	18 95       	reti

0000013a <_Z5setupv>:
static void (*I2C_recv)(uint8_t);		//isr routines for i2c
static void (*I2C_req)();

void I2C_setCallbacks(void (*recv)(uint8_t), void (*req)())
{
  I2C_recv = recv;
 13a:	8e e3       	ldi	r24, 0x3E	; 62
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <_ZL8I2C_recv+0x1>
 142:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <_ZL8I2C_recv>
  I2C_req = req;
 146:	84 e4       	ldi	r24, 0x44	; 68
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <_ZL7I2C_req+0x1>
 14e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <_ZL7I2C_req>
	I2C_transmitByte(data);
}

void setup(){
	I2C_setCallbacks(I2C_received,I2C_requested);
	I2C_init(I2C_ADDR);
 152:	80 e2       	ldi	r24, 0x20	; 32
 154:	0e 94 48 00 	call	0x90	; 0x90 <_Z8I2C_inith>
 158:	08 95       	ret

0000015a <main>:
}
int main(void)
{
	DDRA =255;
 15a:	8f ef       	ldi	r24, 0xFF	; 255
 15c:	8a bb       	out	0x1a, r24	; 26
	setup();
 15e:	0e 94 9d 00 	call	0x13a	; 0x13a <_Z5setupv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 162:	2f ef       	ldi	r18, 0xFF	; 255
 164:	83 ed       	ldi	r24, 0xD3	; 211
 166:	90 e3       	ldi	r25, 0x30	; 48
 168:	21 50       	subi	r18, 0x01	; 1
 16a:	80 40       	sbci	r24, 0x00	; 0
 16c:	90 40       	sbci	r25, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <main+0xe>
 170:	00 c0       	rjmp	.+0      	; 0x172 <main+0x18>
 172:	00 00       	nop
	
    /* Replace with your application code */
    while (1) 
    {
		_delay_ms(2000);
		PORTA = 0;
 174:	1b ba       	out	0x1b, r1	; 27
 176:	f5 cf       	rjmp	.-22     	; 0x162 <main+0x8>

00000178 <_exit>:
 178:	f8 94       	cli

0000017a <__stop_program>:
 17a:	ff cf       	rjmp	.-2      	; 0x17a <__stop_program>
